(set-option :global-decls false)
(set-option :smt.mbqi false)
(set-option :auto_config false)
(set-option :produce-unsat-cores true)
(declare-sort FString)
(declare-fun FString_constr_id (FString) Int)

(declare-sort Term)
(declare-fun Term_constr_id (Term) Int)
(declare-datatypes () ((Fuel 
(ZFuel) 
(SFuel (prec Fuel)))))
(declare-fun MaxIFuel () Fuel)
(declare-fun MaxFuel () Fuel)
(declare-fun PreType (Term) Term)
(declare-fun Valid (Term) Bool)
(declare-fun HasTypeFuel (Fuel Term Term) Bool)
(define-fun HasTypeZ ((x Term) (t Term)) Bool
(HasTypeFuel ZFuel x t))
(define-fun HasType ((x Term) (t Term)) Bool
(HasTypeFuel MaxIFuel x t))
;;fuel irrelevance
(assert (forall ((f Fuel) (x Term) (t Term))
(! (= (HasTypeFuel (SFuel f) x t)
(HasTypeZ x t))
:pattern ((HasTypeFuel (SFuel f) x t)))))
(declare-fun NoHoist (Term Bool) Bool)
;;no-hoist
(assert (forall ((dummy Term) (b Bool))
(! (= (NoHoist dummy b)
b)
:pattern ((NoHoist dummy b)))))
(define-fun  IsTyped ((x Term)) Bool
(exists ((t Term)) (HasTypeZ x t)))
(declare-fun ApplyTF (Term Fuel) Term)
(declare-fun ApplyTT (Term Term) Term)
(declare-fun Rank (Term) Int)
(declare-fun Closure (Term) Term)
(declare-fun ConsTerm (Term Term) Term)
(declare-fun ConsFuel (Fuel Term) Term)
(declare-fun Precedes (Term Term) Term)
(declare-fun Tm_uvar (Int) Term)
(define-fun Reify ((x Term)) Term x)
(assert (forall ((t Term))
(! (implies (exists ((e Term)) (HasType e t))
(Valid t))
:pattern ((Valid t)))))
(assert (forall ((t1 Term) (t2 Term))
(! (iff (Valid (Precedes t1 t2)) 
(< (Rank t1) (Rank t2)))
:pattern ((Precedes t1 t2)))))
(define-fun Prims.precedes ((a Term) (b Term) (t1 Term) (t2 Term)) Term
(Precedes t1 t2))
(declare-fun Range_const () Term)
(declare-fun _mul (Int Int) Int)
(declare-fun _div (Int Int) Int)
(declare-fun _mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (_mul x y) (* x y)) :pattern ((_mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_div x y) (div x y)) :pattern ((_div x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_mod x y) (mod x y)) :pattern ((_mod x y)))))
; <start constructor FString_const>
;;;;;;;;;;;;;;;;Constructor
(declare-fun FString_const (Int) FString)
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 0
(FString_constr_id (FString_const @u0)))
 

:pattern ((FString_const @u0))
:qid constructor_distinct_FString_const))
:named constructor_distinct_FString_const))
;;;;;;;;;;;;;;;;Projector
(declare-fun FString_const_proj_0 (FString) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (FString_const_proj_0 (FString_const @u0))
@u0)
 

:pattern ((FString_const @u0))
:qid projection_inverse_FString_const_proj_0))
:named projection_inverse_FString_const_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FString_const ((__@u0 FString)) Bool
 (and (= (FString_constr_id __@u0)
0)
(= __@u0
(FString_const (FString_const_proj_0 __@u0)))))

; </end constructor FString_const>

; <start constructor Tm_type>
;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_type () Term)
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: 
(assert (! (= 2
(Term_constr_id Tm_type))
:named constructor_distinct_Tm_type))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
2)
(= __@x0
Tm_type)))

; </end constructor Tm_type>

; <start constructor Tm_arrow>
;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_arrow (Int) Term)
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 3
(Term_constr_id (Tm_arrow @u0)))
 

:pattern ((Tm_arrow @u0))
:qid constructor_distinct_Tm_arrow))
:named constructor_distinct_Tm_arrow))
;;;;;;;;;;;;;;;;Projector
(declare-fun Tm_arrow_id (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (Tm_arrow_id (Tm_arrow @u0))
@u0)
 

:pattern ((Tm_arrow @u0))
:qid projection_inverse_Tm_arrow_id))
:named projection_inverse_Tm_arrow_id))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
3)
(= __@x0
(Tm_arrow (Tm_arrow_id __@x0)))))

; </end constructor Tm_arrow>

; <start constructor Tm_unit>
;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_unit () Term)
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: 
(assert (! (= 6
(Term_constr_id Tm_unit))
:named constructor_distinct_Tm_unit))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_unit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
6)
(= __@x0
Tm_unit)))

; </end constructor Tm_unit>

; <start constructor BoxInt>
;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxInt (Int) Term)
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 7
(Term_constr_id (BoxInt @u0)))
 

:pattern ((BoxInt @u0))
:qid constructor_distinct_BoxInt))
:named constructor_distinct_BoxInt))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxInt_proj_0 (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (BoxInt_proj_0 (BoxInt @u0))
@u0)
 

:pattern ((BoxInt @u0))
:qid projection_inverse_BoxInt_proj_0))
:named projection_inverse_BoxInt_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxInt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
7)
(= __@x0
(BoxInt (BoxInt_proj_0 __@x0)))))

; </end constructor BoxInt>

; <start constructor BoxBool>
;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxBool (Bool) Term)
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= 8
(Term_constr_id (BoxBool @u0)))
 

:pattern ((BoxBool @u0))
:qid constructor_distinct_BoxBool))
:named constructor_distinct_BoxBool))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxBool_proj_0 (Term) Bool)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= (BoxBool_proj_0 (BoxBool @u0))
@u0)
 

:pattern ((BoxBool @u0))
:qid projection_inverse_BoxBool_proj_0))
:named projection_inverse_BoxBool_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxBool ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
8)
(= __@x0
(BoxBool (BoxBool_proj_0 __@x0)))))

; </end constructor BoxBool>

; <start constructor BoxString>
;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxString (FString) Term)
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= 9
(Term_constr_id (BoxString @u0)))
 

:pattern ((BoxString @u0))
:qid constructor_distinct_BoxString))
:named constructor_distinct_BoxString))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxString_proj_0 (Term) FString)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= (BoxString_proj_0 (BoxString @u0))
@u0)
 

:pattern ((BoxString @u0))
:qid projection_inverse_BoxString_proj_0))
:named projection_inverse_BoxString_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxString ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
9)
(= __@x0
(BoxString (BoxString_proj_0 __@x0)))))

; </end constructor BoxString>

; <start constructor LexCons>
;;;;;;;;;;;;;;;;Constructor
(declare-fun LexCons (Term Term) Term)
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: 
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= 11
(Term_constr_id (LexCons @x0
@x1)))
 

:pattern ((LexCons @x0
@x1))
:qid constructor_distinct_LexCons))
:named constructor_distinct_LexCons))
;;;;;;;;;;;;;;;;Projector
(declare-fun LexCons_0 (Term) Term)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (LexCons_0 (LexCons @x0
@x1))
@x0)
 

:pattern ((LexCons @x0
@x1))
:qid projection_inverse_LexCons_0))
:named projection_inverse_LexCons_0))
;;;;;;;;;;;;;;;;Projector
(declare-fun LexCons_1 (Term) Term)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (LexCons_1 (LexCons @x0
@x1))
@x1)
 

:pattern ((LexCons @x0
@x1))
:qid projection_inverse_LexCons_1))
:named projection_inverse_LexCons_1))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-LexCons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
11)
(= __@x0
(LexCons (LexCons_0 __@x0)
(LexCons_1 __@x0)))))

; </end constructor LexCons>
(define-fun is-Prims.LexCons ((t Term)) Bool 
(is-LexCons t))
(assert (forall ((x1 Term) (x2 Term) (y1 Term) (y2 Term))
(iff (Valid (Precedes (LexCons x1 x2) (LexCons y1 y2)))
(or (Valid (Precedes x1 y1))
(and (= x1 y1)
(Valid (Precedes x2 y2)))))))


; 
(push)

; Externals for module Prims

; <Start encoding Prims.attribute>
(declare-fun Prims.attribute () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.attribute; Namespace Prims
(assert (! (HasType Prims.attribute
Tm_type)
:named function_token_typing_Prims.attribute))
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.attribute; Namespace Prims
(assert (! (= 464
(Term_constr_id Prims.attribute))
:named constructor_distinct_Prims.attribute))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.attribute; Namespace Prims
(assert (! (forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.attribute)
(= Prims.attribute
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.attribute))
:qid Prims_pretyping_84eeee553eff3e9aec239a06e72d1d36))
:named Prims_pretyping_84eeee553eff3e9aec239a06e72d1d36))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.attribute; Namespace Prims
(assert (! (HasType Prims.attribute
Tm_type)
:named typing_Prims.attribute))

; </end encoding Prims.attribute>

; <Start encoding Prims.cps>
(declare-fun Prims.cps () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.cps; Namespace Prims
(assert (! (HasType Prims.cps
Prims.attribute)
:named function_token_typing_Prims.cps))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.cps; Namespace Prims
(assert (! (HasType Prims.cps
Prims.attribute)
:named typing_Prims.cps))

; </end encoding Prims.cps>

; <Start encoding Prims.hasEq>
(declare-fun Prims.hasEq (Term) Term)
;;;;;;;;;;;;;;;;uu___9448:Type -> Prims.Tot Type
(declare-fun Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9
;;; Fact-ids: Name Prims.hasEq; Namespace Prims
(assert (! (HasType Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9
Tm_type)
:named kinding_Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.hasEq; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
:qid Prims_pre_typing_Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
:named Prims_pre_typing_Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9
;;; Fact-ids: Name Prims.hasEq; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_type)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid Prims_interpretation_Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
:qid Prims_interpretation_Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
:named Prims_interpretation_Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
(declare-fun Prims.hasEq@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.hasEq; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.hasEq@tok
@x0)
(Prims.hasEq @x0))
 

:pattern ((ApplyTT Prims.hasEq@tok
@x0))

:pattern ((Prims.hasEq @x0))
:qid token_correspondence_Prims.hasEq))
:named token_correspondence_Prims.hasEq))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.hasEq; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.hasEq@tok
Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
 

:pattern ((ApplyTT Prims.hasEq@tok
@x0))

:pattern ((ApplyTT @x0
Prims.hasEq@tok))
:qid function_token_typing_Prims.hasEq))
:named function_token_typing_Prims.hasEq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.hasEq; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.hasEq @x0)
Tm_type))
 

:pattern ((Prims.hasEq @x0))
:qid typing_Prims.hasEq))
:named typing_Prims.hasEq))

; </end encoding Prims.hasEq>

; <Start encoding Prims.eqtype>
(declare-fun Prims.eqtype () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named function_token_typing_Prims.eqtype))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named typing_Prims.eqtype))
(declare-fun Prims_Tm_refine_414d0a9f578ab0048252f8c8f552b99f () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims_Tm_refine_414d0a9f578ab0048252f8c8f552b99f
Tm_type)
:named refinement_kinding_Prims_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (iff (exists ((@x0 Term))
 (! (and (HasType @x0
Tm_type)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(27,21-27,28); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(27,21-27,28)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(27,21-27,28); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(27,21-27,28)
(Prims.hasEq @x0)
)
)
 
;;no pats
:qid ref_valid_Prims_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
(Valid Prims_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
:named ref_valid_Prims_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;(a:Type{ Prims.hasEq a })
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Prims_Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(27,21-27,28); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(27,21-27,28)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(27,21-27,28); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(27,21-27,28)
(Prims.hasEq @x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Prims_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
:qid refinement_interpretation_Prims_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
:named refinement_interpretation_Prims_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;haseq for Prims_Tm_refine_414d0a9f578ab0048252f8c8f552b99f
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Prims_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
(Valid (Prims.hasEq Tm_type)))
:named haseqPrims_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;Equation for Prims.eqtype
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (= Prims.eqtype
Prims_Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
:named equation_Prims.eqtype))

; </end encoding Prims.eqtype>

; <Start encoding Prims.bool>
(declare-fun Prims.bool () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Tm_type)
:named function_token_typing_Prims.bool))
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (= 470
(Term_constr_id Prims.bool))
:named constructor_distinct_Prims.bool))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.bool)
(= Prims.bool
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.bool))
:qid Prims_pretyping_f537159ed795b314b4e58c260361ae86))
:named Prims_pretyping_f537159ed795b314b4e58c260361ae86))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Tm_type)
:named typing_Prims.bool))
;;;;;;;;;;;;;;;;bool typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Bool))
 (! (HasType (BoxBool @u0)
Prims.bool)
 

:pattern ((BoxBool @u0))
:qid bool_typing))
:named bool_typing))
;;;;;;;;;;;;;;;;bool inversion
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.bool)
(is-BoxBool @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.bool))
:qid bool_inversion))
:named bool_inversion))

; </end encoding Prims.bool>

; <Start encoding Prims.HasEq_bool>
;;;;;;;;;;;;;;;;Assumption: HasEq_bool
;;; Fact-ids: Name Prims.HasEq_bool; Namespace Prims
(assert (! 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(32,19-32,29); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(32,19-32,29)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(32,19-32,29); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(32,19-32,29)
(Prims.hasEq Prims.bool)
)

:named assumption_Prims.HasEq_bool))

; </end encoding Prims.HasEq_bool>

; <Start encoding Prims.c_False>
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.c_False () Term)

; <Start encoding Prims.c_False>

; <start constructor Prims.c_False>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.c_False; Namespace Prims
(assert (! (= 474
(Term_constr_id Prims.c_False))
:named constructor_distinct_Prims.c_False))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.c_False ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
474)
(= __@x0
Prims.c_False)))

; </end constructor Prims.c_False>
;;; Fact-ids: Name Prims.c_False; Namespace Prims
(assert (! (HasType Prims.c_False
Tm_type)
:named kinding_Prims.c_False@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.c_False; Namespace Prims
(assert (! (forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.c_False)
(= Prims.c_False
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.c_False))
:qid Prims_pretyping_b418112a7d7e33642df0422d05062572))
:named Prims_pretyping_b418112a7d7e33642df0422d05062572))

; </end encoding Prims.c_False>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.c_False; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.c_False)
false)
 

:pattern ((HasTypeFuel @u0
@x1
Prims.c_False))
:qid fuel_guarded_inversion_Prims.c_False))
:named fuel_guarded_inversion_Prims.c_False))

; </end encoding Prims.c_False>

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.c_True () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.T () Term)
;;;;;;;;;;;;;;;;data constructor proxy: T
(declare-fun Prims.T@tok () Term)

; <Start encoding Prims.c_True>

; <start constructor Prims.c_True>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.c_True; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 479
(Term_constr_id Prims.c_True))
:named constructor_distinct_Prims.c_True))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.c_True ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
479)
(= __@x0
Prims.c_True)))

; </end constructor Prims.c_True>
;;; Fact-ids: Name Prims.c_True; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.c_True
Tm_type)
:named kinding_Prims.c_True@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.c_True; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.c_True)
(= Prims.c_True
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.c_True))
:qid Prims_pretyping_0da546199211a769a972571cdb3aec67))
:named Prims_pretyping_0da546199211a769a972571cdb3aec67))

; </end encoding Prims.c_True>

; <Start encoding Prims.T>

; <start constructor Prims.T>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.c_True; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 485
(Term_constr_id Prims.T))
:named constructor_distinct_Prims.T))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.T ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
485)
(= __@x0
Prims.T)))

; </end constructor Prims.T>
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.c_True; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.T@tok
Prims.c_True)
:named typing_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.c_True; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= Prims.T@tok
Prims.T)
:named equality_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.c_True; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
Prims.T
Prims.c_True)
 

:pattern ((HasTypeFuel @u0
Prims.T
Prims.c_True))
:qid data_typing_intro_Prims.T@tok))
:named data_typing_intro_Prims.T@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.c_True; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! true
:named data_elim_Prims.T))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.c_True; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! true
:named subterm_ordering_Prims.T))

; </end encoding Prims.T>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.c_True; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.c_True)
(is-Prims.T @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.c_True))
:qid fuel_guarded_inversion_Prims.c_True))
:named fuel_guarded_inversion_Prims.c_True))

; </end encoding >

; <Start encoding Prims.uu___is_T>
(declare-fun Prims.uu___is_T (Term) Term)
;;;;;;;;;;;;;;;;projectee:Prims.c_True -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_070c89d0419ca0b80e0da94940c40fa3 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_070c89d0419ca0b80e0da94940c40fa3
;;; Fact-ids: Name Prims.uu___is_T; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_070c89d0419ca0b80e0da94940c40fa3 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_070c89d0419ca0b80e0da94940c40fa3 @x0)
Tm_type))
:qid kinding_Tm_arrow_070c89d0419ca0b80e0da94940c40fa3))
:named kinding_Tm_arrow_070c89d0419ca0b80e0da94940c40fa3))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.uu___is_T; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_070c89d0419ca0b80e0da94940c40fa3 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_070c89d0419ca0b80e0da94940c40fa3 @x2)))
:qid Prims_pre_typing_Tm_arrow_070c89d0419ca0b80e0da94940c40fa3))
:named Prims_pre_typing_Tm_arrow_070c89d0419ca0b80e0da94940c40fa3))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_070c89d0419ca0b80e0da94940c40fa3
;;; Fact-ids: Name Prims.uu___is_T; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_070c89d0419ca0b80e0da94940c40fa3 @x1))
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.c_True)
(HasType (ApplyTT @x0
@x2)
@x1))
 

:pattern ((ApplyTT @x0
@x2))
:qid Prims_interpretation_Tm_arrow_070c89d0419ca0b80e0da94940c40fa3.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_070c89d0419ca0b80e0da94940c40fa3 @x1)))
:qid Prims_interpretation_Tm_arrow_070c89d0419ca0b80e0da94940c40fa3))
:named Prims_interpretation_Tm_arrow_070c89d0419ca0b80e0da94940c40fa3))
(declare-fun Prims.uu___is_T@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.uu___is_T; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.uu___is_T@tok
@x0)
(Prims.uu___is_T @x0))
 

:pattern ((ApplyTT Prims.uu___is_T@tok
@x0))

:pattern ((Prims.uu___is_T @x0))
:qid token_correspondence_Prims.uu___is_T))
:named token_correspondence_Prims.uu___is_T))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.uu___is_T; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.uu___is_T@tok
(Tm_arrow_070c89d0419ca0b80e0da94940c40fa3 Prims.bool)))
 

:pattern ((ApplyTT Prims.uu___is_T@tok
@x0))

:pattern ((ApplyTT @x0
Prims.uu___is_T@tok))
:qid function_token_typing_Prims.uu___is_T))
:named function_token_typing_Prims.uu___is_T))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_T; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.c_True)
(HasType (Prims.uu___is_T @x0)
Prims.bool))
 

:pattern ((Prims.uu___is_T @x0))
:qid typing_Prims.uu___is_T))
:named typing_Prims.uu___is_T))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_T; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (Prims.uu___is_T @x0)
(BoxBool (is-Prims.T @x0)))
 

:pattern ((Prims.uu___is_T @x0))
:qid disc_equation_Prims.T))
:named disc_equation_Prims.T))

; </end encoding Prims.uu___is_T>

; <Start encoding Prims.unit>
(declare-fun Prims.unit () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Tm_type)
:named function_token_typing_Prims.unit))
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (= 488
(Term_constr_id Prims.unit))
:named constructor_distinct_Prims.unit))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.unit)
(= Prims.unit
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.unit))
:qid Prims_pretyping_f8666440faa91836cc5a13998af863fc))
:named Prims_pretyping_f8666440faa91836cc5a13998af863fc))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Tm_type)
:named typing_Prims.unit))
;;;;;;;;;;;;;;;;unit typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Tm_unit
Prims.unit)
:named unit_typing))
;;;;;;;;;;;;;;;;unit inversion
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.unit)
(= @x1
Tm_unit))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.unit))
:qid unit_inversion))
:named unit_inversion))

; </end encoding Prims.unit>

; <Start encoding Prims.HasEq_unit>
;;;;;;;;;;;;;;;;Assumption: HasEq_unit
;;; Fact-ids: Name Prims.HasEq_unit; Namespace Prims
(assert (! 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(44,19-44,29); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(44,19-44,29)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(44,19-44,29); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(44,19-44,29)
(Prims.hasEq Prims.unit)
)

:named assumption_Prims.HasEq_unit))

; </end encoding Prims.HasEq_unit>

; <Start encoding Prims.squash>
(declare-fun Prims.squash (Term) Term)

(declare-fun Prims.squash@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.squash@tok
@x0)
(Prims.squash @x0))
 

:pattern ((ApplyTT Prims.squash@tok
@x0))

:pattern ((Prims.squash @x0))
:qid token_correspondence_Prims.squash))
:named token_correspondence_Prims.squash))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.squash@tok
Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
 

:pattern ((ApplyTT Prims.squash@tok
@x0))

:pattern ((ApplyTT @x0
Prims.squash@tok))
:qid function_token_typing_Prims.squash))
:named function_token_typing_Prims.squash))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.squash @x0)
Tm_type))
 

:pattern ((Prims.squash @x0))
:qid typing_Prims.squash))
:named typing_Prims.squash))
(declare-fun Prims_Tm_refine_8d65e998a07dd53ec478e27017d9dba5 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (Prims_Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Prims_Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type))
:qid refinement_kinding_Prims_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
:named refinement_kinding_Prims_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (exists ((@x2 Term))
 (! (and (HasType @x2
@x0)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(47,13-47,14); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(47,38-47,39)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(47,13-47,14); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(47,38-47,39)
@x1
)
)
 
;;no pats
:qid ref_valid_Prims_Tm_refine_8d65e998a07dd53ec478e27017d9dba5.1))
(Valid (Prims_Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)))
 

:pattern ((Valid (Prims_Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)))
:qid ref_valid_Prims_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
:named ref_valid_Prims_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;(x:Prims.unit{ p })
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Prims_Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(47,13-47,14); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(47,38-47,39)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(47,13-47,14); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(47,38-47,39)
@x3
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims_Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3)))
:qid refinement_interpretation_Prims_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
:named refinement_interpretation_Prims_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;haseq for Prims_Tm_refine_8d65e998a07dd53ec478e27017d9dba5
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Prims_Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Prims_Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1))))
:qid haseqPrims_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
:named haseqPrims_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;Equation for Prims.squash
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (Prims.squash @x0)
(Prims_Tm_refine_8d65e998a07dd53ec478e27017d9dba5 Prims.unit
@x0))
 

:pattern ((Prims.squash @x0))
:qid equation_Prims.squash))
:named equation_Prims.squash))

; </end encoding Prims.squash>

; <Start encoding Prims.l_True>
(declare-fun Prims.l_True () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Tm_type)
:named function_token_typing_Prims.l_True))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Tm_type)
:named typing_Prims.l_True))
;;;;;;;;;;;;;;;;Equation for Prims.l_True
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (= Prims.l_True
(Prims.squash Prims.c_True))
:named equation_Prims.l_True))
;;;;;;;;;;;;;;;;True interpretation
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (Valid Prims.l_True)
:named true_interp))

; </end encoding Prims.l_True>

; <Start encoding Prims.l_False>
(declare-fun Prims.l_False () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_False; Namespace Prims
(assert (! (HasType Prims.l_False
Tm_type)
:named function_token_typing_Prims.l_False))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_False; Namespace Prims
(assert (! (HasType Prims.l_False
Tm_type)
:named typing_Prims.l_False))
;;;;;;;;;;;;;;;;Equation for Prims.l_False
;;; Fact-ids: Name Prims.l_False; Namespace Prims
(assert (! (= Prims.l_False
(Prims.squash Prims.c_False))
:named equation_Prims.l_False))
;;;;;;;;;;;;;;;;False interpretation
;;; Fact-ids: Name Prims.l_False; Namespace Prims
(assert (! (iff false
(Valid Prims.l_False))
:named false_interp))

; </end encoding Prims.l_False>

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.equals (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.equals@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.equals@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.equals@x2 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.equals@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Refl (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Refl_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Refl_x (Term) Term)
;;;;;;;;;;;;;;;;Prims.Tot (Prims.equals x x)
(declare-fun Tm_arrow_fb8e9788d8e1ad00d517d818391a5552 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Refl
(declare-fun Prims.Refl@tok () Term)

; <Start encoding Prims.equals>

; <start constructor Prims.equals>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 494
(Term_constr_id (Prims.equals @x0
@x1
@x2)))
 

:pattern ((Prims.equals @x0
@x1
@x2))
:qid constructor_distinct_Prims.equals))
:named constructor_distinct_Prims.equals))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.equals ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
494)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(Prims.equals @x0
@x1
@x2))
 
;;no pats
:qid is-Prims.equals))))

; </end constructor Prims.equals>
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (= 495
(Term_constr_id Prims.equals@tok))
:named fresh_token_Prims.equals@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1)
@x2)
(Prims.equals @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1)
@x2))

:pattern ((Prims.equals @x0
@x1
@x2))
:qid token_correspondence_Prims.equals@tok))
:named token_correspondence_Prims.equals@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.equals@tok))
:named pre_kinding_Prims.equals@tok))
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
@x0))
(HasType (Prims.equals @x0
@x1
@x2)
Tm_type))
 

:pattern ((Prims.equals @x0
@x1
@x2))
:qid kinding_Prims.equals@tok))
:named kinding_Prims.equals@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.equals @x2
@x3
@x4))
(= (Prims.equals @x2
@x3
@x4)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.equals @x2
@x3
@x4)))
:qid Prims_pretyping_b2d64ca214b8828a9eba2c140aea0816))
:named Prims_pretyping_b2d64ca214b8828a9eba2c140aea0816))

; </end encoding Prims.equals>

; <Start encoding Prims.Refl>

; <start constructor Prims.Refl>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= 501
(Term_constr_id (Prims.Refl @x0
@x1)))
 

:pattern ((Prims.Refl @x0
@x1))
:qid constructor_distinct_Prims.Refl))
:named constructor_distinct_Prims.Refl))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.Refl_a (Prims.Refl @x0
@x1))
@x0)
 

:pattern ((Prims.Refl @x0
@x1))
:qid projection_inverse_Prims.Refl_a))
:named projection_inverse_Prims.Refl_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.Refl_x (Prims.Refl @x0
@x1))
@x1)
 

:pattern ((Prims.Refl @x0
@x1))
:qid projection_inverse_Prims.Refl_x))
:named projection_inverse_Prims.Refl_x))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Refl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
501)
(= __@x0
(Prims.Refl (Prims.Refl_a __@x0)
(Prims.Refl_x __@x0)))))

; </end constructor Prims.Refl>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_fb8e9788d8e1ad00d517d818391a5552
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (HasType Tm_arrow_fb8e9788d8e1ad00d517d818391a5552
Tm_type)
:named kinding_Tm_arrow_fb8e9788d8e1ad00d517d818391a5552))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_fb8e9788d8e1ad00d517d818391a5552)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_fb8e9788d8e1ad00d517d818391a5552))
:qid Prims_pre_typing_Tm_arrow_fb8e9788d8e1ad00d517d818391a5552))
:named Prims_pre_typing_Tm_arrow_fb8e9788d8e1ad00d517d818391a5552))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_fb8e9788d8e1ad00d517d818391a5552
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_fb8e9788d8e1ad00d517d818391a5552)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Prims.equals @x1
@x2
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Prims_interpretation_Tm_arrow_fb8e9788d8e1ad00d517d818391a5552.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_fb8e9788d8e1ad00d517d818391a5552))
:qid Prims_interpretation_Tm_arrow_fb8e9788d8e1ad00d517d818391a5552))
:named Prims_interpretation_Tm_arrow_fb8e9788d8e1ad00d517d818391a5552))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (= 504
(Term_constr_id Prims.Refl@tok))
:named fresh_token_Prims.Refl@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.Refl@tok
Tm_arrow_fb8e9788d8e1ad00d517d818391a5552))
 

:pattern ((ApplyTT Prims.Refl@tok
@x0))

:pattern ((ApplyTT @x0
Prims.Refl@tok))
:qid typing_tok_Prims.Refl@tok))
:named typing_tok_Prims.Refl@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.Refl@tok
@x0)
@x1)
(Prims.Refl @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.Refl@tok
@x0)
@x1))
:qid equality_tok_Prims.Refl@tok))
:named equality_tok_Prims.Refl@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1))
(HasTypeFuel @u0
(Prims.Refl @x1
@x2)
(Prims.equals @x1
@x2
@x2)))
 

:pattern ((HasTypeFuel @u0
(Prims.Refl @x1
@x2)
(Prims.equals @x1
@x2
@x2)))
:qid data_typing_intro_Prims.Refl@tok))
:named data_typing_intro_Prims.Refl@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Refl @x1
@x2)
(Prims.equals @x3
@x4
@x5))
(and (= @x2
@x5)
(HasTypeFuel @u0
@x4
@x1)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x2
@x3)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Refl @x1
@x2)
(Prims.equals @x3
@x4
@x5)))
:qid data_elim_Prims.Refl))
:named data_elim_Prims.Refl))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! true
:named subterm_ordering_Prims.Refl))

; </end encoding Prims.Refl>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Prims.equals @x2
@x3
@x4))
(and (is-Prims.Refl @x1)
(= @x2
(Prims.Refl_a @x1))
(= @x3
(Prims.Refl_x @x1))
(= @x4
(Prims.Refl_x @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims.equals @x2
@x3
@x4)))
:qid fuel_guarded_inversion_Prims.equals))
:named fuel_guarded_inversion_Prims.equals))

; </end encoding >

; <Start encoding Prims.uu___is_Refl>
(declare-fun Prims.uu___is_Refl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:Prims.equals x uu___9513 -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_bc73fd7342ebe29d8df19539096373ef (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_bc73fd7342ebe29d8df19539096373ef
;;; Fact-ids: Name Prims.uu___is_Refl; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_bc73fd7342ebe29d8df19539096373ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_bc73fd7342ebe29d8df19539096373ef @x0)
Tm_type))
:qid kinding_Tm_arrow_bc73fd7342ebe29d8df19539096373ef))
:named kinding_Tm_arrow_bc73fd7342ebe29d8df19539096373ef))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.uu___is_Refl; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_bc73fd7342ebe29d8df19539096373ef @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_bc73fd7342ebe29d8df19539096373ef @x2)))
:qid Prims_pre_typing_Tm_arrow_bc73fd7342ebe29d8df19539096373ef))
:named Prims_pre_typing_Tm_arrow_bc73fd7342ebe29d8df19539096373ef))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_bc73fd7342ebe29d8df19539096373ef
;;; Fact-ids: Name Prims.uu___is_Refl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_bc73fd7342ebe29d8df19539096373ef @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
@x2)
(HasType @x4
@x2)
(HasType @x5
(Prims.equals @x2
@x3
@x4)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5))
:qid Prims_interpretation_Tm_arrow_bc73fd7342ebe29d8df19539096373ef.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_bc73fd7342ebe29d8df19539096373ef @x1)))
:qid Prims_interpretation_Tm_arrow_bc73fd7342ebe29d8df19539096373ef))
:named Prims_interpretation_Tm_arrow_bc73fd7342ebe29d8df19539096373ef))
(declare-fun Prims.uu___is_Refl@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.uu___is_Refl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.uu___is_Refl@tok
@x0)
@x1)
@x2)
@x3)
(Prims.uu___is_Refl @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.uu___is_Refl@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((Prims.uu___is_Refl @x0
@x1
@x2
@x3))
:qid token_correspondence_Prims.uu___is_Refl))
:named token_correspondence_Prims.uu___is_Refl))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.uu___is_Refl; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.uu___is_Refl@tok
(Tm_arrow_bc73fd7342ebe29d8df19539096373ef Prims.bool)))
 

:pattern ((ApplyTT Prims.uu___is_Refl@tok
@x0))

:pattern ((ApplyTT @x0
Prims.uu___is_Refl@tok))
:qid function_token_typing_Prims.uu___is_Refl))
:named function_token_typing_Prims.uu___is_Refl))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Refl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
@x0)
(HasType @x3
(Prims.equals @x0
@x1
@x2)))
(HasType (Prims.uu___is_Refl @x0
@x1
@x2
@x3)
Prims.bool))
 

:pattern ((Prims.uu___is_Refl @x0
@x1
@x2
@x3))
:qid typing_Prims.uu___is_Refl))
:named typing_Prims.uu___is_Refl))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_Refl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.uu___is_Refl @x0
@x1
@x2
@x3)
(BoxBool (is-Prims.Refl @x3)))
 

:pattern ((Prims.uu___is_Refl @x0
@x1
@x2
@x3))
:qid disc_equation_Prims.Refl))
:named disc_equation_Prims.Refl))

; </end encoding Prims.uu___is_Refl>

; <Start encoding Prims.eq2>
(declare-fun Prims.eq2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;x:a -> y:a -> Prims.Tot Type0
(declare-fun Tm_arrow_6ec4fb880680b9c92f812f2f271d81c6 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_6ec4fb880680b9c92f812f2f271d81c6
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! (HasType Tm_arrow_6ec4fb880680b9c92f812f2f271d81c6
Tm_type)
:named kinding_Tm_arrow_6ec4fb880680b9c92f812f2f271d81c6))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_6ec4fb880680b9c92f812f2f271d81c6)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_6ec4fb880680b9c92f812f2f271d81c6))
:qid Prims_pre_typing_Tm_arrow_6ec4fb880680b9c92f812f2f271d81c6))
:named Prims_pre_typing_Tm_arrow_6ec4fb880680b9c92f812f2f271d81c6))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_6ec4fb880680b9c92f812f2f271d81c6
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_6ec4fb880680b9c92f812f2f271d81c6)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
@x1)
(HasType @x3
@x1))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid Prims_interpretation_Tm_arrow_6ec4fb880680b9c92f812f2f271d81c6.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_6ec4fb880680b9c92f812f2f271d81c6))
:qid Prims_interpretation_Tm_arrow_6ec4fb880680b9c92f812f2f271d81c6))
:named Prims_interpretation_Tm_arrow_6ec4fb880680b9c92f812f2f271d81c6))
(declare-fun Prims.eq2@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.eq2@tok
@x0)
@x1)
@x2)
(Prims.eq2 @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.eq2@tok
@x0)
@x1)
@x2))

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid token_correspondence_Prims.eq2))
:named token_correspondence_Prims.eq2))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.eq2@tok
Tm_arrow_6ec4fb880680b9c92f812f2f271d81c6))
 

:pattern ((ApplyTT Prims.eq2@tok
@x0))

:pattern ((ApplyTT @x0
Prims.eq2@tok))
:qid function_token_typing_Prims.eq2))
:named function_token_typing_Prims.eq2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
@x0))
(HasType (Prims.eq2 @x0
@x1
@x2)
Tm_type))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid typing_Prims.eq2))
:named typing_Prims.eq2))
;;;;;;;;;;;;;;;;Equation for Prims.eq2
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.eq2 @x0
@x1
@x2)
(Prims.squash (Prims.equals @x0
@x1
@x2)))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid equation_Prims.eq2))
:named equation_Prims.eq2))
;;;;;;;;;;;;;;;;Eq2 interpretation
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (= @x1
@x2)
(Valid (Prims.eq2 @x0
@x1
@x2)))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid eq2-interp))
:named eq2-interp))

; </end encoding Prims.eq2>

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.h_equals (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.h_equals@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.h_equals@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.h_equals@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.h_equals@x3 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.h_equals@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.HRefl (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.HRefl_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.HRefl_x (Term) Term)
;;;;;;;;;;;;;;;;Prims.Tot (Prims.h_equals x x)
(declare-fun Tm_arrow_bdff7ac4f38fee2d6889d7b58ec10beb () Term)
;;;;;;;;;;;;;;;;data constructor proxy: HRefl
(declare-fun Prims.HRefl@tok () Term)

; <Start encoding Prims.h_equals>

; <start constructor Prims.h_equals>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.h_equals; Namespace Prims; Name Prims.HRefl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 509
(Term_constr_id (Prims.h_equals @x0
@x1
@x2
@x3)))
 

:pattern ((Prims.h_equals @x0
@x1
@x2
@x3))
:qid constructor_distinct_Prims.h_equals))
:named constructor_distinct_Prims.h_equals))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.h_equals ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
509)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(Prims.h_equals @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-Prims.h_equals))))

; </end constructor Prims.h_equals>
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.h_equals; Namespace Prims; Name Prims.HRefl; Namespace Prims
(assert (! (= 510
(Term_constr_id Prims.h_equals@tok))
:named fresh_token_Prims.h_equals@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.h_equals; Namespace Prims; Name Prims.HRefl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.h_equals@tok
@x0)
@x1)
@x2)
@x3)
(Prims.h_equals @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.h_equals@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((Prims.h_equals @x0
@x1
@x2
@x3))
:qid token_correspondence_Prims.h_equals@tok))
:named token_correspondence_Prims.h_equals@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.h_equals; Namespace Prims; Name Prims.HRefl; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.h_equals@tok))
:named pre_kinding_Prims.h_equals@tok))
;;; Fact-ids: Name Prims.h_equals; Namespace Prims; Name Prims.HRefl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
Tm_type)
(HasType @x3
@x2))
(HasType (Prims.h_equals @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((Prims.h_equals @x0
@x1
@x2
@x3))
:qid kinding_Prims.h_equals@tok))
:named kinding_Prims.h_equals@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.h_equals; Namespace Prims; Name Prims.HRefl; Namespace Prims
(assert (! (forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.h_equals @x2
@x3
@x4
@x5))
(= (Prims.h_equals @x2
@x3
@x4
@x5)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.h_equals @x2
@x3
@x4
@x5)))
:qid Prims_pretyping_7acd57d016221111399205a6d5a9f45a))
:named Prims_pretyping_7acd57d016221111399205a6d5a9f45a))

; </end encoding Prims.h_equals>

; <Start encoding Prims.HRefl>

; <start constructor Prims.HRefl>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.h_equals; Namespace Prims; Name Prims.HRefl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= 516
(Term_constr_id (Prims.HRefl @x0
@x1)))
 

:pattern ((Prims.HRefl @x0
@x1))
:qid constructor_distinct_Prims.HRefl))
:named constructor_distinct_Prims.HRefl))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.h_equals; Namespace Prims; Name Prims.HRefl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.HRefl_a (Prims.HRefl @x0
@x1))
@x0)
 

:pattern ((Prims.HRefl @x0
@x1))
:qid projection_inverse_Prims.HRefl_a))
:named projection_inverse_Prims.HRefl_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.h_equals; Namespace Prims; Name Prims.HRefl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.HRefl_x (Prims.HRefl @x0
@x1))
@x1)
 

:pattern ((Prims.HRefl @x0
@x1))
:qid projection_inverse_Prims.HRefl_x))
:named projection_inverse_Prims.HRefl_x))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.HRefl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
516)
(= __@x0
(Prims.HRefl (Prims.HRefl_a __@x0)
(Prims.HRefl_x __@x0)))))

; </end constructor Prims.HRefl>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_bdff7ac4f38fee2d6889d7b58ec10beb
;;; Fact-ids: Name Prims.h_equals; Namespace Prims; Name Prims.HRefl; Namespace Prims
(assert (! (HasType Tm_arrow_bdff7ac4f38fee2d6889d7b58ec10beb
Tm_type)
:named kinding_Tm_arrow_bdff7ac4f38fee2d6889d7b58ec10beb))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.h_equals; Namespace Prims; Name Prims.HRefl; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_bdff7ac4f38fee2d6889d7b58ec10beb)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_bdff7ac4f38fee2d6889d7b58ec10beb))
:qid Prims_pre_typing_Tm_arrow_bdff7ac4f38fee2d6889d7b58ec10beb))
:named Prims_pre_typing_Tm_arrow_bdff7ac4f38fee2d6889d7b58ec10beb))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_bdff7ac4f38fee2d6889d7b58ec10beb
;;; Fact-ids: Name Prims.h_equals; Namespace Prims; Name Prims.HRefl; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_bdff7ac4f38fee2d6889d7b58ec10beb)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Prims.h_equals @x1
@x2
@x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Prims_interpretation_Tm_arrow_bdff7ac4f38fee2d6889d7b58ec10beb.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_bdff7ac4f38fee2d6889d7b58ec10beb))
:qid Prims_interpretation_Tm_arrow_bdff7ac4f38fee2d6889d7b58ec10beb))
:named Prims_interpretation_Tm_arrow_bdff7ac4f38fee2d6889d7b58ec10beb))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.h_equals; Namespace Prims; Name Prims.HRefl; Namespace Prims
(assert (! (= 519
(Term_constr_id Prims.HRefl@tok))
:named fresh_token_Prims.HRefl@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.h_equals; Namespace Prims; Name Prims.HRefl; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.HRefl@tok
Tm_arrow_bdff7ac4f38fee2d6889d7b58ec10beb))
 

:pattern ((ApplyTT Prims.HRefl@tok
@x0))

:pattern ((ApplyTT @x0
Prims.HRefl@tok))
:qid typing_tok_Prims.HRefl@tok))
:named typing_tok_Prims.HRefl@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.h_equals; Namespace Prims; Name Prims.HRefl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.HRefl@tok
@x0)
@x1)
(Prims.HRefl @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.HRefl@tok
@x0)
@x1))
:qid equality_tok_Prims.HRefl@tok))
:named equality_tok_Prims.HRefl@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.h_equals; Namespace Prims; Name Prims.HRefl; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1))
(HasTypeFuel @u0
(Prims.HRefl @x1
@x2)
(Prims.h_equals @x1
@x2
@x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(Prims.HRefl @x1
@x2)
(Prims.h_equals @x1
@x2
@x1
@x2)))
:qid data_typing_intro_Prims.HRefl@tok))
:named data_typing_intro_Prims.HRefl@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.h_equals; Namespace Prims; Name Prims.HRefl; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.HRefl @x1
@x2)
(Prims.h_equals @x3
@x4
@x5
@x6))
(and (= @x2
@x6)
(= @x1
@x5)
(HasTypeFuel @u0
@x4
@x1)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x2
@x3)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.HRefl @x1
@x2)
(Prims.h_equals @x3
@x4
@x5
@x6)))
:qid data_elim_Prims.HRefl))
:named data_elim_Prims.HRefl))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.h_equals; Namespace Prims; Name Prims.HRefl; Namespace Prims
(assert (! true
:named subterm_ordering_Prims.HRefl))

; </end encoding Prims.HRefl>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.h_equals; Namespace Prims; Name Prims.HRefl; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Prims.h_equals @x2
@x3
@x4
@x5))
(and (is-Prims.HRefl @x1)
(= @x2
(Prims.HRefl_a @x1))
(= @x3
(Prims.HRefl_x @x1))
(= @x4
(Prims.HRefl_a @x1))
(= @x5
(Prims.HRefl_x @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims.h_equals @x2
@x3
@x4
@x5)))
:qid fuel_guarded_inversion_Prims.h_equals))
:named fuel_guarded_inversion_Prims.h_equals))

; </end encoding >

; <Start encoding Prims.uu___is_HRefl>
(declare-fun Prims.uu___is_HRefl (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:Prims.h_equals x uu___9594 -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_e55fd27cdca75961dfd00ca7901ce64a (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_e55fd27cdca75961dfd00ca7901ce64a
;;; Fact-ids: Name Prims.uu___is_HRefl; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_e55fd27cdca75961dfd00ca7901ce64a @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_e55fd27cdca75961dfd00ca7901ce64a @x0)
Tm_type))
:qid kinding_Tm_arrow_e55fd27cdca75961dfd00ca7901ce64a))
:named kinding_Tm_arrow_e55fd27cdca75961dfd00ca7901ce64a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.uu___is_HRefl; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_e55fd27cdca75961dfd00ca7901ce64a @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_e55fd27cdca75961dfd00ca7901ce64a @x2)))
:qid Prims_pre_typing_Tm_arrow_e55fd27cdca75961dfd00ca7901ce64a))
:named Prims_pre_typing_Tm_arrow_e55fd27cdca75961dfd00ca7901ce64a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_e55fd27cdca75961dfd00ca7901ce64a
;;; Fact-ids: Name Prims.uu___is_HRefl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_e55fd27cdca75961dfd00ca7901ce64a @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
@x2)
(HasType @x4
Tm_type)
(HasType @x5
@x4)
(HasType @x6
(Prims.h_equals @x2
@x3
@x4
@x5)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x6)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x6))
:qid Prims_interpretation_Tm_arrow_e55fd27cdca75961dfd00ca7901ce64a.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_e55fd27cdca75961dfd00ca7901ce64a @x1)))
:qid Prims_interpretation_Tm_arrow_e55fd27cdca75961dfd00ca7901ce64a))
:named Prims_interpretation_Tm_arrow_e55fd27cdca75961dfd00ca7901ce64a))
(declare-fun Prims.uu___is_HRefl@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.uu___is_HRefl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.uu___is_HRefl@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(Prims.uu___is_HRefl @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.uu___is_HRefl@tok
@x0)
@x1)
@x2)
@x3)
@x4))

:pattern ((Prims.uu___is_HRefl @x0
@x1
@x2
@x3
@x4))
:qid token_correspondence_Prims.uu___is_HRefl))
:named token_correspondence_Prims.uu___is_HRefl))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.uu___is_HRefl; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.uu___is_HRefl@tok
(Tm_arrow_e55fd27cdca75961dfd00ca7901ce64a Prims.bool)))
 

:pattern ((ApplyTT Prims.uu___is_HRefl@tok
@x0))

:pattern ((ApplyTT @x0
Prims.uu___is_HRefl@tok))
:qid function_token_typing_Prims.uu___is_HRefl))
:named function_token_typing_Prims.uu___is_HRefl))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_HRefl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
Tm_type)
(HasType @x3
@x2)
(HasType @x4
(Prims.h_equals @x0
@x1
@x2
@x3)))
(HasType (Prims.uu___is_HRefl @x0
@x1
@x2
@x3
@x4)
Prims.bool))
 

:pattern ((Prims.uu___is_HRefl @x0
@x1
@x2
@x3
@x4))
:qid typing_Prims.uu___is_HRefl))
:named typing_Prims.uu___is_HRefl))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_HRefl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Prims.uu___is_HRefl @x0
@x1
@x2
@x3
@x4)
(BoxBool (is-Prims.HRefl @x4)))
 

:pattern ((Prims.uu___is_HRefl @x0
@x1
@x2
@x3
@x4))
:qid disc_equation_Prims.HRefl))
:named disc_equation_Prims.HRefl))

; </end encoding Prims.uu___is_HRefl>

; <Start encoding Prims.eq3>
(declare-fun Prims.eq3 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;x:a -> y:b -> Prims.Tot Type0
(declare-fun Tm_arrow_b6d9a0405fe947e3e94208d2176102fa () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_b6d9a0405fe947e3e94208d2176102fa
;;; Fact-ids: Name Prims.eq3; Namespace Prims
(assert (! (HasType Tm_arrow_b6d9a0405fe947e3e94208d2176102fa
Tm_type)
:named kinding_Tm_arrow_b6d9a0405fe947e3e94208d2176102fa))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.eq3; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_b6d9a0405fe947e3e94208d2176102fa)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_b6d9a0405fe947e3e94208d2176102fa))
:qid Prims_pre_typing_Tm_arrow_b6d9a0405fe947e3e94208d2176102fa))
:named Prims_pre_typing_Tm_arrow_b6d9a0405fe947e3e94208d2176102fa))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_b6d9a0405fe947e3e94208d2176102fa
;;; Fact-ids: Name Prims.eq3; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_b6d9a0405fe947e3e94208d2176102fa)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
@x1)
(HasType @x4
@x2))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid Prims_interpretation_Tm_arrow_b6d9a0405fe947e3e94208d2176102fa.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_b6d9a0405fe947e3e94208d2176102fa))
:qid Prims_interpretation_Tm_arrow_b6d9a0405fe947e3e94208d2176102fa))
:named Prims_interpretation_Tm_arrow_b6d9a0405fe947e3e94208d2176102fa))
(declare-fun Prims.eq3@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.eq3; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.eq3@tok
@x0)
@x1)
@x2)
@x3)
(Prims.eq3 @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.eq3@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((Prims.eq3 @x0
@x1
@x2
@x3))
:qid token_correspondence_Prims.eq3))
:named token_correspondence_Prims.eq3))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.eq3; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.eq3@tok
Tm_arrow_b6d9a0405fe947e3e94208d2176102fa))
 

:pattern ((ApplyTT Prims.eq3@tok
@x0))

:pattern ((ApplyTT @x0
Prims.eq3@tok))
:qid function_token_typing_Prims.eq3))
:named function_token_typing_Prims.eq3))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eq3; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
@x0)
(HasType @x3
@x1))
(HasType (Prims.eq3 @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((Prims.eq3 @x0
@x1
@x2
@x3))
:qid typing_Prims.eq3))
:named typing_Prims.eq3))
;;;;;;;;;;;;;;;;Equation for Prims.eq3
;;; Fact-ids: Name Prims.eq3; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.eq3 @x0
@x1
@x2
@x3)
(Prims.squash (Prims.h_equals @x0
@x2
@x1
@x3)))
 

:pattern ((Prims.eq3 @x0
@x1
@x2
@x3))
:qid equation_Prims.eq3))
:named equation_Prims.eq3))
;;;;;;;;;;;;;;;;Eq3 interpretation
;;; Fact-ids: Name Prims.eq3; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (= @x2
@x3)
(Valid (Prims.eq3 @x0
@x1
@x2
@x3)))
 

:pattern ((Prims.eq3 @x0
@x1
@x2
@x3))
:qid eq3-interp))
:named eq3-interp))

; </end encoding Prims.eq3>

; <Skipped Prims.op_Equals_Equals_Equals/>

; <Start encoding Prims.b2t>
(declare-fun Prims.b2t (Term) Term)
;;;;;;;;;;;;;;;;b2t def
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (Valid (Prims.b2t @x0))
(BoxBool_proj_0 @x0))
 

:pattern ((Prims.b2t @x0))
:qid b2t_def))
:named b2t_def))

; </end encoding Prims.b2t>

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.c_and (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.c_and@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.c_and@x1 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.c_and@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.And (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.And_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.And_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.And__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.And__1 (Term) Term)
;;;;;;;;;;;;;;;;_0:p -> _1:q -> Prims.Tot (Prims.c_and p q)
(declare-fun Tm_arrow_c195f8405ecbc84a46f4e174b8827a84 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: And
(declare-fun Prims.And@tok () Term)

; <Start encoding Prims.c_and>

; <start constructor Prims.c_and>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= 524
(Term_constr_id (Prims.c_and @x0
@x1)))
 

:pattern ((Prims.c_and @x0
@x1))
:qid constructor_distinct_Prims.c_and))
:named constructor_distinct_Prims.c_and))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.c_and ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
524)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.c_and @x0
@x1))
 
;;no pats
:qid is-Prims.c_and))))

; </end constructor Prims.c_and>
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (= 525
(Term_constr_id Prims.c_and@tok))
:named fresh_token_Prims.c_and@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.c_and@tok
@x0)
@x1)
(Prims.c_and @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.c_and@tok
@x0)
@x1))

:pattern ((Prims.c_and @x0
@x1))
:qid token_correspondence_Prims.c_and@tok))
:named token_correspondence_Prims.c_and@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.c_and@tok))
:named pre_kinding_Prims.c_and@tok))
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.c_and @x0
@x1)
Tm_type))
 

:pattern ((Prims.c_and @x0
@x1))
:qid kinding_Prims.c_and@tok))
:named kinding_Prims.c_and@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.c_and @x2
@x3))
(= (Prims.c_and @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.c_and @x2
@x3)))
:qid Prims_pretyping_e62044a0ce6e7fead51634c83b79e8c1))
:named Prims_pretyping_e62044a0ce6e7fead51634c83b79e8c1))

; </end encoding Prims.c_and>

; <Start encoding Prims.And>

; <start constructor Prims.And>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 531
(Term_constr_id (Prims.And @x0
@x1
@x2
@x3)))
 

:pattern ((Prims.And @x0
@x1
@x2
@x3))
:qid constructor_distinct_Prims.And))
:named constructor_distinct_Prims.And))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.And_p (Prims.And @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((Prims.And @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.And_p))
:named projection_inverse_Prims.And_p))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.And_q (Prims.And @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((Prims.And @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.And_q))
:named projection_inverse_Prims.And_q))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.And__0 (Prims.And @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((Prims.And @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.And__0))
:named projection_inverse_Prims.And__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.And__1 (Prims.And @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((Prims.And @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.And__1))
:named projection_inverse_Prims.And__1))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.And ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
531)
(= __@x0
(Prims.And (Prims.And_p __@x0)
(Prims.And_q __@x0)
(Prims.And__0 __@x0)
(Prims.And__1 __@x0)))))

; </end constructor Prims.And>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c195f8405ecbc84a46f4e174b8827a84
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (HasType Tm_arrow_c195f8405ecbc84a46f4e174b8827a84
Tm_type)
:named kinding_Tm_arrow_c195f8405ecbc84a46f4e174b8827a84))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_c195f8405ecbc84a46f4e174b8827a84)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_c195f8405ecbc84a46f4e174b8827a84))
:qid Prims_pre_typing_Tm_arrow_c195f8405ecbc84a46f4e174b8827a84))
:named Prims_pre_typing_Tm_arrow_c195f8405ecbc84a46f4e174b8827a84))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c195f8405ecbc84a46f4e174b8827a84
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_c195f8405ecbc84a46f4e174b8827a84)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
@x1)
(HasType @x4
@x2))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
(Prims.c_and @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid Prims_interpretation_Tm_arrow_c195f8405ecbc84a46f4e174b8827a84.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_c195f8405ecbc84a46f4e174b8827a84))
:qid Prims_interpretation_Tm_arrow_c195f8405ecbc84a46f4e174b8827a84))
:named Prims_interpretation_Tm_arrow_c195f8405ecbc84a46f4e174b8827a84))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (= 534
(Term_constr_id Prims.And@tok))
:named fresh_token_Prims.And@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.And@tok
Tm_arrow_c195f8405ecbc84a46f4e174b8827a84))
 

:pattern ((ApplyTT Prims.And@tok
@x0))

:pattern ((ApplyTT @x0
Prims.And@tok))
:qid typing_tok_Prims.And@tok))
:named typing_tok_Prims.And@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.And@tok
@x0)
@x1)
@x2)
@x3)
(Prims.And @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.And@tok
@x0)
@x1)
@x2)
@x3))
:qid equality_tok_Prims.And@tok))
:named equality_tok_Prims.And@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2))
(HasTypeFuel @u0
(Prims.And @x1
@x2
@x3
@x4)
(Prims.c_and @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(Prims.And @x1
@x2
@x3
@x4)
(Prims.c_and @x1
@x2)))
:qid data_typing_intro_Prims.And@tok))
:named data_typing_intro_Prims.And@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.And @x1
@x2
@x3
@x4)
(Prims.c_and @x5
@x6))
(and (HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x4
@x6)
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.And @x1
@x2
@x3
@x4)
(Prims.c_and @x5
@x6)))
:qid data_elim_Prims.And))
:named data_elim_Prims.And))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.And @x1
@x2
@x3
@x4)
(Prims.c_and @x5
@x6))
(and (Valid (Precedes @x3
(Prims.And @x1
@x2
@x3
@x4)))
(Valid (Precedes @x4
(Prims.And @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.And @x1
@x2
@x3
@x4)
(Prims.c_and @x5
@x6)))
:qid subterm_ordering_Prims.And))
:named subterm_ordering_Prims.And))

; </end encoding Prims.And>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.c_and; Namespace Prims; Name Prims.And; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Prims.c_and @x2
@x3))
(and (is-Prims.And @x1)
(= @x2
(Prims.And_p @x1))
(= @x3
(Prims.And_q @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims.c_and @x2
@x3)))
:qid fuel_guarded_inversion_Prims.c_and))
:named fuel_guarded_inversion_Prims.c_and))

; </end encoding >

; <Start encoding Prims.uu___is_And>
(declare-fun Prims.uu___is_And (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:Prims.c_and p q -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_a85c3802d57513fa8b84a44441b2fe6a (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a85c3802d57513fa8b84a44441b2fe6a
;;; Fact-ids: Name Prims.uu___is_And; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_a85c3802d57513fa8b84a44441b2fe6a @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_a85c3802d57513fa8b84a44441b2fe6a @x0)
Tm_type))
:qid kinding_Tm_arrow_a85c3802d57513fa8b84a44441b2fe6a))
:named kinding_Tm_arrow_a85c3802d57513fa8b84a44441b2fe6a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.uu___is_And; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_a85c3802d57513fa8b84a44441b2fe6a @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_a85c3802d57513fa8b84a44441b2fe6a @x2)))
:qid Prims_pre_typing_Tm_arrow_a85c3802d57513fa8b84a44441b2fe6a))
:named Prims_pre_typing_Tm_arrow_a85c3802d57513fa8b84a44441b2fe6a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a85c3802d57513fa8b84a44441b2fe6a
;;; Fact-ids: Name Prims.uu___is_And; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_a85c3802d57513fa8b84a44441b2fe6a @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(Prims.c_and @x2
@x3)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4))
:qid Prims_interpretation_Tm_arrow_a85c3802d57513fa8b84a44441b2fe6a.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_a85c3802d57513fa8b84a44441b2fe6a @x1)))
:qid Prims_interpretation_Tm_arrow_a85c3802d57513fa8b84a44441b2fe6a))
:named Prims_interpretation_Tm_arrow_a85c3802d57513fa8b84a44441b2fe6a))
(declare-fun Prims.uu___is_And@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.uu___is_And; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.uu___is_And@tok
@x0)
@x1)
@x2)
(Prims.uu___is_And @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.uu___is_And@tok
@x0)
@x1)
@x2))

:pattern ((Prims.uu___is_And @x0
@x1
@x2))
:qid token_correspondence_Prims.uu___is_And))
:named token_correspondence_Prims.uu___is_And))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.uu___is_And; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.uu___is_And@tok
(Tm_arrow_a85c3802d57513fa8b84a44441b2fe6a Prims.bool)))
 

:pattern ((ApplyTT Prims.uu___is_And@tok
@x0))

:pattern ((ApplyTT @x0
Prims.uu___is_And@tok))
:qid function_token_typing_Prims.uu___is_And))
:named function_token_typing_Prims.uu___is_And))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_And; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Prims.c_and @x0
@x1)))
(HasType (Prims.uu___is_And @x0
@x1
@x2)
Prims.bool))
 

:pattern ((Prims.uu___is_And @x0
@x1
@x2))
:qid typing_Prims.uu___is_And))
:named typing_Prims.uu___is_And))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_And; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.uu___is_And @x0
@x1
@x2)
(BoxBool (is-Prims.And @x2)))
 

:pattern ((Prims.uu___is_And @x0
@x1
@x2))
:qid disc_equation_Prims.And))
:named disc_equation_Prims.And))

; </end encoding Prims.uu___is_And>

; <Start encoding Prims.__proj__And__item___0>
(declare-fun Prims.__proj__And__item___0 (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:Prims.c_and p q -> Prims.Tot p
(declare-fun Tm_arrow_301a720cbb1c5487adfd2a0b64c67b7e () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_301a720cbb1c5487adfd2a0b64c67b7e
;;; Fact-ids: Name Prims.__proj__And__item___0; Namespace Prims
(assert (! (HasType Tm_arrow_301a720cbb1c5487adfd2a0b64c67b7e
Tm_type)
:named kinding_Tm_arrow_301a720cbb1c5487adfd2a0b64c67b7e))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.__proj__And__item___0; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_301a720cbb1c5487adfd2a0b64c67b7e)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_301a720cbb1c5487adfd2a0b64c67b7e))
:qid Prims_pre_typing_Tm_arrow_301a720cbb1c5487adfd2a0b64c67b7e))
:named Prims_pre_typing_Tm_arrow_301a720cbb1c5487adfd2a0b64c67b7e))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_301a720cbb1c5487adfd2a0b64c67b7e
;;; Fact-ids: Name Prims.__proj__And__item___0; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_301a720cbb1c5487adfd2a0b64c67b7e)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(Prims.c_and @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid Prims_interpretation_Tm_arrow_301a720cbb1c5487adfd2a0b64c67b7e.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_301a720cbb1c5487adfd2a0b64c67b7e))
:qid Prims_interpretation_Tm_arrow_301a720cbb1c5487adfd2a0b64c67b7e))
:named Prims_interpretation_Tm_arrow_301a720cbb1c5487adfd2a0b64c67b7e))
(declare-fun Prims.__proj__And__item___0@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.__proj__And__item___0; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.__proj__And__item___0@tok
@x0)
@x1)
@x2)
(Prims.__proj__And__item___0 @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.__proj__And__item___0@tok
@x0)
@x1)
@x2))

:pattern ((Prims.__proj__And__item___0 @x0
@x1
@x2))
:qid token_correspondence_Prims.__proj__And__item___0))
:named token_correspondence_Prims.__proj__And__item___0))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__proj__And__item___0; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.__proj__And__item___0@tok
Tm_arrow_301a720cbb1c5487adfd2a0b64c67b7e))
 

:pattern ((ApplyTT Prims.__proj__And__item___0@tok
@x0))

:pattern ((ApplyTT @x0
Prims.__proj__And__item___0@tok))
:qid function_token_typing_Prims.__proj__And__item___0))
:named function_token_typing_Prims.__proj__And__item___0))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.__proj__And__item___0; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Prims.c_and @x0
@x1)))
(HasType (Prims.__proj__And__item___0 @x0
@x1
@x2)
@x0))
 

:pattern ((Prims.__proj__And__item___0 @x0
@x1
@x2))
:qid typing_Prims.__proj__And__item___0))
:named typing_Prims.__proj__And__item___0))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Prims.__proj__And__item___0; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.__proj__And__item___0 @x0
@x1
@x2)
(Prims.And__0 @x2))
 

:pattern ((Prims.__proj__And__item___0 @x0
@x1
@x2))
:qid proj_equation_Prims.And__0))
:named proj_equation_Prims.And__0))

; </end encoding Prims.__proj__And__item___0>

; <Start encoding Prims.__proj__And__item___1>
(declare-fun Prims.__proj__And__item___1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:Prims.c_and p q -> Prims.Tot q
(declare-fun Tm_arrow_b6d5b453dd814b79a1d29a5f85b3161f () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_b6d5b453dd814b79a1d29a5f85b3161f
;;; Fact-ids: Name Prims.__proj__And__item___1; Namespace Prims
(assert (! (HasType Tm_arrow_b6d5b453dd814b79a1d29a5f85b3161f
Tm_type)
:named kinding_Tm_arrow_b6d5b453dd814b79a1d29a5f85b3161f))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.__proj__And__item___1; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_b6d5b453dd814b79a1d29a5f85b3161f)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_b6d5b453dd814b79a1d29a5f85b3161f))
:qid Prims_pre_typing_Tm_arrow_b6d5b453dd814b79a1d29a5f85b3161f))
:named Prims_pre_typing_Tm_arrow_b6d5b453dd814b79a1d29a5f85b3161f))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_b6d5b453dd814b79a1d29a5f85b3161f
;;; Fact-ids: Name Prims.__proj__And__item___1; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_b6d5b453dd814b79a1d29a5f85b3161f)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(Prims.c_and @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid Prims_interpretation_Tm_arrow_b6d5b453dd814b79a1d29a5f85b3161f.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_b6d5b453dd814b79a1d29a5f85b3161f))
:qid Prims_interpretation_Tm_arrow_b6d5b453dd814b79a1d29a5f85b3161f))
:named Prims_interpretation_Tm_arrow_b6d5b453dd814b79a1d29a5f85b3161f))
(declare-fun Prims.__proj__And__item___1@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.__proj__And__item___1; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.__proj__And__item___1@tok
@x0)
@x1)
@x2)
(Prims.__proj__And__item___1 @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.__proj__And__item___1@tok
@x0)
@x1)
@x2))

:pattern ((Prims.__proj__And__item___1 @x0
@x1
@x2))
:qid token_correspondence_Prims.__proj__And__item___1))
:named token_correspondence_Prims.__proj__And__item___1))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__proj__And__item___1; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.__proj__And__item___1@tok
Tm_arrow_b6d5b453dd814b79a1d29a5f85b3161f))
 

:pattern ((ApplyTT Prims.__proj__And__item___1@tok
@x0))

:pattern ((ApplyTT @x0
Prims.__proj__And__item___1@tok))
:qid function_token_typing_Prims.__proj__And__item___1))
:named function_token_typing_Prims.__proj__And__item___1))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.__proj__And__item___1; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Prims.c_and @x0
@x1)))
(HasType (Prims.__proj__And__item___1 @x0
@x1
@x2)
@x1))
 

:pattern ((Prims.__proj__And__item___1 @x0
@x1
@x2))
:qid typing_Prims.__proj__And__item___1))
:named typing_Prims.__proj__And__item___1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Prims.__proj__And__item___1; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.__proj__And__item___1 @x0
@x1
@x2)
(Prims.And__1 @x2))
 

:pattern ((Prims.__proj__And__item___1 @x0
@x1
@x2))
:qid proj_equation_Prims.And__1))
:named proj_equation_Prims.And__1))

; </end encoding Prims.__proj__And__item___1>

; <Start encoding Prims.l_and>
(declare-fun Prims.l_and (Term Term) Term)
;;;;;;;;;;;;;;;;p:Type0 -> q:Type0 -> Prims.Tot Type0
(declare-fun Tm_arrow_30967c52768a603d18eb4835e5ba8f79 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_30967c52768a603d18eb4835e5ba8f79
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! (HasType Tm_arrow_30967c52768a603d18eb4835e5ba8f79
Tm_type)
:named kinding_Tm_arrow_30967c52768a603d18eb4835e5ba8f79))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_30967c52768a603d18eb4835e5ba8f79)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_30967c52768a603d18eb4835e5ba8f79))
:qid Prims_pre_typing_Tm_arrow_30967c52768a603d18eb4835e5ba8f79))
:named Prims_pre_typing_Tm_arrow_30967c52768a603d18eb4835e5ba8f79))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_30967c52768a603d18eb4835e5ba8f79
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_30967c52768a603d18eb4835e5ba8f79)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Prims_interpretation_Tm_arrow_30967c52768a603d18eb4835e5ba8f79.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_30967c52768a603d18eb4835e5ba8f79))
:qid Prims_interpretation_Tm_arrow_30967c52768a603d18eb4835e5ba8f79))
:named Prims_interpretation_Tm_arrow_30967c52768a603d18eb4835e5ba8f79))
(declare-fun Prims.l_and@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.l_and@tok
@x0)
@x1)
(Prims.l_and @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.l_and@tok
@x0)
@x1))

:pattern ((Prims.l_and @x0
@x1))
:qid token_correspondence_Prims.l_and))
:named token_correspondence_Prims.l_and))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.l_and@tok
Tm_arrow_30967c52768a603d18eb4835e5ba8f79))
 

:pattern ((ApplyTT Prims.l_and@tok
@x0))

:pattern ((ApplyTT @x0
Prims.l_and@tok))
:qid function_token_typing_Prims.l_and))
:named function_token_typing_Prims.l_and))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.l_and @x0
@x1)
Tm_type))
 

:pattern ((Prims.l_and @x0
@x1))
:qid typing_Prims.l_and))
:named typing_Prims.l_and))
;;;;;;;;;;;;;;;;Equation for Prims.l_and
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_and @x0
@x1)
(Prims.squash (Prims.c_and @x0
@x1)))
 

:pattern ((Prims.l_and @x0
@x1))
:qid equation_Prims.l_and))
:named equation_Prims.l_and))
;;;;;;;;;;;;;;;;/\ interpretation
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (and (Valid @x0)
(Valid @x1))
(Valid (Prims.l_and @x0
@x1)))
 

:pattern ((Prims.l_and @x0
@x1))
:qid l_and-interp))
:named l_and-interp))

; </end encoding Prims.l_and>

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.c_or (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.c_or@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.c_or@x1 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.c_or@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left__0 (Term) Term)
;;;;;;;;;;;;;;;;_0:p -> Prims.Tot (Prims.c_or p q)
(declare-fun Tm_arrow_b9e392cd340cf43078e3b599d9c5d1b3 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Left
(declare-fun Prims.Left@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right__0 (Term) Term)
;;;;;;;;;;;;;;;;_0:q -> Prims.Tot (Prims.c_or p q)
(declare-fun Tm_arrow_ccf8afc309a68a850ac71365261b9fb7 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Right
(declare-fun Prims.Right@tok () Term)

; <Start encoding Prims.c_or>

; <start constructor Prims.c_or>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= 543
(Term_constr_id (Prims.c_or @x0
@x1)))
 

:pattern ((Prims.c_or @x0
@x1))
:qid constructor_distinct_Prims.c_or))
:named constructor_distinct_Prims.c_or))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.c_or ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
543)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.c_or @x0
@x1))
 
;;no pats
:qid is-Prims.c_or))))

; </end constructor Prims.c_or>
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (= 544
(Term_constr_id Prims.c_or@tok))
:named fresh_token_Prims.c_or@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.c_or@tok
@x0)
@x1)
(Prims.c_or @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.c_or@tok
@x0)
@x1))

:pattern ((Prims.c_or @x0
@x1))
:qid token_correspondence_Prims.c_or@tok))
:named token_correspondence_Prims.c_or@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.c_or@tok))
:named pre_kinding_Prims.c_or@tok))
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.c_or @x0
@x1)
Tm_type))
 

:pattern ((Prims.c_or @x0
@x1))
:qid kinding_Prims.c_or@tok))
:named kinding_Prims.c_or@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.c_or @x2
@x3))
(= (Prims.c_or @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.c_or @x2
@x3)))
:qid Prims_pretyping_ec9eb96b60d47b16f577c7cc5d5d8607))
:named Prims_pretyping_ec9eb96b60d47b16f577c7cc5d5d8607))

; </end encoding Prims.c_or>

; <Start encoding Prims.Left>

; <start constructor Prims.Left>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 550
(Term_constr_id (Prims.Left @x0
@x1
@x2)))
 

:pattern ((Prims.Left @x0
@x1
@x2))
:qid constructor_distinct_Prims.Left))
:named constructor_distinct_Prims.Left))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Left_p (Prims.Left @x0
@x1
@x2))
@x0)
 

:pattern ((Prims.Left @x0
@x1
@x2))
:qid projection_inverse_Prims.Left_p))
:named projection_inverse_Prims.Left_p))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Left_q (Prims.Left @x0
@x1
@x2))
@x1)
 

:pattern ((Prims.Left @x0
@x1
@x2))
:qid projection_inverse_Prims.Left_q))
:named projection_inverse_Prims.Left_q))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Left__0 (Prims.Left @x0
@x1
@x2))
@x2)
 

:pattern ((Prims.Left @x0
@x1
@x2))
:qid projection_inverse_Prims.Left__0))
:named projection_inverse_Prims.Left__0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Left ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
550)
(= __@x0
(Prims.Left (Prims.Left_p __@x0)
(Prims.Left_q __@x0)
(Prims.Left__0 __@x0)))))

; </end constructor Prims.Left>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_b9e392cd340cf43078e3b599d9c5d1b3
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (HasType Tm_arrow_b9e392cd340cf43078e3b599d9c5d1b3
Tm_type)
:named kinding_Tm_arrow_b9e392cd340cf43078e3b599d9c5d1b3))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_b9e392cd340cf43078e3b599d9c5d1b3)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_b9e392cd340cf43078e3b599d9c5d1b3))
:qid Prims_pre_typing_Tm_arrow_b9e392cd340cf43078e3b599d9c5d1b3))
:named Prims_pre_typing_Tm_arrow_b9e392cd340cf43078e3b599d9c5d1b3))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_b9e392cd340cf43078e3b599d9c5d1b3
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_b9e392cd340cf43078e3b599d9c5d1b3)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
@x1))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
(Prims.c_or @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid Prims_interpretation_Tm_arrow_b9e392cd340cf43078e3b599d9c5d1b3.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_b9e392cd340cf43078e3b599d9c5d1b3))
:qid Prims_interpretation_Tm_arrow_b9e392cd340cf43078e3b599d9c5d1b3))
:named Prims_interpretation_Tm_arrow_b9e392cd340cf43078e3b599d9c5d1b3))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (= 553
(Term_constr_id Prims.Left@tok))
:named fresh_token_Prims.Left@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.Left@tok
Tm_arrow_b9e392cd340cf43078e3b599d9c5d1b3))
 

:pattern ((ApplyTT Prims.Left@tok
@x0))

:pattern ((ApplyTT @x0
Prims.Left@tok))
:qid typing_tok_Prims.Left@tok))
:named typing_tok_Prims.Left@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.Left@tok
@x0)
@x1)
@x2)
(Prims.Left @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.Left@tok
@x0)
@x1)
@x2))
:qid equality_tok_Prims.Left@tok))
:named equality_tok_Prims.Left@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1))
(HasTypeFuel @u0
(Prims.Left @x1
@x2
@x3)
(Prims.c_or @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(Prims.Left @x1
@x2
@x3)
(Prims.c_or @x1
@x2)))
:qid data_typing_intro_Prims.Left@tok))
:named data_typing_intro_Prims.Left@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Left @x1
@x2
@x3)
(Prims.c_or @x4
@x5))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x3
@x4)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Left @x1
@x2
@x3)
(Prims.c_or @x4
@x5)))
:qid data_elim_Prims.Left))
:named data_elim_Prims.Left))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Left @x1
@x2
@x3)
(Prims.c_or @x4
@x5))
(Valid (Precedes @x3
(Prims.Left @x1
@x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Left @x1
@x2
@x3)
(Prims.c_or @x4
@x5)))
:qid subterm_ordering_Prims.Left))
:named subterm_ordering_Prims.Left))

; </end encoding Prims.Left>

; <Start encoding Prims.Right>

; <start constructor Prims.Right>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 555
(Term_constr_id (Prims.Right @x0
@x1
@x2)))
 

:pattern ((Prims.Right @x0
@x1
@x2))
:qid constructor_distinct_Prims.Right))
:named constructor_distinct_Prims.Right))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Right_p (Prims.Right @x0
@x1
@x2))
@x0)
 

:pattern ((Prims.Right @x0
@x1
@x2))
:qid projection_inverse_Prims.Right_p))
:named projection_inverse_Prims.Right_p))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Right_q (Prims.Right @x0
@x1
@x2))
@x1)
 

:pattern ((Prims.Right @x0
@x1
@x2))
:qid projection_inverse_Prims.Right_q))
:named projection_inverse_Prims.Right_q))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Right__0 (Prims.Right @x0
@x1
@x2))
@x2)
 

:pattern ((Prims.Right @x0
@x1
@x2))
:qid projection_inverse_Prims.Right__0))
:named projection_inverse_Prims.Right__0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Right ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
555)
(= __@x0
(Prims.Right (Prims.Right_p __@x0)
(Prims.Right_q __@x0)
(Prims.Right__0 __@x0)))))

; </end constructor Prims.Right>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_ccf8afc309a68a850ac71365261b9fb7
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (HasType Tm_arrow_ccf8afc309a68a850ac71365261b9fb7
Tm_type)
:named kinding_Tm_arrow_ccf8afc309a68a850ac71365261b9fb7))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_ccf8afc309a68a850ac71365261b9fb7)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_ccf8afc309a68a850ac71365261b9fb7))
:qid Prims_pre_typing_Tm_arrow_ccf8afc309a68a850ac71365261b9fb7))
:named Prims_pre_typing_Tm_arrow_ccf8afc309a68a850ac71365261b9fb7))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_ccf8afc309a68a850ac71365261b9fb7
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_ccf8afc309a68a850ac71365261b9fb7)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
@x2))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
(Prims.c_or @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid Prims_interpretation_Tm_arrow_ccf8afc309a68a850ac71365261b9fb7.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_ccf8afc309a68a850ac71365261b9fb7))
:qid Prims_interpretation_Tm_arrow_ccf8afc309a68a850ac71365261b9fb7))
:named Prims_interpretation_Tm_arrow_ccf8afc309a68a850ac71365261b9fb7))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (= 558
(Term_constr_id Prims.Right@tok))
:named fresh_token_Prims.Right@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.Right@tok
Tm_arrow_ccf8afc309a68a850ac71365261b9fb7))
 

:pattern ((ApplyTT Prims.Right@tok
@x0))

:pattern ((ApplyTT @x0
Prims.Right@tok))
:qid typing_tok_Prims.Right@tok))
:named typing_tok_Prims.Right@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.Right@tok
@x0)
@x1)
@x2)
(Prims.Right @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.Right@tok
@x0)
@x1)
@x2))
:qid equality_tok_Prims.Right@tok))
:named equality_tok_Prims.Right@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x2))
(HasTypeFuel @u0
(Prims.Right @x1
@x2
@x3)
(Prims.c_or @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(Prims.Right @x1
@x2
@x3)
(Prims.c_or @x1
@x2)))
:qid data_typing_intro_Prims.Right@tok))
:named data_typing_intro_Prims.Right@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Right @x1
@x2
@x3)
(Prims.c_or @x4
@x5))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x2)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Right @x1
@x2
@x3)
(Prims.c_or @x4
@x5)))
:qid data_elim_Prims.Right))
:named data_elim_Prims.Right))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Right @x1
@x2
@x3)
(Prims.c_or @x4
@x5))
(Valid (Precedes @x3
(Prims.Right @x1
@x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Right @x1
@x2
@x3)
(Prims.c_or @x4
@x5)))
:qid subterm_ordering_Prims.Right))
:named subterm_ordering_Prims.Right))

; </end encoding Prims.Right>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.c_or; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(Prims.c_or @x2
@x3))
(or (and (is-Prims.Left @x1)
(= @x2
(Prims.Left_p @x1))
(= @x3
(Prims.Left_q @x1)))
(and (is-Prims.Right @x1)
(= @x2
(Prims.Right_p @x1))
(= @x3
(Prims.Right_q @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(Prims.c_or @x2
@x3)))
:qid fuel_guarded_inversion_Prims.c_or))
:named fuel_guarded_inversion_Prims.c_or))

; </end encoding >

; <Start encoding Prims.uu___is_Left>
(declare-fun Prims.uu___is_Left (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:Prims.c_or p q -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_581a99aa4b3c2c64b4b6501081582473 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_581a99aa4b3c2c64b4b6501081582473
;;; Fact-ids: Name Prims.uu___is_Left; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_581a99aa4b3c2c64b4b6501081582473 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_581a99aa4b3c2c64b4b6501081582473 @x0)
Tm_type))
:qid kinding_Tm_arrow_581a99aa4b3c2c64b4b6501081582473))
:named kinding_Tm_arrow_581a99aa4b3c2c64b4b6501081582473))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.uu___is_Left; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_581a99aa4b3c2c64b4b6501081582473 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_581a99aa4b3c2c64b4b6501081582473 @x2)))
:qid Prims_pre_typing_Tm_arrow_581a99aa4b3c2c64b4b6501081582473))
:named Prims_pre_typing_Tm_arrow_581a99aa4b3c2c64b4b6501081582473))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_581a99aa4b3c2c64b4b6501081582473
;;; Fact-ids: Name Prims.uu___is_Left; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_581a99aa4b3c2c64b4b6501081582473 @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(Prims.c_or @x2
@x3)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4))
:qid Prims_interpretation_Tm_arrow_581a99aa4b3c2c64b4b6501081582473.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_581a99aa4b3c2c64b4b6501081582473 @x1)))
:qid Prims_interpretation_Tm_arrow_581a99aa4b3c2c64b4b6501081582473))
:named Prims_interpretation_Tm_arrow_581a99aa4b3c2c64b4b6501081582473))
(declare-fun Prims.uu___is_Left@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.uu___is_Left; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.uu___is_Left@tok
@x0)
@x1)
@x2)
(Prims.uu___is_Left @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.uu___is_Left@tok
@x0)
@x1)
@x2))

:pattern ((Prims.uu___is_Left @x0
@x1
@x2))
:qid token_correspondence_Prims.uu___is_Left))
:named token_correspondence_Prims.uu___is_Left))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.uu___is_Left; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.uu___is_Left@tok
(Tm_arrow_581a99aa4b3c2c64b4b6501081582473 Prims.bool)))
 

:pattern ((ApplyTT Prims.uu___is_Left@tok
@x0))

:pattern ((ApplyTT @x0
Prims.uu___is_Left@tok))
:qid function_token_typing_Prims.uu___is_Left))
:named function_token_typing_Prims.uu___is_Left))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Left; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Prims.c_or @x0
@x1)))
(HasType (Prims.uu___is_Left @x0
@x1
@x2)
Prims.bool))
 

:pattern ((Prims.uu___is_Left @x0
@x1
@x2))
:qid typing_Prims.uu___is_Left))
:named typing_Prims.uu___is_Left))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_Left; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.uu___is_Left @x0
@x1
@x2)
(BoxBool (is-Prims.Left @x2)))
 

:pattern ((Prims.uu___is_Left @x0
@x1
@x2))
:qid disc_equation_Prims.Left))
:named disc_equation_Prims.Left))

; </end encoding Prims.uu___is_Left>

; <Start encoding Prims.__proj__Left__item___0>
(declare-fun Prims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.__proj__Left__item___0; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (Prims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d @x0
@x1)
Tm_type)
 

:pattern ((HasType (Prims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d @x0
@x1)
Tm_type))
:qid refinement_kinding_Prims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d))
:named refinement_kinding_Prims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: Name Prims.__proj__Left__item___0; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (exists ((@x2 Term))
 (! (and (HasType @x2
(Prims.c_or @x0
@x1))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(87,4-87,8); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(87,4-87,8)
(BoxBool_proj_0 (Prims.uu___is_Left @x0
@x1
@x2))
)
 
;;no pats
:qid ref_valid_Prims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d.1))
(Valid (Prims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d @x0
@x1)))
 

:pattern ((Valid (Prims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d @x0
@x1)))
:qid ref_valid_Prims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d))
:named ref_valid_Prims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d))
;;;;;;;;;;;;;;;;(uu___9803:Prims.c_or p q{ Prims.b2t (Left? uu___9803) })
;;; Fact-ids: Name Prims.__proj__Left__item___0; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Prims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d @x2
@x3))
(and (HasTypeFuel @u0
@x1
(Prims.c_or @x2
@x3))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(87,4-87,8); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(87,4-87,8)
(BoxBool_proj_0 (Prims.uu___is_Left @x2
@x3
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d @x2
@x3)))
:qid refinement_interpretation_Prims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d))
:named refinement_interpretation_Prims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d))
;;;;;;;;;;;;;;;;haseq for Prims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d
;;; Fact-ids: Name Prims.__proj__Left__item___0; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Prims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d @x0
@x1)))
(Valid (Prims.hasEq (Prims.c_or @x0
@x1))))
 

:pattern ((Valid (Prims.hasEq (Prims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d @x0
@x1))))
:qid haseqPrims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d))
:named haseqPrims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d))
(declare-fun Prims.__proj__Left__item___0 (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:(uu___9822:Prims.c_or p q{ Prims.b2t (Left? uu___9822) }) -> Prims.Tot p
(declare-fun Tm_arrow_7e78dbd6763d8fddb37f1e732bda927c () Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_7e78dbd6763d8fddb37f1e732bda927c
;;; Fact-ids: Name Prims.__proj__Left__item___0; Namespace Prims
(assert (! (HasType Tm_arrow_7e78dbd6763d8fddb37f1e732bda927c
Tm_type)
:named kinding_Tm_arrow_7e78dbd6763d8fddb37f1e732bda927c))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.__proj__Left__item___0; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_7e78dbd6763d8fddb37f1e732bda927c)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_7e78dbd6763d8fddb37f1e732bda927c))
:qid Prims_pre_typing_Tm_arrow_7e78dbd6763d8fddb37f1e732bda927c))
:named Prims_pre_typing_Tm_arrow_7e78dbd6763d8fddb37f1e732bda927c))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_7e78dbd6763d8fddb37f1e732bda927c
;;; Fact-ids: Name Prims.__proj__Left__item___0; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_7e78dbd6763d8fddb37f1e732bda927c)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(Prims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid Prims_interpretation_Tm_arrow_7e78dbd6763d8fddb37f1e732bda927c.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_7e78dbd6763d8fddb37f1e732bda927c))
:qid Prims_interpretation_Tm_arrow_7e78dbd6763d8fddb37f1e732bda927c))
:named Prims_interpretation_Tm_arrow_7e78dbd6763d8fddb37f1e732bda927c))
(declare-fun Prims.__proj__Left__item___0@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.__proj__Left__item___0; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.__proj__Left__item___0@tok
@x0)
@x1)
@x2)
(Prims.__proj__Left__item___0 @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.__proj__Left__item___0@tok
@x0)
@x1)
@x2))

:pattern ((Prims.__proj__Left__item___0 @x0
@x1
@x2))
:qid token_correspondence_Prims.__proj__Left__item___0))
:named token_correspondence_Prims.__proj__Left__item___0))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__proj__Left__item___0; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.__proj__Left__item___0@tok
Tm_arrow_7e78dbd6763d8fddb37f1e732bda927c))
 

:pattern ((ApplyTT Prims.__proj__Left__item___0@tok
@x0))

:pattern ((ApplyTT @x0
Prims.__proj__Left__item___0@tok))
:qid function_token_typing_Prims.__proj__Left__item___0))
:named function_token_typing_Prims.__proj__Left__item___0))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.__proj__Left__item___0; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Prims_Tm_refine_51387c0a7ef77e43ab89d4ae2b6b464d @x0
@x1)))
(HasType (Prims.__proj__Left__item___0 @x0
@x1
@x2)
@x0))
 

:pattern ((Prims.__proj__Left__item___0 @x0
@x1
@x2))
:qid typing_Prims.__proj__Left__item___0))
:named typing_Prims.__proj__Left__item___0))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Prims.__proj__Left__item___0; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.__proj__Left__item___0 @x0
@x1
@x2)
(Prims.Left__0 @x2))
 

:pattern ((Prims.__proj__Left__item___0 @x0
@x1
@x2))
:qid proj_equation_Prims.Left__0))
:named proj_equation_Prims.Left__0))

; </end encoding Prims.__proj__Left__item___0>

; <Start encoding Prims.uu___is_Right>
(declare-fun Prims.uu___is_Right (Term Term Term) Term)

(declare-fun Prims.uu___is_Right@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.uu___is_Right; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.uu___is_Right@tok
@x0)
@x1)
@x2)
(Prims.uu___is_Right @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.uu___is_Right@tok
@x0)
@x1)
@x2))

:pattern ((Prims.uu___is_Right @x0
@x1
@x2))
:qid token_correspondence_Prims.uu___is_Right))
:named token_correspondence_Prims.uu___is_Right))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.uu___is_Right; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.uu___is_Right@tok
(Tm_arrow_581a99aa4b3c2c64b4b6501081582473 Prims.bool)))
 

:pattern ((ApplyTT Prims.uu___is_Right@tok
@x0))

:pattern ((ApplyTT @x0
Prims.uu___is_Right@tok))
:qid function_token_typing_Prims.uu___is_Right))
:named function_token_typing_Prims.uu___is_Right))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Right; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Prims.c_or @x0
@x1)))
(HasType (Prims.uu___is_Right @x0
@x1
@x2)
Prims.bool))
 

:pattern ((Prims.uu___is_Right @x0
@x1
@x2))
:qid typing_Prims.uu___is_Right))
:named typing_Prims.uu___is_Right))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_Right; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.uu___is_Right @x0
@x1
@x2)
(BoxBool (is-Prims.Right @x2)))
 

:pattern ((Prims.uu___is_Right @x0
@x1
@x2))
:qid disc_equation_Prims.Right))
:named disc_equation_Prims.Right))

; </end encoding Prims.uu___is_Right>

; <Start encoding Prims.__proj__Right__item___0>
(declare-fun Prims_Tm_refine_95f078f2b9cfbd740f9afd162814a526 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.__proj__Right__item___0; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (Prims_Tm_refine_95f078f2b9cfbd740f9afd162814a526 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Prims_Tm_refine_95f078f2b9cfbd740f9afd162814a526 @x0
@x1)
Tm_type))
:qid refinement_kinding_Prims_Tm_refine_95f078f2b9cfbd740f9afd162814a526))
:named refinement_kinding_Prims_Tm_refine_95f078f2b9cfbd740f9afd162814a526))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: Name Prims.__proj__Right__item___0; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (exists ((@x2 Term))
 (! (and (HasType @x2
(Prims.c_or @x0
@x1))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(88,4-88,9); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(88,4-88,9)
(BoxBool_proj_0 (Prims.uu___is_Right @x0
@x1
@x2))
)
 
;;no pats
:qid ref_valid_Prims_Tm_refine_95f078f2b9cfbd740f9afd162814a526.1))
(Valid (Prims_Tm_refine_95f078f2b9cfbd740f9afd162814a526 @x0
@x1)))
 

:pattern ((Valid (Prims_Tm_refine_95f078f2b9cfbd740f9afd162814a526 @x0
@x1)))
:qid ref_valid_Prims_Tm_refine_95f078f2b9cfbd740f9afd162814a526))
:named ref_valid_Prims_Tm_refine_95f078f2b9cfbd740f9afd162814a526))
;;;;;;;;;;;;;;;;(uu___9851:Prims.c_or p q{ Prims.b2t (Right? uu___9851) })
;;; Fact-ids: Name Prims.__proj__Right__item___0; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Prims_Tm_refine_95f078f2b9cfbd740f9afd162814a526 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(Prims.c_or @x2
@x3))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(88,4-88,9); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(88,4-88,9)
(BoxBool_proj_0 (Prims.uu___is_Right @x2
@x3
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims_Tm_refine_95f078f2b9cfbd740f9afd162814a526 @x2
@x3)))
:qid refinement_interpretation_Prims_Tm_refine_95f078f2b9cfbd740f9afd162814a526))
:named refinement_interpretation_Prims_Tm_refine_95f078f2b9cfbd740f9afd162814a526))
;;;;;;;;;;;;;;;;haseq for Prims_Tm_refine_95f078f2b9cfbd740f9afd162814a526
;;; Fact-ids: Name Prims.__proj__Right__item___0; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Prims_Tm_refine_95f078f2b9cfbd740f9afd162814a526 @x0
@x1)))
(Valid (Prims.hasEq (Prims.c_or @x0
@x1))))
 

:pattern ((Valid (Prims.hasEq (Prims_Tm_refine_95f078f2b9cfbd740f9afd162814a526 @x0
@x1))))
:qid haseqPrims_Tm_refine_95f078f2b9cfbd740f9afd162814a526))
:named haseqPrims_Tm_refine_95f078f2b9cfbd740f9afd162814a526))
(declare-fun Prims.__proj__Right__item___0 (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:(uu___9870:Prims.c_or p q{ Prims.b2t (Right? uu___9870) }) -> Prims.Tot q
(declare-fun Tm_arrow_c69c7e036a278fd3b0fe0b71a945feca () Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_c69c7e036a278fd3b0fe0b71a945feca
;;; Fact-ids: Name Prims.__proj__Right__item___0; Namespace Prims
(assert (! (HasType Tm_arrow_c69c7e036a278fd3b0fe0b71a945feca
Tm_type)
:named kinding_Tm_arrow_c69c7e036a278fd3b0fe0b71a945feca))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.__proj__Right__item___0; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_c69c7e036a278fd3b0fe0b71a945feca)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_c69c7e036a278fd3b0fe0b71a945feca))
:qid Prims_pre_typing_Tm_arrow_c69c7e036a278fd3b0fe0b71a945feca))
:named Prims_pre_typing_Tm_arrow_c69c7e036a278fd3b0fe0b71a945feca))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c69c7e036a278fd3b0fe0b71a945feca
;;; Fact-ids: Name Prims.__proj__Right__item___0; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_c69c7e036a278fd3b0fe0b71a945feca)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(Prims_Tm_refine_95f078f2b9cfbd740f9afd162814a526 @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid Prims_interpretation_Tm_arrow_c69c7e036a278fd3b0fe0b71a945feca.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_c69c7e036a278fd3b0fe0b71a945feca))
:qid Prims_interpretation_Tm_arrow_c69c7e036a278fd3b0fe0b71a945feca))
:named Prims_interpretation_Tm_arrow_c69c7e036a278fd3b0fe0b71a945feca))
(declare-fun Prims.__proj__Right__item___0@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.__proj__Right__item___0; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.__proj__Right__item___0@tok
@x0)
@x1)
@x2)
(Prims.__proj__Right__item___0 @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.__proj__Right__item___0@tok
@x0)
@x1)
@x2))

:pattern ((Prims.__proj__Right__item___0 @x0
@x1
@x2))
:qid token_correspondence_Prims.__proj__Right__item___0))
:named token_correspondence_Prims.__proj__Right__item___0))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__proj__Right__item___0; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.__proj__Right__item___0@tok
Tm_arrow_c69c7e036a278fd3b0fe0b71a945feca))
 

:pattern ((ApplyTT Prims.__proj__Right__item___0@tok
@x0))

:pattern ((ApplyTT @x0
Prims.__proj__Right__item___0@tok))
:qid function_token_typing_Prims.__proj__Right__item___0))
:named function_token_typing_Prims.__proj__Right__item___0))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.__proj__Right__item___0; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Prims_Tm_refine_95f078f2b9cfbd740f9afd162814a526 @x0
@x1)))
(HasType (Prims.__proj__Right__item___0 @x0
@x1
@x2)
@x1))
 

:pattern ((Prims.__proj__Right__item___0 @x0
@x1
@x2))
:qid typing_Prims.__proj__Right__item___0))
:named typing_Prims.__proj__Right__item___0))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Prims.__proj__Right__item___0; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.__proj__Right__item___0 @x0
@x1
@x2)
(Prims.Right__0 @x2))
 

:pattern ((Prims.__proj__Right__item___0 @x0
@x1
@x2))
:qid proj_equation_Prims.Right__0))
:named proj_equation_Prims.Right__0))

; </end encoding Prims.__proj__Right__item___0>

; <Start encoding Prims.l_or>
(declare-fun Prims.l_or (Term Term) Term)

(declare-fun Prims.l_or@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.l_or; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.l_or@tok
@x0)
@x1)
(Prims.l_or @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.l_or@tok
@x0)
@x1))

:pattern ((Prims.l_or @x0
@x1))
:qid token_correspondence_Prims.l_or))
:named token_correspondence_Prims.l_or))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_or; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.l_or@tok
Tm_arrow_30967c52768a603d18eb4835e5ba8f79))
 

:pattern ((ApplyTT Prims.l_or@tok
@x0))

:pattern ((ApplyTT @x0
Prims.l_or@tok))
:qid function_token_typing_Prims.l_or))
:named function_token_typing_Prims.l_or))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_or; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.l_or @x0
@x1)
Tm_type))
 

:pattern ((Prims.l_or @x0
@x1))
:qid typing_Prims.l_or))
:named typing_Prims.l_or))
;;;;;;;;;;;;;;;;Equation for Prims.l_or
;;; Fact-ids: Name Prims.l_or; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_or @x0
@x1)
(Prims.squash (Prims.c_or @x0
@x1)))
 

:pattern ((Prims.l_or @x0
@x1))
:qid equation_Prims.l_or))
:named equation_Prims.l_or))
;;;;;;;;;;;;;;;;\/ interpretation
;;; Fact-ids: Name Prims.l_or; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (or (Valid @x0)
(Valid @x1))
(Valid (Prims.l_or @x0
@x1)))
 

:pattern ((Prims.l_or @x0
@x1))
:qid l_or-interp))
:named l_or-interp))

; </end encoding Prims.l_or>

; <Start encoding Prims.l_imp>
(declare-fun Prims.l_imp (Term Term) Term)

(declare-fun Prims.l_imp@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.l_imp@tok
@x0)
@x1)
(Prims.l_imp @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.l_imp@tok
@x0)
@x1))

:pattern ((Prims.l_imp @x0
@x1))
:qid token_correspondence_Prims.l_imp))
:named token_correspondence_Prims.l_imp))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.l_imp@tok
Tm_arrow_30967c52768a603d18eb4835e5ba8f79))
 

:pattern ((ApplyTT Prims.l_imp@tok
@x0))

:pattern ((ApplyTT @x0
Prims.l_imp@tok))
:qid function_token_typing_Prims.l_imp))
:named function_token_typing_Prims.l_imp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.l_imp @x0
@x1)
Tm_type))
 

:pattern ((Prims.l_imp @x0
@x1))
:qid typing_Prims.l_imp))
:named typing_Prims.l_imp))
;;;;;;;;;;;;;;;;uu___9892:p -> Prims.GTot q
(declare-fun Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b))
:named kinding_Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b @x2
@x3)))
:qid Prims_pre_typing_Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b))
:named Prims_pre_typing_Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b @x1
@x2))
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
@x1))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b @x1
@x2)))
:qid Prims_interpretation_Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b))
:named Prims_interpretation_Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b))
;;;;;;;;;;;;;;;;Equation for Prims.l_imp
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_imp @x0
@x1)
(Prims.squash (Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b @x1
@x0)))
 

:pattern ((Prims.l_imp @x0
@x1))
:qid equation_Prims.l_imp))
:named equation_Prims.l_imp))
;;;;;;;;;;;;;;;;==> interpretation
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (implies (Valid @x0)
(Valid @x1))
(Valid (Prims.l_imp @x0
@x1)))
 

:pattern ((Prims.l_imp @x0
@x1))
:qid l_imp-interp))
:named l_imp-interp))

; </end encoding Prims.l_imp>

; <Start encoding Prims.l_iff>
(declare-fun Prims.l_iff (Term Term) Term)

(declare-fun Prims.l_iff@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.l_iff; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.l_iff@tok
@x0)
@x1)
(Prims.l_iff @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.l_iff@tok
@x0)
@x1))

:pattern ((Prims.l_iff @x0
@x1))
:qid token_correspondence_Prims.l_iff))
:named token_correspondence_Prims.l_iff))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_iff; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.l_iff@tok
Tm_arrow_30967c52768a603d18eb4835e5ba8f79))
 

:pattern ((ApplyTT Prims.l_iff@tok
@x0))

:pattern ((ApplyTT @x0
Prims.l_iff@tok))
:qid function_token_typing_Prims.l_iff))
:named function_token_typing_Prims.l_iff))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_iff; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.l_iff @x0
@x1)
Tm_type))
 

:pattern ((Prims.l_iff @x0
@x1))
:qid typing_Prims.l_iff))
:named typing_Prims.l_iff))
;;;;;;;;;;;;;;;;Equation for Prims.l_iff
;;; Fact-ids: Name Prims.l_iff; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Prims.l_iff @x0
@x1))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,31-98,53); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,31-98,53)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,31-98,40); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,31-98,40)
(implies 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,12-98,13); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,32-98,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,12-98,13); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,32-98,33)
@x0
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,21-98,22); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,38-98,39)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,21-98,22); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,38-98,39)
@x1
)
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,44-98,53); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,44-98,53)
(implies 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,21-98,22); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,45-98,46)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,21-98,22); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,45-98,46)
@x1
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,12-98,13); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,51-98,52)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,12-98,13); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(98,51-98,52)
@x0
)
)
)
)
 

:pattern ((Valid (Prims.l_iff @x0
@x1)))
:qid equation_Prims.l_iff))
:named equation_Prims.l_iff))
;;;;;;;;;;;;;;;;<==> interpretation
;;; Fact-ids: Name Prims.l_iff; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (iff (Valid @x0)
(Valid @x1))
(Valid (Prims.l_iff @x0
@x1)))
 

:pattern ((Prims.l_iff @x0
@x1))
:qid l_iff-interp))
:named l_iff-interp))

; </end encoding Prims.l_iff>

; <Start encoding Prims.l_not>
(declare-fun Prims.l_not (Term) Term)

(declare-fun Prims.l_not@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.l_not; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.l_not@tok
@x0)
(Prims.l_not @x0))
 

:pattern ((ApplyTT Prims.l_not@tok
@x0))

:pattern ((Prims.l_not @x0))
:qid token_correspondence_Prims.l_not))
:named token_correspondence_Prims.l_not))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_not; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.l_not@tok
Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
 

:pattern ((ApplyTT Prims.l_not@tok
@x0))

:pattern ((ApplyTT @x0
Prims.l_not@tok))
:qid function_token_typing_Prims.l_not))
:named function_token_typing_Prims.l_not))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_not; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.l_not @x0)
Tm_type))
 

:pattern ((Prims.l_not @x0))
:qid typing_Prims.l_not))
:named typing_Prims.l_not))
;;;;;;;;;;;;;;;;Equation for Prims.l_not
;;; Fact-ids: Name Prims.l_not; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (Prims.l_not @x0)
(Prims.l_imp @x0
Prims.l_False))
 

:pattern ((Prims.l_not @x0))
:qid equation_Prims.l_not))
:named equation_Prims.l_not))
;;;;;;;;;;;;;;;;not interpretation
;;; Fact-ids: Name Prims.l_not; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (not (Valid @x0))
(Valid (Prims.l_not @x0)))
 

:pattern ((Prims.l_not @x0))
:qid l_not-interp))
:named l_not-interp))

; </end encoding Prims.l_not>

; <Skipped Prims.l_ITE/>

; <Skipped Prims.precedes/>

; <Start encoding Prims.has_type>
(declare-fun Prims.has_type (Term Term Term) Term)
;;;;;;;;;;;;;;;;uu___9921:a -> uu___9922:Type -> Prims.Tot Type
(declare-fun Tm_arrow_7c761265d6fe943628c96343fc66d1a0 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_7c761265d6fe943628c96343fc66d1a0
;;; Fact-ids: Name Prims.has_type; Namespace Prims
(assert (! (HasType Tm_arrow_7c761265d6fe943628c96343fc66d1a0
Tm_type)
:named kinding_Tm_arrow_7c761265d6fe943628c96343fc66d1a0))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.has_type; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_7c761265d6fe943628c96343fc66d1a0)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_7c761265d6fe943628c96343fc66d1a0))
:qid Prims_pre_typing_Tm_arrow_7c761265d6fe943628c96343fc66d1a0))
:named Prims_pre_typing_Tm_arrow_7c761265d6fe943628c96343fc66d1a0))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_7c761265d6fe943628c96343fc66d1a0
;;; Fact-ids: Name Prims.has_type; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_7c761265d6fe943628c96343fc66d1a0)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
@x1)
(HasType @x3
Tm_type))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid Prims_interpretation_Tm_arrow_7c761265d6fe943628c96343fc66d1a0.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_7c761265d6fe943628c96343fc66d1a0))
:qid Prims_interpretation_Tm_arrow_7c761265d6fe943628c96343fc66d1a0))
:named Prims_interpretation_Tm_arrow_7c761265d6fe943628c96343fc66d1a0))
(declare-fun Prims.has_type@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.has_type; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.has_type@tok
@x0)
@x1)
@x2)
(Prims.has_type @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.has_type@tok
@x0)
@x1)
@x2))

:pattern ((Prims.has_type @x0
@x1
@x2))
:qid token_correspondence_Prims.has_type))
:named token_correspondence_Prims.has_type))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.has_type; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.has_type@tok
Tm_arrow_7c761265d6fe943628c96343fc66d1a0))
 

:pattern ((ApplyTT Prims.has_type@tok
@x0))

:pattern ((ApplyTT @x0
Prims.has_type@tok))
:qid function_token_typing_Prims.has_type))
:named function_token_typing_Prims.has_type))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.has_type; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
Tm_type))
(HasType (Prims.has_type @x0
@x1
@x2)
Tm_type))
 

:pattern ((Prims.has_type @x0
@x1
@x2))
:qid typing_Prims.has_type))
:named typing_Prims.has_type))

; </end encoding Prims.has_type>

; <Start encoding Prims.l_Forall>
;;;;;;;;;;;;;;;;uu___9928:a -> Prims.Tot Type
(declare-fun Tm_arrow_e06752ba152f81447b312efcdf8f0e23 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_e06752ba152f81447b312efcdf8f0e23
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0)
Tm_type))
:qid kinding_Tm_arrow_e06752ba152f81447b312efcdf8f0e23))
:named kinding_Tm_arrow_e06752ba152f81447b312efcdf8f0e23))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x2)))
:qid Prims_pre_typing_Tm_arrow_e06752ba152f81447b312efcdf8f0e23))
:named Prims_pre_typing_Tm_arrow_e06752ba152f81447b312efcdf8f0e23))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_e06752ba152f81447b312efcdf8f0e23
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(HasType (ApplyTT @x0
@x2)
Tm_type))
 

:pattern ((ApplyTT @x0
@x2))
:qid Prims_interpretation_Tm_arrow_e06752ba152f81447b312efcdf8f0e23.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1)))
:qid Prims_interpretation_Tm_arrow_e06752ba152f81447b312efcdf8f0e23))
:named Prims_interpretation_Tm_arrow_e06752ba152f81447b312efcdf8f0e23))
(declare-fun Prims.l_Forall (Term Term) Term)
;;;;;;;;;;;;;;;;p:(uu___9938:a -> Prims.Tot Type0) -> Prims.Tot Type0
(declare-fun Tm_arrow_b48c97353df3dfd9a4bd2b2064f9d9d3 () Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_b48c97353df3dfd9a4bd2b2064f9d9d3
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! (HasType Tm_arrow_b48c97353df3dfd9a4bd2b2064f9d9d3
Tm_type)
:named kinding_Tm_arrow_b48c97353df3dfd9a4bd2b2064f9d9d3))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_b48c97353df3dfd9a4bd2b2064f9d9d3)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_b48c97353df3dfd9a4bd2b2064f9d9d3))
:qid Prims_pre_typing_Tm_arrow_b48c97353df3dfd9a4bd2b2064f9d9d3))
:named Prims_pre_typing_Tm_arrow_b48c97353df3dfd9a4bd2b2064f9d9d3))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_b48c97353df3dfd9a4bd2b2064f9d9d3
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_b48c97353df3dfd9a4bd2b2064f9d9d3)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Prims_interpretation_Tm_arrow_b48c97353df3dfd9a4bd2b2064f9d9d3.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_b48c97353df3dfd9a4bd2b2064f9d9d3))
:qid Prims_interpretation_Tm_arrow_b48c97353df3dfd9a4bd2b2064f9d9d3))
:named Prims_interpretation_Tm_arrow_b48c97353df3dfd9a4bd2b2064f9d9d3))
(declare-fun Prims.l_Forall@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.l_Forall@tok
@x0)
@x1)
(Prims.l_Forall @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.l_Forall@tok
@x0)
@x1))

:pattern ((Prims.l_Forall @x0
@x1))
:qid token_correspondence_Prims.l_Forall))
:named token_correspondence_Prims.l_Forall))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.l_Forall@tok
Tm_arrow_b48c97353df3dfd9a4bd2b2064f9d9d3))
 

:pattern ((ApplyTT Prims.l_Forall@tok
@x0))

:pattern ((ApplyTT @x0
Prims.l_Forall@tok))
:qid function_token_typing_Prims.l_Forall))
:named function_token_typing_Prims.l_Forall))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0)))
(HasType (Prims.l_Forall @x0
@x1)
Tm_type))
 

:pattern ((Prims.l_Forall @x0
@x1))
:qid typing_Prims.l_Forall))
:named typing_Prims.l_Forall))

;;;;;;;;;;;;;;;;x:a -> Prims.GTot (p x)
(declare-fun Tm_arrow_a26b6f0ab7c6505137c6de4ce0011041 (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a26b6f0ab7c6505137c6de4ce0011041
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_a26b6f0ab7c6505137c6de4ce0011041 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_a26b6f0ab7c6505137c6de4ce0011041 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_a26b6f0ab7c6505137c6de4ce0011041))
:named kinding_Tm_arrow_a26b6f0ab7c6505137c6de4ce0011041))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_a26b6f0ab7c6505137c6de4ce0011041 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_a26b6f0ab7c6505137c6de4ce0011041 @x2
@x3)))
:qid Prims_pre_typing_Tm_arrow_a26b6f0ab7c6505137c6de4ce0011041))
:named Prims_pre_typing_Tm_arrow_a26b6f0ab7c6505137c6de4ce0011041))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a26b6f0ab7c6505137c6de4ce0011041
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_a26b6f0ab7c6505137c6de4ce0011041 @x1
@x2))
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(ApplyTT @x1
@x3)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_arrow_a26b6f0ab7c6505137c6de4ce0011041.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_a26b6f0ab7c6505137c6de4ce0011041 @x1
@x2)))
:qid Prims_interpretation_Tm_arrow_a26b6f0ab7c6505137c6de4ce0011041))
:named Prims_interpretation_Tm_arrow_a26b6f0ab7c6505137c6de4ce0011041))
;;;;;;;;;;;;;;;;Equation for Prims.l_Forall
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_Forall @x0
@x1)
(Prims.squash (Tm_arrow_a26b6f0ab7c6505137c6de4ce0011041 @x1
@x0)))
 

:pattern ((Prims.l_Forall @x0
@x1))
:qid equation_Prims.l_Forall))
:named equation_Prims.l_Forall))
;;;;;;;;;;;;;;;;forall interpretation
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (forall ((@x2 Term))
 (! (implies (HasTypeZ @x2
@x0)
(Valid (ApplyTT @x1
@x2)))
 

:pattern ((HasTypeZ @x2
@x0))
:qid forall-interp.1))
(Valid (Prims.l_Forall @x0
@x1)))
 

:pattern ((Prims.l_Forall @x0
@x1))
:qid forall-interp))
:named forall-interp))

; </end encoding Prims.l_Forall>

; <Start encoding Prims.prop>
(declare-fun Prims.prop () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named function_token_typing_Prims.prop))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named typing_Prims.prop))
(declare-fun Prims_Tm_refine_8c9ebed3095a60bf2b256a37e40b13f4 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims_Tm_refine_8c9ebed3095a60bf2b256a37e40b13f4
Tm_type)
:named refinement_kinding_Prims_Tm_refine_8c9ebed3095a60bf2b256a37e40b13f4))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (iff (exists ((@x0 Term))
 (! (and (HasType @x0
Tm_type)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(115,21-115,43); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(115,21-115,43)
(forall ((@x1 Term))
 (! (implies (HasType @x1
@x0)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(73,69-73,76); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(115,35-115,36)
(= @x1
Tm_unit)
)
 
;;no pats
:qid ref_valid_Prims_Tm_refine_8c9ebed3095a60bf2b256a37e40b13f4.1))
)
 
;;no pats
:qid ref_valid_Prims_Tm_refine_8c9ebed3095a60bf2b256a37e40b13f4))
(Valid Prims_Tm_refine_8c9ebed3095a60bf2b256a37e40b13f4))
:named ref_valid_Prims_Tm_refine_8c9ebed3095a60bf2b256a37e40b13f4))
;;;;;;;;;;;;;;;;(a:Type0{ forall (x:a). x === () })
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Prims_Tm_refine_8c9ebed3095a60bf2b256a37e40b13f4)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(115,21-115,43); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(115,21-115,43)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(73,69-73,76); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(115,35-115,36)
(= @x2
Tm_unit)
)
 
;;no pats
:qid refinement_interpretation_Prims_Tm_refine_8c9ebed3095a60bf2b256a37e40b13f4.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Prims_Tm_refine_8c9ebed3095a60bf2b256a37e40b13f4))
:qid refinement_interpretation_Prims_Tm_refine_8c9ebed3095a60bf2b256a37e40b13f4))
:named refinement_interpretation_Prims_Tm_refine_8c9ebed3095a60bf2b256a37e40b13f4))
;;;;;;;;;;;;;;;;haseq for Prims_Tm_refine_8c9ebed3095a60bf2b256a37e40b13f4
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Prims_Tm_refine_8c9ebed3095a60bf2b256a37e40b13f4))
(Valid (Prims.hasEq Tm_type)))
:named haseqPrims_Tm_refine_8c9ebed3095a60bf2b256a37e40b13f4))
;;;;;;;;;;;;;;;;Equation for Prims.prop
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (= Prims.prop
Prims_Tm_refine_8c9ebed3095a60bf2b256a37e40b13f4)
:named equation_Prims.prop))

; </end encoding Prims.prop>

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.dtuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.dtuple2@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.dtuple2@x1 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.dtuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Mkdtuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;_1:a -> _2:b _1 -> Prims.Tot (Prims.dtuple2 b)
(declare-fun Tm_arrow_e23d661799b310305387f8ba2c10acb1 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkdtuple2
(declare-fun Prims.Mkdtuple2@tok () Term)

; <Start encoding Prims.dtuple2>

; <start constructor Prims.dtuple2>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= 588
(Term_constr_id (Prims.dtuple2 @x0
@x1)))
 

:pattern ((Prims.dtuple2 @x0
@x1))
:qid constructor_distinct_Prims.dtuple2))
:named constructor_distinct_Prims.dtuple2))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.dtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
588)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.dtuple2 @x0
@x1))
 
;;no pats
:qid is-Prims.dtuple2))))

; </end constructor Prims.dtuple2>
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (= 589
(Term_constr_id Prims.dtuple2@tok))
:named fresh_token_Prims.dtuple2@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.dtuple2@tok
@x0)
@x1)
(Prims.dtuple2 @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.dtuple2@tok
@x0)
@x1))

:pattern ((Prims.dtuple2 @x0
@x1))
:qid token_correspondence_Prims.dtuple2@tok))
:named token_correspondence_Prims.dtuple2@tok))

;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.dtuple2@tok))
:named pre_kinding_Prims.dtuple2@tok))
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0)))
(HasType (Prims.dtuple2 @x0
@x1)
Tm_type))
 

:pattern ((Prims.dtuple2 @x0
@x1))
:qid kinding_Prims.dtuple2@tok))
:named kinding_Prims.dtuple2@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.dtuple2 @x2
@x3))
(= (Prims.dtuple2 @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.dtuple2 @x2
@x3)))
:qid Prims_pretyping_09d9235a8068627898e77b75945bdc5c))
:named Prims_pretyping_09d9235a8068627898e77b75945bdc5c))

; </end encoding Prims.dtuple2>

; <Start encoding Prims.Mkdtuple2>

; <start constructor Prims.Mkdtuple2>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 596
(Term_constr_id (Prims.Mkdtuple2 @x0
@x1
@x2
@x3)))
 

:pattern ((Prims.Mkdtuple2 @x0
@x1
@x2
@x3))
:qid constructor_distinct_Prims.Mkdtuple2))
:named constructor_distinct_Prims.Mkdtuple2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Mkdtuple2_a (Prims.Mkdtuple2 @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((Prims.Mkdtuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Mkdtuple2_a))
:named projection_inverse_Prims.Mkdtuple2_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Mkdtuple2_b (Prims.Mkdtuple2 @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((Prims.Mkdtuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Mkdtuple2_b))
:named projection_inverse_Prims.Mkdtuple2_b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Mkdtuple2__1 (Prims.Mkdtuple2 @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((Prims.Mkdtuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Mkdtuple2__1))
:named projection_inverse_Prims.Mkdtuple2__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Mkdtuple2__2 (Prims.Mkdtuple2 @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((Prims.Mkdtuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Mkdtuple2__2))
:named projection_inverse_Prims.Mkdtuple2__2))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Mkdtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
596)
(= __@x0
(Prims.Mkdtuple2 (Prims.Mkdtuple2_a __@x0)
(Prims.Mkdtuple2_b __@x0)
(Prims.Mkdtuple2__1 __@x0)
(Prims.Mkdtuple2__2 __@x0)))))

; </end constructor Prims.Mkdtuple2>


;;;;;;;;;;;;;;;;kinding_Tm_arrow_e23d661799b310305387f8ba2c10acb1
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (HasType Tm_arrow_e23d661799b310305387f8ba2c10acb1
Tm_type)
:named kinding_Tm_arrow_e23d661799b310305387f8ba2c10acb1))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_e23d661799b310305387f8ba2c10acb1)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_e23d661799b310305387f8ba2c10acb1))
:qid Prims_pre_typing_Tm_arrow_e23d661799b310305387f8ba2c10acb1))
:named Prims_pre_typing_Tm_arrow_e23d661799b310305387f8ba2c10acb1))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_e23d661799b310305387f8ba2c10acb1
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_e23d661799b310305387f8ba2c10acb1)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasType @x3
@x1)
(HasType @x4
(ApplyTT @x2
@x3)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
(Prims.dtuple2 @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid Prims_interpretation_Tm_arrow_e23d661799b310305387f8ba2c10acb1.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_e23d661799b310305387f8ba2c10acb1))
:qid Prims_interpretation_Tm_arrow_e23d661799b310305387f8ba2c10acb1))
:named Prims_interpretation_Tm_arrow_e23d661799b310305387f8ba2c10acb1))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (= 601
(Term_constr_id Prims.Mkdtuple2@tok))
:named fresh_token_Prims.Mkdtuple2@tok))

;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.Mkdtuple2@tok
Tm_arrow_e23d661799b310305387f8ba2c10acb1))
 

:pattern ((ApplyTT Prims.Mkdtuple2@tok
@x0))

:pattern ((ApplyTT @x0
Prims.Mkdtuple2@tok))
:qid typing_tok_Prims.Mkdtuple2@tok))
:named typing_tok_Prims.Mkdtuple2@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.Mkdtuple2@tok
@x0)
@x1)
@x2)
@x3)
(Prims.Mkdtuple2 @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.Mkdtuple2@tok
@x0)
@x1)
@x2)
@x3))
:qid equality_tok_Prims.Mkdtuple2@tok))
:named equality_tok_Prims.Mkdtuple2@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
(ApplyTT @x2
@x3)))
(HasTypeFuel @u0
(Prims.Mkdtuple2 @x1
@x2
@x3
@x4)
(Prims.dtuple2 @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(Prims.Mkdtuple2 @x1
@x2
@x3
@x4)
(Prims.dtuple2 @x1
@x2)))
:qid data_typing_intro_Prims.Mkdtuple2@tok))
:named data_typing_intro_Prims.Mkdtuple2@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Mkdtuple2 @x1
@x2
@x3
@x4)
(Prims.dtuple2 @x5
@x6))
(and (HasTypeFuel @u0
@x6
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasTypeFuel @u0
@x4
(ApplyTT @x6
@x3))
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x5))
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
(ApplyTT @x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Mkdtuple2 @x1
@x2
@x3
@x4)
(Prims.dtuple2 @x5
@x6)))
:qid data_elim_Prims.Mkdtuple2))
:named data_elim_Prims.Mkdtuple2))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Mkdtuple2 @x1
@x2
@x3
@x4)
(Prims.dtuple2 @x5
@x6))
(and (Valid (Precedes @x3
(Prims.Mkdtuple2 @x1
@x2
@x3
@x4)))
(Valid (Precedes @x4
(Prims.Mkdtuple2 @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Mkdtuple2 @x1
@x2
@x3
@x4)
(Prims.dtuple2 @x5
@x6)))
:qid subterm_ordering_Prims.Mkdtuple2))
:named subterm_ordering_Prims.Mkdtuple2))

; </end encoding Prims.Mkdtuple2>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Prims.dtuple2 @x2
@x3))
(and (is-Prims.Mkdtuple2 @x1)
(= @x2
(Prims.Mkdtuple2_a @x1))
(= @x3
(Prims.Mkdtuple2_b @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims.dtuple2 @x2
@x3)))
:qid fuel_guarded_inversion_Prims.dtuple2))
:named fuel_guarded_inversion_Prims.dtuple2))

; </end encoding >

; <Start encoding Prims.dtuple2_haseq>

;;;;;;;;;;;;;;;;Assumption: dtuple2_haseq
;;; Fact-ids: Name Prims.dtuple2_haseq; Namespace Prims
(assert (! 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(118,8-122,26); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(118,8-122,26)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(118,8-122,26); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(118,8-122,26)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
@x0)
(HasType @x3
(ApplyTT @x1
@x2)))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(118,8-122,26); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(118,8-122,26)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(118,8-122,26); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(118,8-122,26)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(118,8-122,26); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(118,8-122,26)
(Prims.hasEq @x0)
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(118,8-122,26); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(118,8-122,26)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(118,8-122,26); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(118,8-122,26)
(Prims.hasEq (ApplyTT @x1
@x2))
)
)
)
 
;;no pats
:qid assumption_Prims.dtuple2_haseq.1))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(118,8-122,26); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(118,8-122,26)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(118,8-122,26); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(118,8-122,26)
(Prims.hasEq (Prims.dtuple2 @x0
@x1))
)
)
 

:pattern ((Prims.hasEq (Prims.dtuple2 @x0
@x1)))
:qid assumption_Prims.dtuple2_haseq))

:named assumption_Prims.dtuple2_haseq))

; </end encoding Prims.dtuple2_haseq>

; <Start encoding Prims.uu___is_Mkdtuple2>

(declare-fun Prims.uu___is_Mkdtuple2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:Prims.dtuple2 b -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_21a7a3166e0683e2dfa5d2815e88da4a (Term) Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_21a7a3166e0683e2dfa5d2815e88da4a
;;; Fact-ids: Name Prims.uu___is_Mkdtuple2; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_21a7a3166e0683e2dfa5d2815e88da4a @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_21a7a3166e0683e2dfa5d2815e88da4a @x0)
Tm_type))
:qid kinding_Tm_arrow_21a7a3166e0683e2dfa5d2815e88da4a))
:named kinding_Tm_arrow_21a7a3166e0683e2dfa5d2815e88da4a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.uu___is_Mkdtuple2; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_21a7a3166e0683e2dfa5d2815e88da4a @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_21a7a3166e0683e2dfa5d2815e88da4a @x2)))
:qid Prims_pre_typing_Tm_arrow_21a7a3166e0683e2dfa5d2815e88da4a))
:named Prims_pre_typing_Tm_arrow_21a7a3166e0683e2dfa5d2815e88da4a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_21a7a3166e0683e2dfa5d2815e88da4a
;;; Fact-ids: Name Prims.uu___is_Mkdtuple2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_21a7a3166e0683e2dfa5d2815e88da4a @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x2))
(HasType @x4
(Prims.dtuple2 @x2
@x3)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4))
:qid Prims_interpretation_Tm_arrow_21a7a3166e0683e2dfa5d2815e88da4a.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_21a7a3166e0683e2dfa5d2815e88da4a @x1)))
:qid Prims_interpretation_Tm_arrow_21a7a3166e0683e2dfa5d2815e88da4a))
:named Prims_interpretation_Tm_arrow_21a7a3166e0683e2dfa5d2815e88da4a))
(declare-fun Prims.uu___is_Mkdtuple2@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.uu___is_Mkdtuple2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.uu___is_Mkdtuple2@tok
@x0)
@x1)
@x2)
(Prims.uu___is_Mkdtuple2 @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.uu___is_Mkdtuple2@tok
@x0)
@x1)
@x2))

:pattern ((Prims.uu___is_Mkdtuple2 @x0
@x1
@x2))
:qid token_correspondence_Prims.uu___is_Mkdtuple2))
:named token_correspondence_Prims.uu___is_Mkdtuple2))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.uu___is_Mkdtuple2; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.uu___is_Mkdtuple2@tok
(Tm_arrow_21a7a3166e0683e2dfa5d2815e88da4a Prims.bool)))
 

:pattern ((ApplyTT Prims.uu___is_Mkdtuple2@tok
@x0))

:pattern ((ApplyTT @x0
Prims.uu___is_Mkdtuple2@tok))
:qid function_token_typing_Prims.uu___is_Mkdtuple2))
:named function_token_typing_Prims.uu___is_Mkdtuple2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Mkdtuple2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
(HasType @x2
(Prims.dtuple2 @x0
@x1)))
(HasType (Prims.uu___is_Mkdtuple2 @x0
@x1
@x2)
Prims.bool))
 

:pattern ((Prims.uu___is_Mkdtuple2 @x0
@x1
@x2))
:qid typing_Prims.uu___is_Mkdtuple2))
:named typing_Prims.uu___is_Mkdtuple2))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_Mkdtuple2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.uu___is_Mkdtuple2 @x0
@x1
@x2)
(BoxBool (is-Prims.Mkdtuple2 @x2)))
 

:pattern ((Prims.uu___is_Mkdtuple2 @x0
@x1
@x2))
:qid disc_equation_Prims.Mkdtuple2))
:named disc_equation_Prims.Mkdtuple2))

; </end encoding Prims.uu___is_Mkdtuple2>

; <Start encoding Prims.__proj__Mkdtuple2__item___1>

(declare-fun Prims.__proj__Mkdtuple2__item___1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:Prims.dtuple2 b -> Prims.Tot a
(declare-fun Tm_arrow_ec4aa512bc54da67a0356075af124e44 () Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_ec4aa512bc54da67a0356075af124e44
;;; Fact-ids: Name Prims.__proj__Mkdtuple2__item___1; Namespace Prims
(assert (! (HasType Tm_arrow_ec4aa512bc54da67a0356075af124e44
Tm_type)
:named kinding_Tm_arrow_ec4aa512bc54da67a0356075af124e44))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.__proj__Mkdtuple2__item___1; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_ec4aa512bc54da67a0356075af124e44)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_ec4aa512bc54da67a0356075af124e44))
:qid Prims_pre_typing_Tm_arrow_ec4aa512bc54da67a0356075af124e44))
:named Prims_pre_typing_Tm_arrow_ec4aa512bc54da67a0356075af124e44))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_ec4aa512bc54da67a0356075af124e44
;;; Fact-ids: Name Prims.__proj__Mkdtuple2__item___1; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_ec4aa512bc54da67a0356075af124e44)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasType @x3
(Prims.dtuple2 @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid Prims_interpretation_Tm_arrow_ec4aa512bc54da67a0356075af124e44.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_ec4aa512bc54da67a0356075af124e44))
:qid Prims_interpretation_Tm_arrow_ec4aa512bc54da67a0356075af124e44))
:named Prims_interpretation_Tm_arrow_ec4aa512bc54da67a0356075af124e44))
(declare-fun Prims.__proj__Mkdtuple2__item___1@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.__proj__Mkdtuple2__item___1; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.__proj__Mkdtuple2__item___1@tok
@x0)
@x1)
@x2)
(Prims.__proj__Mkdtuple2__item___1 @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.__proj__Mkdtuple2__item___1@tok
@x0)
@x1)
@x2))

:pattern ((Prims.__proj__Mkdtuple2__item___1 @x0
@x1
@x2))
:qid token_correspondence_Prims.__proj__Mkdtuple2__item___1))
:named token_correspondence_Prims.__proj__Mkdtuple2__item___1))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__proj__Mkdtuple2__item___1; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.__proj__Mkdtuple2__item___1@tok
Tm_arrow_ec4aa512bc54da67a0356075af124e44))
 

:pattern ((ApplyTT Prims.__proj__Mkdtuple2__item___1@tok
@x0))

:pattern ((ApplyTT @x0
Prims.__proj__Mkdtuple2__item___1@tok))
:qid function_token_typing_Prims.__proj__Mkdtuple2__item___1))
:named function_token_typing_Prims.__proj__Mkdtuple2__item___1))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.__proj__Mkdtuple2__item___1; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
(HasType @x2
(Prims.dtuple2 @x0
@x1)))
(HasType (Prims.__proj__Mkdtuple2__item___1 @x0
@x1
@x2)
@x0))
 

:pattern ((Prims.__proj__Mkdtuple2__item___1 @x0
@x1
@x2))
:qid typing_Prims.__proj__Mkdtuple2__item___1))
:named typing_Prims.__proj__Mkdtuple2__item___1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Prims.__proj__Mkdtuple2__item___1; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.__proj__Mkdtuple2__item___1 @x0
@x1
@x2)
(Prims.Mkdtuple2__1 @x2))
 

:pattern ((Prims.__proj__Mkdtuple2__item___1 @x0
@x1
@x2))
:qid proj_equation_Prims.Mkdtuple2__1))
:named proj_equation_Prims.Mkdtuple2__1))

; </end encoding Prims.__proj__Mkdtuple2__item___1>

; <Start encoding Prims.__proj__Mkdtuple2__item___2>

(declare-fun Prims.__proj__Mkdtuple2__item___2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:Prims.dtuple2 b -> Prims.Tot (b (Mkdtuple2?._1 projectee))
(declare-fun Tm_arrow_2e5fda2477c3f2ade2b68a9685bf6393 () Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_2e5fda2477c3f2ade2b68a9685bf6393
;;; Fact-ids: Name Prims.__proj__Mkdtuple2__item___2; Namespace Prims
(assert (! (HasType Tm_arrow_2e5fda2477c3f2ade2b68a9685bf6393
Tm_type)
:named kinding_Tm_arrow_2e5fda2477c3f2ade2b68a9685bf6393))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.__proj__Mkdtuple2__item___2; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_2e5fda2477c3f2ade2b68a9685bf6393)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_2e5fda2477c3f2ade2b68a9685bf6393))
:qid Prims_pre_typing_Tm_arrow_2e5fda2477c3f2ade2b68a9685bf6393))
:named Prims_pre_typing_Tm_arrow_2e5fda2477c3f2ade2b68a9685bf6393))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_2e5fda2477c3f2ade2b68a9685bf6393
;;; Fact-ids: Name Prims.__proj__Mkdtuple2__item___2; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_2e5fda2477c3f2ade2b68a9685bf6393)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasType @x3
(Prims.dtuple2 @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
(ApplyTT @x2
(Prims.__proj__Mkdtuple2__item___1 @x1
@x2
@x3))))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid Prims_interpretation_Tm_arrow_2e5fda2477c3f2ade2b68a9685bf6393.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_2e5fda2477c3f2ade2b68a9685bf6393))
:qid Prims_interpretation_Tm_arrow_2e5fda2477c3f2ade2b68a9685bf6393))
:named Prims_interpretation_Tm_arrow_2e5fda2477c3f2ade2b68a9685bf6393))
(declare-fun Prims.__proj__Mkdtuple2__item___2@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.__proj__Mkdtuple2__item___2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.__proj__Mkdtuple2__item___2@tok
@x0)
@x1)
@x2)
(Prims.__proj__Mkdtuple2__item___2 @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.__proj__Mkdtuple2__item___2@tok
@x0)
@x1)
@x2))

:pattern ((Prims.__proj__Mkdtuple2__item___2 @x0
@x1
@x2))
:qid token_correspondence_Prims.__proj__Mkdtuple2__item___2))
:named token_correspondence_Prims.__proj__Mkdtuple2__item___2))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__proj__Mkdtuple2__item___2; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.__proj__Mkdtuple2__item___2@tok
Tm_arrow_2e5fda2477c3f2ade2b68a9685bf6393))
 

:pattern ((ApplyTT Prims.__proj__Mkdtuple2__item___2@tok
@x0))

:pattern ((ApplyTT @x0
Prims.__proj__Mkdtuple2__item___2@tok))
:qid function_token_typing_Prims.__proj__Mkdtuple2__item___2))
:named function_token_typing_Prims.__proj__Mkdtuple2__item___2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.__proj__Mkdtuple2__item___2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
(HasType @x2
(Prims.dtuple2 @x0
@x1)))
(HasType (Prims.__proj__Mkdtuple2__item___2 @x0
@x1
@x2)
(ApplyTT @x1
(Prims.__proj__Mkdtuple2__item___1 @x0
@x1
@x2))))
 

:pattern ((Prims.__proj__Mkdtuple2__item___2 @x0
@x1
@x2))
:qid typing_Prims.__proj__Mkdtuple2__item___2))
:named typing_Prims.__proj__Mkdtuple2__item___2))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Prims.__proj__Mkdtuple2__item___2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.__proj__Mkdtuple2__item___2 @x0
@x1
@x2)
(Prims.Mkdtuple2__2 @x2))
 

:pattern ((Prims.__proj__Mkdtuple2__item___2 @x0
@x1
@x2))
:qid proj_equation_Prims.Mkdtuple2__2))
:named proj_equation_Prims.Mkdtuple2__2))

; </end encoding Prims.__proj__Mkdtuple2__item___2>

; <Start encoding Prims.l_Exists>

(declare-fun Prims.l_Exists (Term Term) Term)


(declare-fun Prims.l_Exists@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.l_Exists; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.l_Exists@tok
@x0)
@x1)
(Prims.l_Exists @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.l_Exists@tok
@x0)
@x1))

:pattern ((Prims.l_Exists @x0
@x1))
:qid token_correspondence_Prims.l_Exists))
:named token_correspondence_Prims.l_Exists))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_Exists; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.l_Exists@tok
Tm_arrow_b48c97353df3dfd9a4bd2b2064f9d9d3))
 

:pattern ((ApplyTT Prims.l_Exists@tok
@x0))

:pattern ((ApplyTT @x0
Prims.l_Exists@tok))
:qid function_token_typing_Prims.l_Exists))
:named function_token_typing_Prims.l_Exists))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_Exists; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0)))
(HasType (Prims.l_Exists @x0
@x1)
Tm_type))
 

:pattern ((Prims.l_Exists @x0
@x1))
:qid typing_Prims.l_Exists))
:named typing_Prims.l_Exists))

;;;;;;;;;;;;;;;;Equation for Prims.l_Exists
;;; Fact-ids: Name Prims.l_Exists; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_Exists @x0
@x1)
(Prims.squash (Prims.dtuple2 @x0
@x1)))
 

:pattern ((Prims.l_Exists @x0
@x1))
:qid equation_Prims.l_Exists))
:named equation_Prims.l_Exists))
;;;;;;;;;;;;;;;;exists interpretation
;;; Fact-ids: Name Prims.l_Exists; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (exists ((@x2 Term))
 (! (implies (HasTypeZ @x2
@x0)
(Valid (ApplyTT @x1
@x2)))
 

:pattern ((HasTypeZ @x2
@x0))
:qid exists-interp.1))
(Valid (Prims.l_Exists @x0
@x1)))
 

:pattern ((Prims.l_Exists @x0
@x1))
:qid exists-interp))
:named exists-interp))

; </end encoding Prims.l_Exists>

; <Start encoding Prims.range>
(declare-fun Prims.range () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.range; Namespace Prims
(assert (! (HasType Prims.range
Tm_type)
:named function_token_typing_Prims.range))
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.range; Namespace Prims
(assert (! (= 620
(Term_constr_id Prims.range))
:named constructor_distinct_Prims.range))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.range; Namespace Prims
(assert (! (forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.range)
(= Prims.range
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.range))
:qid Prims_pretyping_cd1dd43c7849cf822e800878c71021f1))
:named Prims_pretyping_cd1dd43c7849cf822e800878c71021f1))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.range; Namespace Prims
(assert (! (HasType Prims.range
Tm_type)
:named typing_Prims.range))
;;;;;;;;;;;;;;;;Range_const typing
;;; Fact-ids: Name Prims.range; Namespace Prims
(assert (! (HasTypeZ Range_const
Prims.range)
:named typing_range_const))

; </end encoding Prims.range>

; <Start encoding Prims.string>
(declare-fun Prims.string () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.string; Namespace Prims
(assert (! (HasType Prims.string
Tm_type)
:named function_token_typing_Prims.string))
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.string; Namespace Prims
(assert (! (= 623
(Term_constr_id Prims.string))
:named constructor_distinct_Prims.string))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.string; Namespace Prims
(assert (! (forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.string)
(= Prims.string
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.string))
:qid Prims_pretyping_ce036b6b736ef4e0bc3a9ff132a12aed))
:named Prims_pretyping_ce036b6b736ef4e0bc3a9ff132a12aed))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.string; Namespace Prims
(assert (! (HasType Prims.string
Tm_type)
:named typing_Prims.string))
;;;;;;;;;;;;;;;;string typing
;;; Fact-ids: Name Prims.string; Namespace Prims
(assert (! (forall ((@u0 FString))
 (! (HasType (BoxString @u0)
Prims.string)
 

:pattern ((BoxString @u0))
:qid string_typing))
:named string_typing))
;;;;;;;;;;;;;;;;string inversion
;;; Fact-ids: Name Prims.string; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.string)
(is-BoxString @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.string))
:qid string_inversion))
:named string_inversion))

; </end encoding Prims.string>

; <Start encoding Prims.HasEq_string>
;;;;;;;;;;;;;;;;Assumption: HasEq_string
;;; Fact-ids: Name Prims.HasEq_string; Namespace Prims
(assert (! 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(136,21-136,33); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(136,21-136,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(136,21-136,33); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(136,21-136,33)
(Prims.hasEq Prims.string)
)

:named assumption_Prims.HasEq_string))

; </end encoding Prims.HasEq_string>

; <Start encoding Prims.labeled>
(declare-fun Prims.labeled (Term Term Term) Term)
;;;;;;;;;;;;;;;;r:Prims.range -> msg:Prims.string -> b:Type -> Prims.Tot Type
(declare-fun Tm_arrow_57c992be3fa76720bf1a10ffa047db3d (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_57c992be3fa76720bf1a10ffa047db3d
;;; Fact-ids: Name Prims.labeled; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_57c992be3fa76720bf1a10ffa047db3d @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_57c992be3fa76720bf1a10ffa047db3d @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_57c992be3fa76720bf1a10ffa047db3d))
:named kinding_Tm_arrow_57c992be3fa76720bf1a10ffa047db3d))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.labeled; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_57c992be3fa76720bf1a10ffa047db3d @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_57c992be3fa76720bf1a10ffa047db3d @x2
@x3)))
:qid Prims_pre_typing_Tm_arrow_57c992be3fa76720bf1a10ffa047db3d))
:named Prims_pre_typing_Tm_arrow_57c992be3fa76720bf1a10ffa047db3d))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_57c992be3fa76720bf1a10ffa047db3d
;;; Fact-ids: Name Prims.labeled; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_57c992be3fa76720bf1a10ffa047db3d @x1
@x2))
(forall ((@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x3
@x2)
(HasType @x4
@x1)
(HasType @x5
Tm_type))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x3)
@x4)
@x5)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x3)
@x4)
@x5))
:qid Prims_interpretation_Tm_arrow_57c992be3fa76720bf1a10ffa047db3d.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_57c992be3fa76720bf1a10ffa047db3d @x1
@x2)))
:qid Prims_interpretation_Tm_arrow_57c992be3fa76720bf1a10ffa047db3d))
:named Prims_interpretation_Tm_arrow_57c992be3fa76720bf1a10ffa047db3d))
(declare-fun Prims.labeled@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.labeled; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.labeled@tok
@x0)
@x1)
@x2)
(Prims.labeled @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.labeled@tok
@x0)
@x1)
@x2))

:pattern ((Prims.labeled @x0
@x1
@x2))
:qid token_correspondence_Prims.labeled))
:named token_correspondence_Prims.labeled))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.labeled; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.labeled@tok
(Tm_arrow_57c992be3fa76720bf1a10ffa047db3d Prims.string
Prims.range)))
 

:pattern ((ApplyTT Prims.labeled@tok
@x0))

:pattern ((ApplyTT @x0
Prims.labeled@tok))
:qid function_token_typing_Prims.labeled))
:named function_token_typing_Prims.labeled))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.labeled; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.range)
(HasType @x1
Prims.string)
(HasType @x2
Tm_type))
(HasType (Prims.labeled @x0
@x1
@x2)
Tm_type))
 

:pattern ((Prims.labeled @x0
@x1
@x2))
:qid typing_Prims.labeled))
:named typing_Prims.labeled))

; </end encoding Prims.labeled>

; <Start encoding Prims.pure_pre>
(declare-fun Prims.pure_pre () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.pure_pre; Namespace Prims
(assert (! (HasType Prims.pure_pre
Tm_type)
:named function_token_typing_Prims.pure_pre))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_pre; Namespace Prims
(assert (! (HasType Prims.pure_pre
Tm_type)
:named typing_Prims.pure_pre))
;;;;;;;;;;;;;;;;Equation for Prims.pure_pre
;;; Fact-ids: Name Prims.pure_pre; Namespace Prims
(assert (! (= Prims.pure_pre
Tm_type)
:named equation_Prims.pure_pre))

; </end encoding Prims.pure_pre>

; <Start encoding Prims.pure_post>
(declare-fun Prims.pure_post (Term) Term)

(declare-fun Prims.pure_post@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.pure_post@tok
@x0)
(Prims.pure_post @x0))
 

:pattern ((ApplyTT Prims.pure_post@tok
@x0))

:pattern ((Prims.pure_post @x0))
:qid token_correspondence_Prims.pure_post))
:named token_correspondence_Prims.pure_post))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.pure_post@tok
Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
 

:pattern ((ApplyTT Prims.pure_post@tok
@x0))

:pattern ((ApplyTT @x0
Prims.pure_post@tok))
:qid function_token_typing_Prims.pure_post))
:named function_token_typing_Prims.pure_post))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.pure_post @x0)
Tm_type))
 

:pattern ((Prims.pure_post @x0))
:qid typing_Prims.pure_post))
:named typing_Prims.pure_post))

;;;;;;;;;;;;;;;;Equation for Prims.pure_post
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (Prims.pure_post @x0)
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
 

:pattern ((Prims.pure_post @x0))
:qid equation_Prims.pure_post))
:named equation_Prims.pure_post))

; </end encoding Prims.pure_post>

; <Start encoding Prims.pure_wp>
(declare-fun Prims.pure_wp (Term) Term)

(declare-fun Prims.pure_wp@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.pure_wp; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.pure_wp@tok
@x0)
(Prims.pure_wp @x0))
 

:pattern ((ApplyTT Prims.pure_wp@tok
@x0))

:pattern ((Prims.pure_wp @x0))
:qid token_correspondence_Prims.pure_wp))
:named token_correspondence_Prims.pure_wp))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.pure_wp; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.pure_wp@tok
Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
 

:pattern ((ApplyTT Prims.pure_wp@tok
@x0))

:pattern ((ApplyTT @x0
Prims.pure_wp@tok))
:qid function_token_typing_Prims.pure_wp))
:named function_token_typing_Prims.pure_wp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_wp; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.pure_wp @x0)
Tm_type))
 

:pattern ((Prims.pure_wp @x0))
:qid typing_Prims.pure_wp))
:named typing_Prims.pure_wp))
;;;;;;;;;;;;;;;;uu___10141:Prims.pure_post a -> Prims.GTot Prims.pure_pre
(declare-fun Tm_arrow_efa04d9e9741fb25eada2b1d426efe29 (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_efa04d9e9741fb25eada2b1d426efe29
;;; Fact-ids: Name Prims.pure_wp; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_efa04d9e9741fb25eada2b1d426efe29 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_efa04d9e9741fb25eada2b1d426efe29 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_efa04d9e9741fb25eada2b1d426efe29))
:named kinding_Tm_arrow_efa04d9e9741fb25eada2b1d426efe29))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.pure_wp; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_efa04d9e9741fb25eada2b1d426efe29 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_efa04d9e9741fb25eada2b1d426efe29 @x2
@x3)))
:qid Prims_pre_typing_Tm_arrow_efa04d9e9741fb25eada2b1d426efe29))
:named Prims_pre_typing_Tm_arrow_efa04d9e9741fb25eada2b1d426efe29))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_efa04d9e9741fb25eada2b1d426efe29
;;; Fact-ids: Name Prims.pure_wp; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_efa04d9e9741fb25eada2b1d426efe29 @x1
@x2))
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Prims.pure_post @x2))
(HasType (ApplyTT @x0
@x3)
@x1))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_arrow_efa04d9e9741fb25eada2b1d426efe29.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_efa04d9e9741fb25eada2b1d426efe29 @x1
@x2)))
:qid Prims_interpretation_Tm_arrow_efa04d9e9741fb25eada2b1d426efe29))
:named Prims_interpretation_Tm_arrow_efa04d9e9741fb25eada2b1d426efe29))
;;;;;;;;;;;;;;;;Equation for Prims.pure_wp
;;; Fact-ids: Name Prims.pure_wp; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (Prims.pure_wp @x0)
(Tm_arrow_efa04d9e9741fb25eada2b1d426efe29 Prims.pure_pre
@x0))
 

:pattern ((Prims.pure_wp @x0))
:qid equation_Prims.pure_wp))
:named equation_Prims.pure_wp))

; </end encoding Prims.pure_wp>

; <Start encoding Prims.guard_free>
(declare-fun Prims.guard_free (Term) Term)

(declare-fun Prims.guard_free@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.guard_free; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.guard_free@tok
@x0)
(Prims.guard_free @x0))
 

:pattern ((ApplyTT Prims.guard_free@tok
@x0))

:pattern ((Prims.guard_free @x0))
:qid token_correspondence_Prims.guard_free))
:named token_correspondence_Prims.guard_free))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.guard_free; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.guard_free@tok
Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
 

:pattern ((ApplyTT Prims.guard_free@tok
@x0))

:pattern ((ApplyTT @x0
Prims.guard_free@tok))
:qid function_token_typing_Prims.guard_free))
:named function_token_typing_Prims.guard_free))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.guard_free; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.guard_free @x0)
Tm_type))
 

:pattern ((Prims.guard_free @x0))
:qid typing_Prims.guard_free))
:named typing_Prims.guard_free))

; </end encoding Prims.guard_free>

; <Skipped Prims.pure_return/>

; <Skipped Prims.pure_bind_wp/>

; <Skipped Prims.pure_if_then_else/>

; <Skipped Prims.pure_ite_wp/>

; <Skipped Prims.pure_stronger/>

; <Skipped Prims.pure_close_wp/>

; <Skipped Prims.pure_assert_p/>

; <Skipped Prims.pure_assume_p/>

; <Skipped Prims.pure_null_wp/>

; <Skipped Prims.pure_trivial/>

; <Skipped Prims.PURE/>

; <Skipped Prims.Pure/>

; <Skipped Prims.Admit/>

; <Skipped Prims.Tot/>

; <Skipped Prims.GHOST/>

; <Skipped Prims.purewp_id/>

; <Skipped />

; <Skipped Prims.GTot/>

; <Skipped Prims.Ghost/>

; <Start encoding Prims.int>
(declare-fun Prims.int () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Tm_type)
:named function_token_typing_Prims.int))
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (= 635
(Term_constr_id Prims.int))
:named constructor_distinct_Prims.int))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.int)
(= Prims.int
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.int))
:qid Prims_pretyping_ae567c2fb75be05905677af440075565))
:named Prims_pretyping_ae567c2fb75be05905677af440075565))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Tm_type)
:named typing_Prims.int))
;;;;;;;;;;;;;;;;int typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Int))
 (! (HasType (BoxInt @u0)
Prims.int)
 

:pattern ((BoxInt @u0))
:qid int_typing))
:named int_typing))
;;;;;;;;;;;;;;;;int inversion
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(is-BoxInt @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int))
:qid int_inversion))
:named int_inversion))
;;;;;;;;;;;;;;;;well-founded ordering on nat (alt)
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
@x2
Prims.int)
(> (BoxInt_proj_0 @x1)
0)
(>= (BoxInt_proj_0 @x2)
0)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1)))
(Valid (Precedes @x2
@x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int) (HasTypeFuel @u0
@x2
Prims.int) (Valid (Precedes @x2
@x1)))
:qid well-founded-ordering-on-nat))
:named well-founded-ordering-on-nat))

; </end encoding Prims.int>

; <Start encoding Prims.HasEq_int>
;;;;;;;;;;;;;;;;Assumption: HasEq_int
;;; Fact-ids: Name Prims.HasEq_int; Namespace Prims
(assert (! 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(210,18-210,27); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(210,18-210,27)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(210,18-210,27); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(210,18-210,27)
(Prims.hasEq Prims.int)
)

:named assumption_Prims.HasEq_int))

; </end encoding Prims.HasEq_int>

; <Start encoding Prims.range_0>
(declare-fun Prims.range_0 () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.range_0; Namespace Prims
(assert (! (HasType Prims.range_0
Prims.range)
:named function_token_typing_Prims.range_0))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.range_0; Namespace Prims
(assert (! (HasType Prims.range_0
Prims.range)
:named typing_Prims.range_0))

; </end encoding Prims.range_0>

; <Start encoding Prims.range_of>
(declare-fun Prims.range_of (Term Term) Term)
;;;;;;;;;;;;;;;;x:a -> Prims.Tot Prims.range
(declare-fun Tm_arrow_756e7b0ac20279dfcded24e5a99a27b8 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_756e7b0ac20279dfcded24e5a99a27b8
;;; Fact-ids: Name Prims.range_of; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_756e7b0ac20279dfcded24e5a99a27b8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_756e7b0ac20279dfcded24e5a99a27b8 @x0)
Tm_type))
:qid kinding_Tm_arrow_756e7b0ac20279dfcded24e5a99a27b8))
:named kinding_Tm_arrow_756e7b0ac20279dfcded24e5a99a27b8))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.range_of; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_756e7b0ac20279dfcded24e5a99a27b8 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_756e7b0ac20279dfcded24e5a99a27b8 @x2)))
:qid Prims_pre_typing_Tm_arrow_756e7b0ac20279dfcded24e5a99a27b8))
:named Prims_pre_typing_Tm_arrow_756e7b0ac20279dfcded24e5a99a27b8))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_756e7b0ac20279dfcded24e5a99a27b8
;;; Fact-ids: Name Prims.range_of; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_756e7b0ac20279dfcded24e5a99a27b8 @x1))
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
@x2))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x1))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid Prims_interpretation_Tm_arrow_756e7b0ac20279dfcded24e5a99a27b8.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_756e7b0ac20279dfcded24e5a99a27b8 @x1)))
:qid Prims_interpretation_Tm_arrow_756e7b0ac20279dfcded24e5a99a27b8))
:named Prims_interpretation_Tm_arrow_756e7b0ac20279dfcded24e5a99a27b8))
(declare-fun Prims.range_of@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.range_of; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.range_of@tok
@x0)
@x1)
(Prims.range_of @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.range_of@tok
@x0)
@x1))

:pattern ((Prims.range_of @x0
@x1))
:qid token_correspondence_Prims.range_of))
:named token_correspondence_Prims.range_of))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.range_of; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.range_of@tok
(Tm_arrow_756e7b0ac20279dfcded24e5a99a27b8 Prims.range)))
 

:pattern ((ApplyTT Prims.range_of@tok
@x0))

:pattern ((ApplyTT @x0
Prims.range_of@tok))
:qid function_token_typing_Prims.range_of))
:named function_token_typing_Prims.range_of))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.range_of; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0))
(HasType (Prims.range_of @x0
@x1)
Prims.range))
 

:pattern ((Prims.range_of @x0
@x1))
:qid typing_Prims.range_of))
:named typing_Prims.range_of))

; </end encoding Prims.range_of>

; <Start encoding Prims.mk_range>
(declare-fun Prims.mk_range (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;file:Prims.string ->...
(declare-fun Tm_arrow_1a6b9de3491ece0b8961a8acbb38411b (Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_1a6b9de3491ece0b8961a8acbb38411b
;;; Fact-ids: Name Prims.mk_range; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_1a6b9de3491ece0b8961a8acbb38411b @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_1a6b9de3491ece0b8961a8acbb38411b @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_1a6b9de3491ece0b8961a8acbb38411b))
:named kinding_Tm_arrow_1a6b9de3491ece0b8961a8acbb38411b))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.mk_range; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_1a6b9de3491ece0b8961a8acbb38411b @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_1a6b9de3491ece0b8961a8acbb38411b @x2
@x3
@x4)))
:qid Prims_pre_typing_Tm_arrow_1a6b9de3491ece0b8961a8acbb38411b))
:named Prims_pre_typing_Tm_arrow_1a6b9de3491ece0b8961a8acbb38411b))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_1a6b9de3491ece0b8961a8acbb38411b
;;; Fact-ids: Name Prims.mk_range; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_1a6b9de3491ece0b8961a8acbb38411b @x1
@x2
@x3))
(forall ((@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x4
@x3)
(HasType @x5
@x2)
(HasType @x6
@x2)
(HasType @x7
@x2)
(HasType @x8
@x2))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x4)
@x5)
@x6)
@x7)
@x8)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x4)
@x5)
@x6)
@x7)
@x8))
:qid Prims_interpretation_Tm_arrow_1a6b9de3491ece0b8961a8acbb38411b.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_1a6b9de3491ece0b8961a8acbb38411b @x1
@x2
@x3)))
:qid Prims_interpretation_Tm_arrow_1a6b9de3491ece0b8961a8acbb38411b))
:named Prims_interpretation_Tm_arrow_1a6b9de3491ece0b8961a8acbb38411b))
(declare-fun Prims.mk_range@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.mk_range; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.mk_range@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(Prims.mk_range @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.mk_range@tok
@x0)
@x1)
@x2)
@x3)
@x4))

:pattern ((Prims.mk_range @x0
@x1
@x2
@x3
@x4))
:qid token_correspondence_Prims.mk_range))
:named token_correspondence_Prims.mk_range))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.mk_range; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.mk_range@tok
(Tm_arrow_1a6b9de3491ece0b8961a8acbb38411b Prims.range
Prims.int
Prims.string)))
 

:pattern ((ApplyTT Prims.mk_range@tok
@x0))

:pattern ((ApplyTT @x0
Prims.mk_range@tok))
:qid function_token_typing_Prims.mk_range))
:named function_token_typing_Prims.mk_range))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.mk_range; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.string)
(HasType @x1
Prims.int)
(HasType @x2
Prims.int)
(HasType @x3
Prims.int)
(HasType @x4
Prims.int))
(HasType (Prims.mk_range @x0
@x1
@x2
@x3
@x4)
Prims.range))
 

:pattern ((Prims.mk_range @x0
@x1
@x2
@x3
@x4))
:qid typing_Prims.mk_range))
:named typing_Prims.mk_range))

; </end encoding Prims.mk_range>

; <Start encoding Prims.set_range_of>
(declare-fun Prims.set_range_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;x:a -> r:Prims.range -> Prims.Tot a
(declare-fun Tm_arrow_382097d4a8c91c3cf3e87bd59f190574 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_382097d4a8c91c3cf3e87bd59f190574
;;; Fact-ids: Name Prims.set_range_of; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_382097d4a8c91c3cf3e87bd59f190574 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_382097d4a8c91c3cf3e87bd59f190574 @x0)
Tm_type))
:qid kinding_Tm_arrow_382097d4a8c91c3cf3e87bd59f190574))
:named kinding_Tm_arrow_382097d4a8c91c3cf3e87bd59f190574))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.set_range_of; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_382097d4a8c91c3cf3e87bd59f190574 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_382097d4a8c91c3cf3e87bd59f190574 @x2)))
:qid Prims_pre_typing_Tm_arrow_382097d4a8c91c3cf3e87bd59f190574))
:named Prims_pre_typing_Tm_arrow_382097d4a8c91c3cf3e87bd59f190574))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_382097d4a8c91c3cf3e87bd59f190574
;;; Fact-ids: Name Prims.set_range_of; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_382097d4a8c91c3cf3e87bd59f190574 @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
@x2)
(HasType @x4
@x1))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4))
:qid Prims_interpretation_Tm_arrow_382097d4a8c91c3cf3e87bd59f190574.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_382097d4a8c91c3cf3e87bd59f190574 @x1)))
:qid Prims_interpretation_Tm_arrow_382097d4a8c91c3cf3e87bd59f190574))
:named Prims_interpretation_Tm_arrow_382097d4a8c91c3cf3e87bd59f190574))
(declare-fun Prims.set_range_of@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.set_range_of; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.set_range_of@tok
@x0)
@x1)
@x2)
(Prims.set_range_of @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.set_range_of@tok
@x0)
@x1)
@x2))

:pattern ((Prims.set_range_of @x0
@x1
@x2))
:qid token_correspondence_Prims.set_range_of))
:named token_correspondence_Prims.set_range_of))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.set_range_of; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.set_range_of@tok
(Tm_arrow_382097d4a8c91c3cf3e87bd59f190574 Prims.range)))
 

:pattern ((ApplyTT Prims.set_range_of@tok
@x0))

:pattern ((ApplyTT @x0
Prims.set_range_of@tok))
:qid function_token_typing_Prims.set_range_of))
:named function_token_typing_Prims.set_range_of))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.set_range_of; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
Prims.range))
(HasType (Prims.set_range_of @x0
@x1
@x2)
@x0))
 

:pattern ((Prims.set_range_of @x0
@x1
@x2))
:qid typing_Prims.set_range_of))
:named typing_Prims.set_range_of))
;;;;;;;;;;;;;;;;Equation for Prims.set_range_of
;;; Fact-ids: Name Prims.set_range_of; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.set_range_of @x0
@x1
@x2)
@x1)
 

:pattern ((Prims.set_range_of @x0
@x1
@x2))
:qid equation_Prims.set_range_of))
:named equation_Prims.set_range_of))

; </end encoding Prims.set_range_of>

; <Start encoding Prims.op_AmpAmp>
(declare-fun Prims.op_AmpAmp (Term Term) Term)
(declare-fun Prims.op_AmpAmp@tok () Term)
;;; Fact-ids: Name Prims.op_AmpAmp; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_AmpAmp @x0
@x1)
(BoxBool (and (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_AmpAmp @x0
@x1))
:qid primitive_Prims.op_AmpAmp))
:named primitive_Prims.op_AmpAmp))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.op_AmpAmp; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.op_AmpAmp@tok
@x0)
@x1)
(Prims.op_AmpAmp @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.op_AmpAmp@tok
@x0)
@x1))
:qid token_correspondence_Prims.op_AmpAmp))
:named token_correspondence_Prims.op_AmpAmp))

; </end encoding Prims.op_AmpAmp>

; <Start encoding Prims.op_BarBar>
(declare-fun Prims.op_BarBar (Term Term) Term)
(declare-fun Prims.op_BarBar@tok () Term)
;;; Fact-ids: Name Prims.op_BarBar; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_BarBar @x0
@x1)
(BoxBool (or (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_BarBar @x0
@x1))
:qid primitive_Prims.op_BarBar))
:named primitive_Prims.op_BarBar))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.op_BarBar; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.op_BarBar@tok
@x0)
@x1)
(Prims.op_BarBar @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.op_BarBar@tok
@x0)
@x1))
:qid token_correspondence_Prims.op_BarBar))
:named token_correspondence_Prims.op_BarBar))

; </end encoding Prims.op_BarBar>

; <Start encoding Prims.op_Negation>
(declare-fun Prims.op_Negation (Term) Term)
(declare-fun Prims.op_Negation@tok () Term)
;;; Fact-ids: Name Prims.op_Negation; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (Prims.op_Negation @x0)
(BoxBool (not (BoxBool_proj_0 @x0))))
 

:pattern ((Prims.op_Negation @x0))
:qid primitive_Prims.op_Negation))
:named primitive_Prims.op_Negation))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.op_Negation; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.op_Negation@tok
@x0)
(Prims.op_Negation @x0))
 

:pattern ((ApplyTT Prims.op_Negation@tok
@x0))
:qid token_correspondence_Prims.op_Negation))
:named token_correspondence_Prims.op_Negation))

; </end encoding Prims.op_Negation>

; <Start encoding Prims.op_Multiply>
(declare-fun Prims.op_Multiply (Term Term) Term)
(declare-fun Prims.op_Multiply@tok () Term)
;;; Fact-ids: Name Prims.op_Multiply; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Multiply @x0
@x1)
(BoxInt (* (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Multiply @x0
@x1))
:qid primitive_Prims.op_Multiply))
:named primitive_Prims.op_Multiply))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.op_Multiply; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.op_Multiply@tok
@x0)
@x1)
(Prims.op_Multiply @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.op_Multiply@tok
@x0)
@x1))
:qid token_correspondence_Prims.op_Multiply))
:named token_correspondence_Prims.op_Multiply))

; </end encoding Prims.op_Multiply>

; <Start encoding Prims.op_Subtraction>
(declare-fun Prims.op_Subtraction (Term Term) Term)
(declare-fun Prims.op_Subtraction@tok () Term)
;;; Fact-ids: Name Prims.op_Subtraction; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Subtraction @x0
@x1)
(BoxInt (- (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Subtraction @x0
@x1))
:qid primitive_Prims.op_Subtraction))
:named primitive_Prims.op_Subtraction))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.op_Subtraction; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.op_Subtraction@tok
@x0)
@x1)
(Prims.op_Subtraction @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.op_Subtraction@tok
@x0)
@x1))
:qid token_correspondence_Prims.op_Subtraction))
:named token_correspondence_Prims.op_Subtraction))

; </end encoding Prims.op_Subtraction>

; <Start encoding Prims.op_Addition>
(declare-fun Prims.op_Addition (Term Term) Term)
(declare-fun Prims.op_Addition@tok () Term)
;;; Fact-ids: Name Prims.op_Addition; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Addition @x0
@x1)
(BoxInt (+ (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Addition @x0
@x1))
:qid primitive_Prims.op_Addition))
:named primitive_Prims.op_Addition))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.op_Addition; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.op_Addition@tok
@x0)
@x1)
(Prims.op_Addition @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.op_Addition@tok
@x0)
@x1))
:qid token_correspondence_Prims.op_Addition))
:named token_correspondence_Prims.op_Addition))

; </end encoding Prims.op_Addition>

; <Start encoding Prims.op_Minus>
(declare-fun Prims.op_Minus (Term) Term)
(declare-fun Prims.op_Minus@tok () Term)
;;; Fact-ids: Name Prims.op_Minus; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (Prims.op_Minus @x0)
(BoxInt (- (BoxInt_proj_0 @x0))))
 

:pattern ((Prims.op_Minus @x0))
:qid primitive_Prims.op_Minus))
:named primitive_Prims.op_Minus))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.op_Minus; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.op_Minus@tok
@x0)
(Prims.op_Minus @x0))
 

:pattern ((ApplyTT Prims.op_Minus@tok
@x0))
:qid token_correspondence_Prims.op_Minus))
:named token_correspondence_Prims.op_Minus))

; </end encoding Prims.op_Minus>

; <Start encoding Prims.op_LessThanOrEqual>
(declare-fun Prims.op_LessThanOrEqual (Term Term) Term)
(declare-fun Prims.op_LessThanOrEqual@tok () Term)
;;; Fact-ids: Name Prims.op_LessThanOrEqual; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_LessThanOrEqual @x0
@x1)
(BoxBool (<= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_LessThanOrEqual @x0
@x1))
:qid primitive_Prims.op_LessThanOrEqual))
:named primitive_Prims.op_LessThanOrEqual))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.op_LessThanOrEqual; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.op_LessThanOrEqual@tok
@x0)
@x1)
(Prims.op_LessThanOrEqual @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.op_LessThanOrEqual@tok
@x0)
@x1))
:qid token_correspondence_Prims.op_LessThanOrEqual))
:named token_correspondence_Prims.op_LessThanOrEqual))

; </end encoding Prims.op_LessThanOrEqual>

; <Start encoding Prims.op_GreaterThan>
(declare-fun Prims.op_GreaterThan (Term Term) Term)
(declare-fun Prims.op_GreaterThan@tok () Term)
;;; Fact-ids: Name Prims.op_GreaterThan; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_GreaterThan @x0
@x1)
(BoxBool (> (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_GreaterThan @x0
@x1))
:qid primitive_Prims.op_GreaterThan))
:named primitive_Prims.op_GreaterThan))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.op_GreaterThan; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.op_GreaterThan@tok
@x0)
@x1)
(Prims.op_GreaterThan @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.op_GreaterThan@tok
@x0)
@x1))
:qid token_correspondence_Prims.op_GreaterThan))
:named token_correspondence_Prims.op_GreaterThan))

; </end encoding Prims.op_GreaterThan>

; <Start encoding Prims.op_GreaterThanOrEqual>
(declare-fun Prims.op_GreaterThanOrEqual (Term Term) Term)
(declare-fun Prims.op_GreaterThanOrEqual@tok () Term)
;;; Fact-ids: Name Prims.op_GreaterThanOrEqual; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_GreaterThanOrEqual @x0
@x1)
(BoxBool (>= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_GreaterThanOrEqual @x0
@x1))
:qid primitive_Prims.op_GreaterThanOrEqual))
:named primitive_Prims.op_GreaterThanOrEqual))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.op_GreaterThanOrEqual; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.op_GreaterThanOrEqual@tok
@x0)
@x1)
(Prims.op_GreaterThanOrEqual @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.op_GreaterThanOrEqual@tok
@x0)
@x1))
:qid token_correspondence_Prims.op_GreaterThanOrEqual))
:named token_correspondence_Prims.op_GreaterThanOrEqual))

; </end encoding Prims.op_GreaterThanOrEqual>

; <Start encoding Prims.op_LessThan>
(declare-fun Prims.op_LessThan (Term Term) Term)
(declare-fun Prims.op_LessThan@tok () Term)
;;; Fact-ids: Name Prims.op_LessThan; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_LessThan @x0
@x1)
(BoxBool (< (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_LessThan @x0
@x1))
:qid primitive_Prims.op_LessThan))
:named primitive_Prims.op_LessThan))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.op_LessThan; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.op_LessThan@tok
@x0)
@x1)
(Prims.op_LessThan @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.op_LessThan@tok
@x0)
@x1))
:qid token_correspondence_Prims.op_LessThan))
:named token_correspondence_Prims.op_LessThan))

; </end encoding Prims.op_LessThan>

; <Start encoding Prims.op_Equality>
(declare-fun Prims.op_Equality (Term Term Term) Term)
(declare-fun Prims.op_Equality@tok () Term)
;;; Fact-ids: Name Prims.op_Equality; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.op_Equality @x0
@x1
@x2)
(BoxBool (= @x1
@x2)))
 

:pattern ((Prims.op_Equality @x0
@x1
@x2))
:qid primitive_Prims.op_Equality))
:named primitive_Prims.op_Equality))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.op_Equality; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.op_Equality@tok
@x0)
@x1)
@x2)
(Prims.op_Equality @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.op_Equality@tok
@x0)
@x1)
@x2))
:qid token_correspondence_Prims.op_Equality))
:named token_correspondence_Prims.op_Equality))

; </end encoding Prims.op_Equality>

; <Start encoding Prims.op_disEquality>
(declare-fun Prims.op_disEquality (Term Term Term) Term)
(declare-fun Prims.op_disEquality@tok () Term)
;;; Fact-ids: Name Prims.op_disEquality; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.op_disEquality @x0
@x1
@x2)
(BoxBool (not (= @x1
@x2))))
 

:pattern ((Prims.op_disEquality @x0
@x1
@x2))
:qid primitive_Prims.op_disEquality))
:named primitive_Prims.op_disEquality))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.op_disEquality; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.op_disEquality@tok
@x0)
@x1)
@x2)
(Prims.op_disEquality @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.op_disEquality@tok
@x0)
@x1)
@x2))
:qid token_correspondence_Prims.op_disEquality))
:named token_correspondence_Prims.op_disEquality))

; </end encoding Prims.op_disEquality>

; <Start encoding Prims.exn>
(declare-fun Prims.exn () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.exn; Namespace Prims
(assert (! (HasType Prims.exn
Tm_type)
:named function_token_typing_Prims.exn))
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.exn; Namespace Prims
(assert (! (= 646
(Term_constr_id Prims.exn))
:named constructor_distinct_Prims.exn))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.exn; Namespace Prims
(assert (! (forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.exn)
(= Prims.exn
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.exn))
:qid Prims_pretyping_2feddfe489e78a01f5d2e9b55172b46a))
:named Prims_pretyping_2feddfe489e78a01f5d2e9b55172b46a))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.exn; Namespace Prims
(assert (! (HasType Prims.exn
Tm_type)
:named typing_Prims.exn))

; </end encoding Prims.exn>

; <Start encoding Prims.array>
(declare-fun Prims.array (Term) Term)

(declare-fun Prims.array@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.array; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.array@tok
@x0)
(Prims.array @x0))
 

:pattern ((ApplyTT Prims.array@tok
@x0))

:pattern ((Prims.array @x0))
:qid token_correspondence_Prims.array))
:named token_correspondence_Prims.array))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.array; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.array@tok
Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
 

:pattern ((ApplyTT Prims.array@tok
@x0))

:pattern ((ApplyTT @x0
Prims.array@tok))
:qid function_token_typing_Prims.array))
:named function_token_typing_Prims.array))
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.array; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= 650
(Term_constr_id (Prims.array @x0)))
 

:pattern ((Prims.array @x0))
:qid constructor_distinct_Prims.array))
:named constructor_distinct_Prims.array))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.array; Namespace Prims
(assert (! (forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.array @x2))
(= (Prims.array @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.array @x2)))
:qid Prims_pretyping_4ad2a9f57b811db36dfacf4f739b0d18))
:named Prims_pretyping_4ad2a9f57b811db36dfacf4f739b0d18))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.array; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.array @x0)
Tm_type))
 

:pattern ((Prims.array @x0))
:qid typing_Prims.array))
:named typing_Prims.array))

; </end encoding Prims.array>

; <Start encoding Prims.strcat>
(declare-fun Prims.strcat (Term Term) Term)
;;;;;;;;;;;;;;;;uu___10238:Prims.string -> uu___10239:Prims.string -> Prims.Tot Prims.string
(declare-fun Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf
;;; Fact-ids: Name Prims.strcat; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf @x0)
Tm_type))
:qid kinding_Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf))
:named kinding_Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.strcat; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf @x2)))
:qid Prims_pre_typing_Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf))
:named Prims_pre_typing_Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf
;;; Fact-ids: Name Prims.strcat; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf @x1))
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
@x1)
(HasType @x3
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x1))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid Prims_interpretation_Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf @x1)))
:qid Prims_interpretation_Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf))
:named Prims_interpretation_Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf))
(declare-fun Prims.strcat@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.strcat; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.strcat@tok
@x0)
@x1)
(Prims.strcat @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.strcat@tok
@x0)
@x1))

:pattern ((Prims.strcat @x0
@x1))
:qid token_correspondence_Prims.strcat))
:named token_correspondence_Prims.strcat))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.strcat; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.strcat@tok
(Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf Prims.string)))
 

:pattern ((ApplyTT Prims.strcat@tok
@x0))

:pattern ((ApplyTT @x0
Prims.strcat@tok))
:qid function_token_typing_Prims.strcat))
:named function_token_typing_Prims.strcat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.strcat; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.string)
(HasType @x1
Prims.string))
(HasType (Prims.strcat @x0
@x1)
Prims.string))
 

:pattern ((Prims.strcat @x0
@x1))
:qid typing_Prims.strcat))
:named typing_Prims.strcat))

; </end encoding Prims.strcat>

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.list (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.list@x0 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.list@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Nil (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Nil_a (Term) Term)
;;;;;;;;;;;;;;;;Prims.Tot (Prims.list a)
(declare-fun Tm_arrow_9f8b5ab8f80ced9cdf6afea35d31efae () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Nil
(declare-fun Prims.Nil@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_tl (Term) Term)
;;;;;;;;;;;;;;;;hd:a -> tl:Prims.list a -> Prims.Tot (Prims.list a)
(declare-fun Tm_arrow_e9f6c89da04213bf160cc257e258081c () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Cons
(declare-fun Prims.Cons@tok () Term)

; <Start encoding Prims.list>

; <start constructor Prims.list>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= 655
(Term_constr_id (Prims.list @x0)))
 

:pattern ((Prims.list @x0))
:qid constructor_distinct_Prims.list))
:named constructor_distinct_Prims.list))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.list ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
655)
(exists ((@x0 Term))
 (! (= __@x0
(Prims.list @x0))
 
;;no pats
:qid is-Prims.list))))

; </end constructor Prims.list>
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (= 656
(Term_constr_id Prims.list@tok))
:named fresh_token_Prims.list@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.list@tok
@x0)
(Prims.list @x0))
 

:pattern ((ApplyTT Prims.list@tok
@x0))

:pattern ((Prims.list @x0))
:qid token_correspondence_Prims.list@tok))
:named token_correspondence_Prims.list@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.list@tok))
:named pre_kinding_Prims.list@tok))
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.list @x0)
Tm_type))
 

:pattern ((Prims.list @x0))
:qid kinding_Prims.list@tok))
:named kinding_Prims.list@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.list @x2))
(= (Prims.list @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.list @x2)))
:qid Prims_pretyping_3862c4e8ff39bfc3871b6a47e7ff5b2e))
:named Prims_pretyping_3862c4e8ff39bfc3871b6a47e7ff5b2e))

; </end encoding Prims.list>

; <Start encoding Prims.Nil>

; <start constructor Prims.Nil>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= 662
(Term_constr_id (Prims.Nil @x0)))
 

:pattern ((Prims.Nil @x0))
:qid constructor_distinct_Prims.Nil))
:named constructor_distinct_Prims.Nil))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (Prims.Nil_a (Prims.Nil @x0))
@x0)
 

:pattern ((Prims.Nil @x0))
:qid projection_inverse_Prims.Nil_a))
:named projection_inverse_Prims.Nil_a))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Nil ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
662)
(= __@x0
(Prims.Nil (Prims.Nil_a __@x0)))))

; </end constructor Prims.Nil>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_9f8b5ab8f80ced9cdf6afea35d31efae
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (HasType Tm_arrow_9f8b5ab8f80ced9cdf6afea35d31efae
Tm_type)
:named kinding_Tm_arrow_9f8b5ab8f80ced9cdf6afea35d31efae))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_9f8b5ab8f80ced9cdf6afea35d31efae)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_9f8b5ab8f80ced9cdf6afea35d31efae))
:qid Prims_pre_typing_Tm_arrow_9f8b5ab8f80ced9cdf6afea35d31efae))
:named Prims_pre_typing_Tm_arrow_9f8b5ab8f80ced9cdf6afea35d31efae))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_9f8b5ab8f80ced9cdf6afea35d31efae
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_9f8b5ab8f80ced9cdf6afea35d31efae)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_type)
(HasType (ApplyTT @x0
@x1)
(Prims.list @x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Prims_interpretation_Tm_arrow_9f8b5ab8f80ced9cdf6afea35d31efae.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_9f8b5ab8f80ced9cdf6afea35d31efae))
:qid Prims_interpretation_Tm_arrow_9f8b5ab8f80ced9cdf6afea35d31efae))
:named Prims_interpretation_Tm_arrow_9f8b5ab8f80ced9cdf6afea35d31efae))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (= 665
(Term_constr_id Prims.Nil@tok))
:named fresh_token_Prims.Nil@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.Nil@tok
Tm_arrow_9f8b5ab8f80ced9cdf6afea35d31efae))
 

:pattern ((ApplyTT Prims.Nil@tok
@x0))

:pattern ((ApplyTT @x0
Prims.Nil@tok))
:qid typing_tok_Prims.Nil@tok))
:named typing_tok_Prims.Nil@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.Nil@tok
@x0)
(Prims.Nil @x0))
 

:pattern ((ApplyTT Prims.Nil@tok
@x0))
:qid equality_tok_Prims.Nil@tok))
:named equality_tok_Prims.Nil@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
(Prims.Nil @x1)
(Prims.list @x1)))
 

:pattern ((HasTypeFuel @u0
(Prims.Nil @x1)
(Prims.list @x1)))
:qid data_typing_intro_Prims.Nil@tok))
:named data_typing_intro_Prims.Nil@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Nil @x1)
(Prims.list @x2))
(and (HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x1
Tm_type)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Nil @x1)
(Prims.list @x2)))
:qid data_elim_Prims.Nil))
:named data_elim_Prims.Nil))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! true
:named subterm_ordering_Prims.Nil))

; </end encoding Prims.Nil>

; <Start encoding Prims.Cons>

; <start constructor Prims.Cons>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 667
(Term_constr_id (Prims.Cons @x0
@x1
@x2)))
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid constructor_distinct_Prims.Cons))
:named constructor_distinct_Prims.Cons))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_a (Prims.Cons @x0
@x1
@x2))
@x0)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_a))
:named projection_inverse_Prims.Cons_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_hd (Prims.Cons @x0
@x1
@x2))
@x1)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_hd))
:named projection_inverse_Prims.Cons_hd))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_tl (Prims.Cons @x0
@x1
@x2))
@x2)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_tl))
:named projection_inverse_Prims.Cons_tl))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
667)
(= __@x0
(Prims.Cons (Prims.Cons_a __@x0)
(Prims.Cons_hd __@x0)
(Prims.Cons_tl __@x0)))))

; </end constructor Prims.Cons>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_e9f6c89da04213bf160cc257e258081c
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (HasType Tm_arrow_e9f6c89da04213bf160cc257e258081c
Tm_type)
:named kinding_Tm_arrow_e9f6c89da04213bf160cc257e258081c))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_e9f6c89da04213bf160cc257e258081c)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_e9f6c89da04213bf160cc257e258081c))
:qid Prims_pre_typing_Tm_arrow_e9f6c89da04213bf160cc257e258081c))
:named Prims_pre_typing_Tm_arrow_e9f6c89da04213bf160cc257e258081c))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_e9f6c89da04213bf160cc257e258081c
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_e9f6c89da04213bf160cc257e258081c)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
@x1)
(HasType @x3
(Prims.list @x1)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
(Prims.list @x1)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid Prims_interpretation_Tm_arrow_e9f6c89da04213bf160cc257e258081c.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_e9f6c89da04213bf160cc257e258081c))
:qid Prims_interpretation_Tm_arrow_e9f6c89da04213bf160cc257e258081c))
:named Prims_interpretation_Tm_arrow_e9f6c89da04213bf160cc257e258081c))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (= 670
(Term_constr_id Prims.Cons@tok))
:named fresh_token_Prims.Cons@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.Cons@tok
Tm_arrow_e9f6c89da04213bf160cc257e258081c))
 

:pattern ((ApplyTT Prims.Cons@tok
@x0))

:pattern ((ApplyTT @x0
Prims.Cons@tok))
:qid typing_tok_Prims.Cons@tok))
:named typing_tok_Prims.Cons@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.Cons@tok
@x0)
@x1)
@x2)
(Prims.Cons @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.Cons@tok
@x0)
@x1)
@x2))
:qid equality_tok_Prims.Cons@tok))
:named equality_tok_Prims.Cons@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)
(HasTypeFuel @u0
@x3
(Prims.list @x1)))
(HasTypeFuel @u0
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x1)))
 

:pattern ((HasTypeFuel @u0
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x1)))
:qid data_typing_intro_Prims.Cons@tok))
:named data_typing_intro_Prims.Cons@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x2
@x4)
(HasTypeFuel @u0
@x3
(Prims.list @x4))
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)
(HasTypeFuel @u0
@x3
(Prims.list @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4)))
:qid data_elim_Prims.Cons))
:named data_elim_Prims.Cons))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4))
(and (Valid (Precedes @x2
(Prims.Cons @x1
@x2
@x3)))
(Valid (Precedes @x3
(Prims.Cons @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4)))
:qid subterm_ordering_Prims.Cons))
:named subterm_ordering_Prims.Cons))

; </end encoding Prims.Cons>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(Prims.list @x2))
(or (and (is-Prims.Nil @x1)
(= @x2
(Prims.Nil_a @x1)))
(and (is-Prims.Cons @x1)
(= @x2
(Prims.Cons_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(Prims.list @x2)))
:qid fuel_guarded_inversion_Prims.list))
:named fuel_guarded_inversion_Prims.list))

; </end encoding >

; <Start encoding Prims.list_haseq>
;;;;;;;;;;;;;;;;Assumption: list_haseq
;;; Fact-ids: Name Prims.list_haseq; Namespace Prims
(assert (! 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(237,0-239,38); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(237,0-239,38)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(237,0-239,38); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(237,0-239,38)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(237,0-239,38); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(237,0-239,38)
(Prims.hasEq @x0)
)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(237,0-239,38); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(237,0-239,38)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(237,0-239,38); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(237,0-239,38)
(Prims.hasEq (Prims.list @x0))
)
)
 

:pattern ((Prims.hasEq (Prims.list @x0)))
:qid assumption_Prims.list_haseq))

:named assumption_Prims.list_haseq))

; </end encoding Prims.list_haseq>

; <Start encoding Prims.uu___is_Nil>
(declare-fun Prims.uu___is_Nil (Term Term) Term)
;;;;;;;;;;;;;;;;projectee:Prims.list a -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_186fc0e29ebb27a200ef672a89551282 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_186fc0e29ebb27a200ef672a89551282
;;; Fact-ids: Name Prims.uu___is_Nil; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_186fc0e29ebb27a200ef672a89551282 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_186fc0e29ebb27a200ef672a89551282 @x0)
Tm_type))
:qid kinding_Tm_arrow_186fc0e29ebb27a200ef672a89551282))
:named kinding_Tm_arrow_186fc0e29ebb27a200ef672a89551282))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.uu___is_Nil; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_186fc0e29ebb27a200ef672a89551282 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_186fc0e29ebb27a200ef672a89551282 @x2)))
:qid Prims_pre_typing_Tm_arrow_186fc0e29ebb27a200ef672a89551282))
:named Prims_pre_typing_Tm_arrow_186fc0e29ebb27a200ef672a89551282))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_186fc0e29ebb27a200ef672a89551282
;;; Fact-ids: Name Prims.uu___is_Nil; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_186fc0e29ebb27a200ef672a89551282 @x1))
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
(Prims.list @x2)))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x1))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid Prims_interpretation_Tm_arrow_186fc0e29ebb27a200ef672a89551282.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_186fc0e29ebb27a200ef672a89551282 @x1)))
:qid Prims_interpretation_Tm_arrow_186fc0e29ebb27a200ef672a89551282))
:named Prims_interpretation_Tm_arrow_186fc0e29ebb27a200ef672a89551282))
(declare-fun Prims.uu___is_Nil@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.uu___is_Nil; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.uu___is_Nil@tok
@x0)
@x1)
(Prims.uu___is_Nil @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.uu___is_Nil@tok
@x0)
@x1))

:pattern ((Prims.uu___is_Nil @x0
@x1))
:qid token_correspondence_Prims.uu___is_Nil))
:named token_correspondence_Prims.uu___is_Nil))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.uu___is_Nil; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.uu___is_Nil@tok
(Tm_arrow_186fc0e29ebb27a200ef672a89551282 Prims.bool)))
 

:pattern ((ApplyTT Prims.uu___is_Nil@tok
@x0))

:pattern ((ApplyTT @x0
Prims.uu___is_Nil@tok))
:qid function_token_typing_Prims.uu___is_Nil))
:named function_token_typing_Prims.uu___is_Nil))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Nil; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))
(HasType (Prims.uu___is_Nil @x0
@x1)
Prims.bool))
 

:pattern ((Prims.uu___is_Nil @x0
@x1))
:qid typing_Prims.uu___is_Nil))
:named typing_Prims.uu___is_Nil))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_Nil; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.uu___is_Nil @x0
@x1)
(BoxBool (is-Prims.Nil @x1)))
 

:pattern ((Prims.uu___is_Nil @x0
@x1))
:qid disc_equation_Prims.Nil))
:named disc_equation_Prims.Nil))

; </end encoding Prims.uu___is_Nil>

; <Start encoding Prims.uu___is_Cons>
(declare-fun Prims.uu___is_Cons (Term Term) Term)

(declare-fun Prims.uu___is_Cons@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.uu___is_Cons; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.uu___is_Cons@tok
@x0)
@x1)
(Prims.uu___is_Cons @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.uu___is_Cons@tok
@x0)
@x1))

:pattern ((Prims.uu___is_Cons @x0
@x1))
:qid token_correspondence_Prims.uu___is_Cons))
:named token_correspondence_Prims.uu___is_Cons))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.uu___is_Cons; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.uu___is_Cons@tok
(Tm_arrow_186fc0e29ebb27a200ef672a89551282 Prims.bool)))
 

:pattern ((ApplyTT Prims.uu___is_Cons@tok
@x0))

:pattern ((ApplyTT @x0
Prims.uu___is_Cons@tok))
:qid function_token_typing_Prims.uu___is_Cons))
:named function_token_typing_Prims.uu___is_Cons))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Cons; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))
(HasType (Prims.uu___is_Cons @x0
@x1)
Prims.bool))
 

:pattern ((Prims.uu___is_Cons @x0
@x1))
:qid typing_Prims.uu___is_Cons))
:named typing_Prims.uu___is_Cons))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_Cons; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.uu___is_Cons @x0
@x1)
(BoxBool (is-Prims.Cons @x1)))
 

:pattern ((Prims.uu___is_Cons @x0
@x1))
:qid disc_equation_Prims.Cons))
:named disc_equation_Prims.Cons))

; </end encoding Prims.uu___is_Cons>

; <Start encoding Prims.__proj__Cons__item__hd>
(declare-fun Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)
Tm_type)
 

:pattern ((HasType (Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)
Tm_type))
:qid refinement_kinding_Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32))
:named refinement_kinding_Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (exists ((@x1 Term))
 (! (and (HasType @x1
(Prims.list @x0))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(239,4-239,8); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(239,4-239,8)
(BoxBool_proj_0 (Prims.uu___is_Cons @x0
@x1))
)
 
;;no pats
:qid ref_valid_Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32.1))
(Valid (Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)))
 

:pattern ((Valid (Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)))
:qid ref_valid_Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32))
:named ref_valid_Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32))
;;;;;;;;;;;;;;;;(uu___10307:Prims.list a{ Prims.b2t (Cons? uu___10307) })
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x2))
(and (HasTypeFuel @u0
@x1
(Prims.list @x2))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(239,4-239,8); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(239,4-239,8)
(BoxBool_proj_0 (Prims.uu___is_Cons @x2
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x2)))
:qid refinement_interpretation_Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32))
:named refinement_interpretation_Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32))
;;;;;;;;;;;;;;;;haseq for Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)))
(Valid (Prims.hasEq (Prims.list @x0))))
 

:pattern ((Valid (Prims.hasEq (Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0))))
:qid haseqPrims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32))
:named haseqPrims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32))
(declare-fun Prims.__proj__Cons__item__hd (Term Term) Term)
;;;;;;;;;;;;;;;;projectee:(uu___10321:Prims.list a{ Prims.b2t (Cons? uu___10321) }) -> Prims.Tot a
(declare-fun Tm_arrow_3ca80ddba151a71b9c9aa6e8efea65cd () Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_3ca80ddba151a71b9c9aa6e8efea65cd
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! (HasType Tm_arrow_3ca80ddba151a71b9c9aa6e8efea65cd
Tm_type)
:named kinding_Tm_arrow_3ca80ddba151a71b9c9aa6e8efea65cd))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_3ca80ddba151a71b9c9aa6e8efea65cd)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_3ca80ddba151a71b9c9aa6e8efea65cd))
:qid Prims_pre_typing_Tm_arrow_3ca80ddba151a71b9c9aa6e8efea65cd))
:named Prims_pre_typing_Tm_arrow_3ca80ddba151a71b9c9aa6e8efea65cd))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_3ca80ddba151a71b9c9aa6e8efea65cd
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_3ca80ddba151a71b9c9aa6e8efea65cd)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x1)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x1))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Prims_interpretation_Tm_arrow_3ca80ddba151a71b9c9aa6e8efea65cd.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_3ca80ddba151a71b9c9aa6e8efea65cd))
:qid Prims_interpretation_Tm_arrow_3ca80ddba151a71b9c9aa6e8efea65cd))
:named Prims_interpretation_Tm_arrow_3ca80ddba151a71b9c9aa6e8efea65cd))
(declare-fun Prims.__proj__Cons__item__hd@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.__proj__Cons__item__hd@tok
@x0)
@x1)
(Prims.__proj__Cons__item__hd @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.__proj__Cons__item__hd@tok
@x0)
@x1))

:pattern ((Prims.__proj__Cons__item__hd @x0
@x1))
:qid token_correspondence_Prims.__proj__Cons__item__hd))
:named token_correspondence_Prims.__proj__Cons__item__hd))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.__proj__Cons__item__hd@tok
Tm_arrow_3ca80ddba151a71b9c9aa6e8efea65cd))
 

:pattern ((ApplyTT Prims.__proj__Cons__item__hd@tok
@x0))

:pattern ((ApplyTT @x0
Prims.__proj__Cons__item__hd@tok))
:qid function_token_typing_Prims.__proj__Cons__item__hd))
:named function_token_typing_Prims.__proj__Cons__item__hd))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)))
(HasType (Prims.__proj__Cons__item__hd @x0
@x1)
@x0))
 

:pattern ((Prims.__proj__Cons__item__hd @x0
@x1))
:qid typing_Prims.__proj__Cons__item__hd))
:named typing_Prims.__proj__Cons__item__hd))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.__proj__Cons__item__hd @x0
@x1)
(Prims.Cons_hd @x1))
 

:pattern ((Prims.__proj__Cons__item__hd @x0
@x1))
:qid proj_equation_Prims.Cons_hd))
:named proj_equation_Prims.Cons_hd))

; </end encoding Prims.__proj__Cons__item__hd>

; <Start encoding Prims.__proj__Cons__item__tl>

(declare-fun Prims.__proj__Cons__item__tl (Term Term) Term)
;;;;;;;;;;;;;;;;projectee:(uu___10347:Prims.list a{ Prims.b2t (Cons? uu___10347) }) -> Prims.Tot (Prims.list a)
(declare-fun Tm_arrow_a704b31706c9f8227ffcec83d74a9b31 () Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_a704b31706c9f8227ffcec83d74a9b31
;;; Fact-ids: Name Prims.__proj__Cons__item__tl; Namespace Prims
(assert (! (HasType Tm_arrow_a704b31706c9f8227ffcec83d74a9b31
Tm_type)
:named kinding_Tm_arrow_a704b31706c9f8227ffcec83d74a9b31))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.__proj__Cons__item__tl; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_a704b31706c9f8227ffcec83d74a9b31)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_a704b31706c9f8227ffcec83d74a9b31))
:qid Prims_pre_typing_Tm_arrow_a704b31706c9f8227ffcec83d74a9b31))
:named Prims_pre_typing_Tm_arrow_a704b31706c9f8227ffcec83d74a9b31))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a704b31706c9f8227ffcec83d74a9b31
;;; Fact-ids: Name Prims.__proj__Cons__item__tl; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_a704b31706c9f8227ffcec83d74a9b31)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x1)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Prims.list @x1)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Prims_interpretation_Tm_arrow_a704b31706c9f8227ffcec83d74a9b31.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_a704b31706c9f8227ffcec83d74a9b31))
:qid Prims_interpretation_Tm_arrow_a704b31706c9f8227ffcec83d74a9b31))
:named Prims_interpretation_Tm_arrow_a704b31706c9f8227ffcec83d74a9b31))
(declare-fun Prims.__proj__Cons__item__tl@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.__proj__Cons__item__tl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.__proj__Cons__item__tl@tok
@x0)
@x1)
(Prims.__proj__Cons__item__tl @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.__proj__Cons__item__tl@tok
@x0)
@x1))

:pattern ((Prims.__proj__Cons__item__tl @x0
@x1))
:qid token_correspondence_Prims.__proj__Cons__item__tl))
:named token_correspondence_Prims.__proj__Cons__item__tl))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__proj__Cons__item__tl; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.__proj__Cons__item__tl@tok
Tm_arrow_a704b31706c9f8227ffcec83d74a9b31))
 

:pattern ((ApplyTT Prims.__proj__Cons__item__tl@tok
@x0))

:pattern ((ApplyTT @x0
Prims.__proj__Cons__item__tl@tok))
:qid function_token_typing_Prims.__proj__Cons__item__tl))
:named function_token_typing_Prims.__proj__Cons__item__tl))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.__proj__Cons__item__tl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)))
(HasType (Prims.__proj__Cons__item__tl @x0
@x1)
(Prims.list @x0)))
 

:pattern ((Prims.__proj__Cons__item__tl @x0
@x1))
:qid typing_Prims.__proj__Cons__item__tl))
:named typing_Prims.__proj__Cons__item__tl))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Prims.__proj__Cons__item__tl; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.__proj__Cons__item__tl @x0
@x1)
(Prims.Cons_tl @x1))
 

:pattern ((Prims.__proj__Cons__item__tl @x0
@x1))
:qid proj_equation_Prims.Cons_tl))
:named proj_equation_Prims.Cons_tl))

; </end encoding Prims.__proj__Cons__item__tl>

; <Start encoding Prims.pattern>
(declare-fun Prims.pattern () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.pattern; Namespace Prims
(assert (! (HasType Prims.pattern
Tm_type)
:named function_token_typing_Prims.pattern))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pattern; Namespace Prims
(assert (! (HasType Prims.pattern
Tm_type)
:named typing_Prims.pattern))

; </end encoding Prims.pattern>

; <Start encoding Prims.smt_pat>
(declare-fun Prims.smt_pat (Term Term) Term)

(declare-fun Prims.smt_pat@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.smt_pat; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.smt_pat@tok
@x0)
@x1)
(Prims.smt_pat @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.smt_pat@tok
@x0)
@x1))

:pattern ((Prims.smt_pat @x0
@x1))
:qid token_correspondence_Prims.smt_pat))
:named token_correspondence_Prims.smt_pat))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.smt_pat; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.smt_pat@tok
(Tm_arrow_756e7b0ac20279dfcded24e5a99a27b8 Prims.pattern)))
 

:pattern ((ApplyTT Prims.smt_pat@tok
@x0))

:pattern ((ApplyTT @x0
Prims.smt_pat@tok))
:qid function_token_typing_Prims.smt_pat))
:named function_token_typing_Prims.smt_pat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.smt_pat; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0))
(HasType (Prims.smt_pat @x0
@x1)
Prims.pattern))
 

:pattern ((Prims.smt_pat @x0
@x1))
:qid typing_Prims.smt_pat))
:named typing_Prims.smt_pat))

; </end encoding Prims.smt_pat>

; <Start encoding Prims.smt_pat_or>
(declare-fun Prims.smt_pat_or (Term) Term)
;;;;;;;;;;;;;;;;x:Prims.list (Prims.list Prims.pattern) -> Prims.Tot Prims.pattern
(declare-fun Tm_arrow_7df6282d3b185c0f02eb10c3e19fe2e1 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_7df6282d3b185c0f02eb10c3e19fe2e1
;;; Fact-ids: Name Prims.smt_pat_or; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_7df6282d3b185c0f02eb10c3e19fe2e1 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_7df6282d3b185c0f02eb10c3e19fe2e1 @x0)
Tm_type))
:qid kinding_Tm_arrow_7df6282d3b185c0f02eb10c3e19fe2e1))
:named kinding_Tm_arrow_7df6282d3b185c0f02eb10c3e19fe2e1))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.smt_pat_or; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_7df6282d3b185c0f02eb10c3e19fe2e1 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_7df6282d3b185c0f02eb10c3e19fe2e1 @x2)))
:qid Prims_pre_typing_Tm_arrow_7df6282d3b185c0f02eb10c3e19fe2e1))
:named Prims_pre_typing_Tm_arrow_7df6282d3b185c0f02eb10c3e19fe2e1))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_7df6282d3b185c0f02eb10c3e19fe2e1
;;; Fact-ids: Name Prims.smt_pat_or; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_7df6282d3b185c0f02eb10c3e19fe2e1 @x1))
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Prims.list (Prims.list @x1)))
(HasType (ApplyTT @x0
@x2)
@x1))
 

:pattern ((ApplyTT @x0
@x2))
:qid Prims_interpretation_Tm_arrow_7df6282d3b185c0f02eb10c3e19fe2e1.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_7df6282d3b185c0f02eb10c3e19fe2e1 @x1)))
:qid Prims_interpretation_Tm_arrow_7df6282d3b185c0f02eb10c3e19fe2e1))
:named Prims_interpretation_Tm_arrow_7df6282d3b185c0f02eb10c3e19fe2e1))
(declare-fun Prims.smt_pat_or@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.smt_pat_or; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.smt_pat_or@tok
@x0)
(Prims.smt_pat_or @x0))
 

:pattern ((ApplyTT Prims.smt_pat_or@tok
@x0))

:pattern ((Prims.smt_pat_or @x0))
:qid token_correspondence_Prims.smt_pat_or))
:named token_correspondence_Prims.smt_pat_or))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.smt_pat_or; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.smt_pat_or@tok
(Tm_arrow_7df6282d3b185c0f02eb10c3e19fe2e1 Prims.pattern)))
 

:pattern ((ApplyTT Prims.smt_pat_or@tok
@x0))

:pattern ((ApplyTT @x0
Prims.smt_pat_or@tok))
:qid function_token_typing_Prims.smt_pat_or))
:named function_token_typing_Prims.smt_pat_or))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.smt_pat_or; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
(Prims.list (Prims.list Prims.pattern)))
(HasType (Prims.smt_pat_or @x0)
Prims.pattern))
 

:pattern ((Prims.smt_pat_or @x0))
:qid typing_Prims.smt_pat_or))
:named typing_Prims.smt_pat_or))

; </end encoding Prims.smt_pat_or>

; <Start encoding Prims.decreases>
(declare-fun Prims.decreases (Term Term) Term)
;;;;;;;;;;;;;;;;uu___10373:a -> Prims.Tot Type
(declare-fun Tm_arrow_34d4137f6994a8c7bcc0b38f6ac7779f () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_34d4137f6994a8c7bcc0b38f6ac7779f
;;; Fact-ids: Name Prims.decreases; Namespace Prims
(assert (! (HasType Tm_arrow_34d4137f6994a8c7bcc0b38f6ac7779f
Tm_type)
:named kinding_Tm_arrow_34d4137f6994a8c7bcc0b38f6ac7779f))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.decreases; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_34d4137f6994a8c7bcc0b38f6ac7779f)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_34d4137f6994a8c7bcc0b38f6ac7779f))
:qid Prims_pre_typing_Tm_arrow_34d4137f6994a8c7bcc0b38f6ac7779f))
:named Prims_pre_typing_Tm_arrow_34d4137f6994a8c7bcc0b38f6ac7779f))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_34d4137f6994a8c7bcc0b38f6ac7779f
;;; Fact-ids: Name Prims.decreases; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_34d4137f6994a8c7bcc0b38f6ac7779f)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Prims_interpretation_Tm_arrow_34d4137f6994a8c7bcc0b38f6ac7779f.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_34d4137f6994a8c7bcc0b38f6ac7779f))
:qid Prims_interpretation_Tm_arrow_34d4137f6994a8c7bcc0b38f6ac7779f))
:named Prims_interpretation_Tm_arrow_34d4137f6994a8c7bcc0b38f6ac7779f))
(declare-fun Prims.decreases@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.decreases; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.decreases@tok
@x0)
@x1)
(Prims.decreases @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.decreases@tok
@x0)
@x1))

:pattern ((Prims.decreases @x0
@x1))
:qid token_correspondence_Prims.decreases))
:named token_correspondence_Prims.decreases))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.decreases; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.decreases@tok
Tm_arrow_34d4137f6994a8c7bcc0b38f6ac7779f))
 

:pattern ((ApplyTT Prims.decreases@tok
@x0))

:pattern ((ApplyTT @x0
Prims.decreases@tok))
:qid function_token_typing_Prims.decreases))
:named function_token_typing_Prims.decreases))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.decreases; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0))
(HasType (Prims.decreases @x0
@x1)
Tm_type))
 

:pattern ((Prims.decreases @x0
@x1))
:qid typing_Prims.decreases))
:named typing_Prims.decreases))

; </end encoding Prims.decreases>

; <Skipped Prims.Lemma/>

; <Skipped Prims.M/>

; <Start encoding Prims.returnM>
(declare-fun Prims.returnM (Term Term) Term)
;;;;;;;;;;;;;;;;a:Type -> x:a -> Prims.M a
(declare-fun Tm_arrow_fa4e3ee4a3dfa402363cd0693fcbfca4 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_fa4e3ee4a3dfa402363cd0693fcbfca4
;;; Fact-ids: Name Prims.returnM; Namespace Prims
(assert (! (HasType Tm_arrow_fa4e3ee4a3dfa402363cd0693fcbfca4
Tm_type)
:named kinding_Tm_arrow_fa4e3ee4a3dfa402363cd0693fcbfca4))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.returnM; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_fa4e3ee4a3dfa402363cd0693fcbfca4)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_fa4e3ee4a3dfa402363cd0693fcbfca4))
:qid Prims_pre_typing_Tm_arrow_fa4e3ee4a3dfa402363cd0693fcbfca4))
:named Prims_pre_typing_Tm_arrow_fa4e3ee4a3dfa402363cd0693fcbfca4))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_fa4e3ee4a3dfa402363cd0693fcbfca4
;;; Fact-ids: Name Prims.returnM; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_fa4e3ee4a3dfa402363cd0693fcbfca4)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x1))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Prims_interpretation_Tm_arrow_fa4e3ee4a3dfa402363cd0693fcbfca4.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_fa4e3ee4a3dfa402363cd0693fcbfca4))
:qid Prims_interpretation_Tm_arrow_fa4e3ee4a3dfa402363cd0693fcbfca4))
:named Prims_interpretation_Tm_arrow_fa4e3ee4a3dfa402363cd0693fcbfca4))
(declare-fun Prims.returnM@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.returnM; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.returnM@tok
@x0)
@x1)
(Prims.returnM @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.returnM@tok
@x0)
@x1))

:pattern ((Prims.returnM @x0
@x1))
:qid token_correspondence_Prims.returnM))
:named token_correspondence_Prims.returnM))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.returnM; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.returnM@tok
Tm_arrow_fa4e3ee4a3dfa402363cd0693fcbfca4))
 

:pattern ((ApplyTT Prims.returnM@tok
@x0))

:pattern ((ApplyTT @x0
Prims.returnM@tok))
:qid function_token_typing_Prims.returnM))
:named function_token_typing_Prims.returnM))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.returnM; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0))
(HasType (Prims.returnM @x0
@x1)
@x0))
 

:pattern ((Prims.returnM @x0
@x1))
:qid typing_Prims.returnM))
:named typing_Prims.returnM))
;;;;;;;;;;;;;;;;Equation for Prims.returnM
;;; Fact-ids: Name Prims.returnM; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.returnM @x0
@x1)
@x1)
 

:pattern ((Prims.returnM @x0
@x1))
:qid equation_Prims.returnM))
:named equation_Prims.returnM))

; </end encoding Prims.returnM>

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.lex_t () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.LexTop () Term)
;;;;;;;;;;;;;;;;data constructor proxy: LexTop
(declare-fun Prims.LexTop@tok () Term)

; <Start encoding Prims.lex_t>

; <start constructor Prims.lex_t>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.lex_t; Namespace Prims; Name Prims.LexTop; Namespace Prims; Name Prims.LexCons; Namespace Prims
(assert (! (= 689
(Term_constr_id Prims.lex_t))
:named constructor_distinct_Prims.lex_t))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.lex_t ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
689)
(= __@x0
Prims.lex_t)))

; </end constructor Prims.lex_t>
;;; Fact-ids: Name Prims.lex_t; Namespace Prims; Name Prims.LexTop; Namespace Prims; Name Prims.LexCons; Namespace Prims
(assert (! (HasType Prims.lex_t
Tm_type)
:named kinding_Prims.lex_t@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.lex_t; Namespace Prims; Name Prims.LexTop; Namespace Prims; Name Prims.LexCons; Namespace Prims
(assert (! (forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.lex_t)
(= Prims.lex_t
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.lex_t))
:qid Prims_pretyping_e4836109f73687024ac3edd113084865))
:named Prims_pretyping_e4836109f73687024ac3edd113084865))

; </end encoding Prims.lex_t>

; <Start encoding Prims.LexTop>

; <start constructor Prims.LexTop>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.lex_t; Namespace Prims; Name Prims.LexTop; Namespace Prims; Name Prims.LexCons; Namespace Prims
(assert (! (= 695
(Term_constr_id Prims.LexTop))
:named constructor_distinct_Prims.LexTop))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.LexTop ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
695)
(= __@x0
Prims.LexTop)))

; </end constructor Prims.LexTop>
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.lex_t; Namespace Prims; Name Prims.LexTop; Namespace Prims; Name Prims.LexCons; Namespace Prims
(assert (! (HasType Prims.LexTop@tok
Prims.lex_t)
:named typing_tok_Prims.LexTop@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.lex_t; Namespace Prims; Name Prims.LexTop; Namespace Prims; Name Prims.LexCons; Namespace Prims
(assert (! (= Prims.LexTop@tok
Prims.LexTop)
:named equality_tok_Prims.LexTop@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.lex_t; Namespace Prims; Name Prims.LexTop; Namespace Prims; Name Prims.LexCons; Namespace Prims
(assert (! (forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
Prims.LexTop
Prims.lex_t)
 

:pattern ((HasTypeFuel @u0
Prims.LexTop
Prims.lex_t))
:qid data_typing_intro_Prims.LexTop@tok))
:named data_typing_intro_Prims.LexTop@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.lex_t; Namespace Prims; Name Prims.LexTop; Namespace Prims; Name Prims.LexCons; Namespace Prims
(assert (! true
:named data_elim_Prims.LexTop))
;;;;;;;;;;;;;;;;lextop is top
;;; Fact-ids: Name Prims.lex_t; Namespace Prims; Name Prims.LexTop; Namespace Prims; Name Prims.LexCons; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (is-LexCons @x0)
(Valid (Precedes @x0
Prims.LexTop)))
 

:pattern ((Valid (Precedes @x0
Prims.LexTop)))
:qid lextop))
:named lextop))

; </end encoding Prims.LexTop>

; <Skipped Prims.LexCons/>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.lex_t; Namespace Prims; Name Prims.LexTop; Namespace Prims; Name Prims.LexCons; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
Prims.lex_t)
(or (is-Prims.LexTop @x1)
(is-Prims.LexCons @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
Prims.lex_t))
:qid fuel_guarded_inversion_Prims.lex_t))
:named fuel_guarded_inversion_Prims.lex_t))

; </end encoding >

; <Start encoding Prims.as_requires>
(declare-fun Prims.as_requires (Term Term) Term)
;;;;;;;;;;;;;;;;wp:Prims.pure_wp a -> Prims.GTot Prims.pure_pre
(declare-fun Tm_arrow_21504714b743c269357a5ba76f64b480 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_21504714b743c269357a5ba76f64b480
;;; Fact-ids: Name Prims.as_requires; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_21504714b743c269357a5ba76f64b480 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_21504714b743c269357a5ba76f64b480 @x0)
Tm_type))
:qid kinding_Tm_arrow_21504714b743c269357a5ba76f64b480))
:named kinding_Tm_arrow_21504714b743c269357a5ba76f64b480))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.as_requires; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_21504714b743c269357a5ba76f64b480 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_21504714b743c269357a5ba76f64b480 @x2)))
:qid Prims_pre_typing_Tm_arrow_21504714b743c269357a5ba76f64b480))
:named Prims_pre_typing_Tm_arrow_21504714b743c269357a5ba76f64b480))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_21504714b743c269357a5ba76f64b480
;;; Fact-ids: Name Prims.as_requires; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_21504714b743c269357a5ba76f64b480 @x1))
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
(Prims.pure_wp @x2)))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x1))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid Prims_interpretation_Tm_arrow_21504714b743c269357a5ba76f64b480.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_21504714b743c269357a5ba76f64b480 @x1)))
:qid Prims_interpretation_Tm_arrow_21504714b743c269357a5ba76f64b480))
:named Prims_interpretation_Tm_arrow_21504714b743c269357a5ba76f64b480))
(declare-fun Prims.as_requires@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.as_requires; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.as_requires@tok
@x0)
@x1)
(Prims.as_requires @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.as_requires@tok
@x0)
@x1))

:pattern ((Prims.as_requires @x0
@x1))
:qid token_correspondence_Prims.as_requires))
:named token_correspondence_Prims.as_requires))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.as_requires; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.as_requires@tok
(Tm_arrow_21504714b743c269357a5ba76f64b480 Prims.pure_pre)))
 

:pattern ((ApplyTT Prims.as_requires@tok
@x0))

:pattern ((ApplyTT @x0
Prims.as_requires@tok))
:qid function_token_typing_Prims.as_requires))
:named function_token_typing_Prims.as_requires))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.as_requires; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.pure_wp @x0)))
(HasType (Prims.as_requires @x0
@x1)
Prims.pure_pre))
 

:pattern ((Prims.as_requires @x0
@x1))
:qid typing_Prims.as_requires))
:named typing_Prims.as_requires))

(declare-fun Prims_Tm_abs_33c425e9d5a70900b1deadec7d52bee0 (Term Term) Term)
;;;;;;;;;;;;;;;;typing_Prims_Tm_abs_33c425e9d5a70900b1deadec7d52bee0
;;; Fact-ids: Name Prims.as_requires; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (Prims_Tm_abs_33c425e9d5a70900b1deadec7d52bee0 @x0
@x1)
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
 

:pattern ((Prims_Tm_abs_33c425e9d5a70900b1deadec7d52bee0 @x0
@x1))
:qid typing_Prims_Tm_abs_33c425e9d5a70900b1deadec7d52bee0))
:named typing_Prims_Tm_abs_33c425e9d5a70900b1deadec7d52bee0))
;;;;;;;;;;;;;;;;interpretation_Prims_Tm_abs_33c425e9d5a70900b1deadec7d52bee0
;;; Fact-ids: Name Prims.as_requires; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (Prims_Tm_abs_33c425e9d5a70900b1deadec7d52bee0 @x1
@x2)
@x0)
@x1)
 

:pattern ((ApplyTT (Prims_Tm_abs_33c425e9d5a70900b1deadec7d52bee0 @x1
@x2)
@x0))
:qid interpretation_Prims_Tm_abs_33c425e9d5a70900b1deadec7d52bee0))
:named interpretation_Prims_Tm_abs_33c425e9d5a70900b1deadec7d52bee0))
;;;;;;;;;;;;;;;;Equation for Prims.as_requires
;;; Fact-ids: Name Prims.as_requires; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.as_requires @x0
@x1)
(ApplyTT @x1
(Prims_Tm_abs_33c425e9d5a70900b1deadec7d52bee0 Prims.l_True
@x0)))
 

:pattern ((Prims.as_requires @x0
@x1))
:qid equation_Prims.as_requires))
:named equation_Prims.as_requires))

; </end encoding Prims.as_requires>

; <Start encoding Prims.as_ensures>
(declare-fun Prims.as_ensures (Term Term Term) Term)
;;;;;;;;;;;;;;;;wp:Prims.pure_wp a -> x:a -> Prims.Tot Type0
(declare-fun Tm_arrow_54a93f0a82e11a9329489bef1f445470 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_54a93f0a82e11a9329489bef1f445470
;;; Fact-ids: Name Prims.as_ensures; Namespace Prims
(assert (! (HasType Tm_arrow_54a93f0a82e11a9329489bef1f445470
Tm_type)
:named kinding_Tm_arrow_54a93f0a82e11a9329489bef1f445470))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.as_ensures; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_54a93f0a82e11a9329489bef1f445470)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_54a93f0a82e11a9329489bef1f445470))
:qid Prims_pre_typing_Tm_arrow_54a93f0a82e11a9329489bef1f445470))
:named Prims_pre_typing_Tm_arrow_54a93f0a82e11a9329489bef1f445470))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_54a93f0a82e11a9329489bef1f445470
;;; Fact-ids: Name Prims.as_ensures; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_54a93f0a82e11a9329489bef1f445470)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Prims.pure_wp @x1))
(HasType @x3
@x1))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid Prims_interpretation_Tm_arrow_54a93f0a82e11a9329489bef1f445470.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_54a93f0a82e11a9329489bef1f445470))
:qid Prims_interpretation_Tm_arrow_54a93f0a82e11a9329489bef1f445470))
:named Prims_interpretation_Tm_arrow_54a93f0a82e11a9329489bef1f445470))
(declare-fun Prims.as_ensures@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.as_ensures; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.as_ensures@tok
@x0)
@x1)
@x2)
(Prims.as_ensures @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.as_ensures@tok
@x0)
@x1)
@x2))

:pattern ((Prims.as_ensures @x0
@x1
@x2))
:qid token_correspondence_Prims.as_ensures))
:named token_correspondence_Prims.as_ensures))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.as_ensures; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.as_ensures@tok
Tm_arrow_54a93f0a82e11a9329489bef1f445470))
 

:pattern ((ApplyTT Prims.as_ensures@tok
@x0))

:pattern ((ApplyTT @x0
Prims.as_ensures@tok))
:qid function_token_typing_Prims.as_ensures))
:named function_token_typing_Prims.as_ensures))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.as_ensures; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.pure_wp @x0))
(HasType @x2
@x0))
(HasType (Prims.as_ensures @x0
@x1
@x2)
Tm_type))
 

:pattern ((Prims.as_ensures @x0
@x1
@x2))
:qid typing_Prims.as_ensures))
:named typing_Prims.as_ensures))

(declare-fun Prims_Tm_abs_972ff1a4191ff76beb68b4172a416df7 (Term Term) Term)
;;;;;;;;;;;;;;;;typing_Prims_Tm_abs_972ff1a4191ff76beb68b4172a416df7
;;; Fact-ids: Name Prims.as_ensures; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (Prims_Tm_abs_972ff1a4191ff76beb68b4172a416df7 @x0
@x1)
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
 

:pattern ((Prims_Tm_abs_972ff1a4191ff76beb68b4172a416df7 @x0
@x1))
:qid typing_Prims_Tm_abs_972ff1a4191ff76beb68b4172a416df7))
:named typing_Prims_Tm_abs_972ff1a4191ff76beb68b4172a416df7))
;;;;;;;;;;;;;;;;interpretation_Prims_Tm_abs_972ff1a4191ff76beb68b4172a416df7
;;; Fact-ids: Name Prims.as_ensures; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (Prims_Tm_abs_972ff1a4191ff76beb68b4172a416df7 @x1
@x2)
@x0)
(Prims.l_not (Prims.eq2 @x2
@x0
@x1)))
 

:pattern ((ApplyTT (Prims_Tm_abs_972ff1a4191ff76beb68b4172a416df7 @x1
@x2)
@x0))
:qid interpretation_Prims_Tm_abs_972ff1a4191ff76beb68b4172a416df7))
:named interpretation_Prims_Tm_abs_972ff1a4191ff76beb68b4172a416df7))
;;;;;;;;;;;;;;;;Equation for Prims.as_ensures
;;; Fact-ids: Name Prims.as_ensures; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (Prims.as_ensures @x0
@x1
@x2))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(268,49-268,74); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(268,49-268,74)
(not 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(268,51-268,74); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(268,51-268,74)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(268,51-268,74); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(268,51-268,74)
(ApplyTT @x1
(Prims_Tm_abs_972ff1a4191ff76beb68b4172a416df7 @x2
@x0))
)
)
)
 

:pattern ((Valid (Prims.as_ensures @x0
@x1
@x2)))
:qid equation_Prims.as_ensures))
:named equation_Prims.as_ensures))

; </end encoding Prims.as_ensures>

; <Start encoding Prims._assume>
(declare-fun Prims._assume (Term) Term)
(declare-fun Non_total_Tm_arrow_703 () Term)
;;;;;;;;;;;;;;;;Typing for non-total arrows
;;; Fact-ids: Name Prims._assume; Namespace Prims
(assert (! (HasType Non_total_Tm_arrow_703
Tm_type)
:named Prims_non_total_function_typing_Non_total_Tm_arrow_703))
;;;;;;;;;;;;;;;;pre_typing_Non_total_Tm_arrow_703
;;; Fact-ids: Name Prims._assume; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Non_total_Tm_arrow_703)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Non_total_Tm_arrow_703))
:qid Prims_pre_typing_Non_total_Tm_arrow_703))
:named Prims_pre_typing_Non_total_Tm_arrow_703))
(declare-fun Prims._assume@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims._assume; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims._assume@tok
@x0)
(Prims._assume @x0))
 

:pattern ((ApplyTT Prims._assume@tok
@x0))

:pattern ((Prims._assume @x0))
:qid token_correspondence_Prims._assume))
:named token_correspondence_Prims._assume))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims._assume; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims._assume@tok
Non_total_Tm_arrow_703))
 

:pattern ((ApplyTT Prims._assume@tok
@x0))

:pattern ((ApplyTT @x0
Prims._assume@tok))
:qid function_token_typing_Prims._assume))
:named function_token_typing_Prims._assume))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims._assume; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims._assume @x0)
Prims.unit))
 

:pattern ((Prims._assume @x0))
:qid typing_Prims._assume))
:named typing_Prims._assume))

; </end encoding Prims._assume>

; <Start encoding Prims.admit>
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Prims.admit (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Prims.admit@tok () Term)

; </end encoding Prims.admit>

; <Start encoding Prims.magic>
(declare-fun Prims.magic (Term Term) Term)
;;;;;;;;;;;;;;;;uu___10448:Prims.unit -> Prims.Tot a
(declare-fun Tm_arrow_244b5b2a1fc882c67ebcb032ace08d85 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_244b5b2a1fc882c67ebcb032ace08d85
;;; Fact-ids: Name Prims.magic; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_244b5b2a1fc882c67ebcb032ace08d85 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_244b5b2a1fc882c67ebcb032ace08d85 @x0)
Tm_type))
:qid kinding_Tm_arrow_244b5b2a1fc882c67ebcb032ace08d85))
:named kinding_Tm_arrow_244b5b2a1fc882c67ebcb032ace08d85))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.magic; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_244b5b2a1fc882c67ebcb032ace08d85 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_244b5b2a1fc882c67ebcb032ace08d85 @x2)))
:qid Prims_pre_typing_Tm_arrow_244b5b2a1fc882c67ebcb032ace08d85))
:named Prims_pre_typing_Tm_arrow_244b5b2a1fc882c67ebcb032ace08d85))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_244b5b2a1fc882c67ebcb032ace08d85
;;; Fact-ids: Name Prims.magic; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_244b5b2a1fc882c67ebcb032ace08d85 @x1))
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x2))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid Prims_interpretation_Tm_arrow_244b5b2a1fc882c67ebcb032ace08d85.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_244b5b2a1fc882c67ebcb032ace08d85 @x1)))
:qid Prims_interpretation_Tm_arrow_244b5b2a1fc882c67ebcb032ace08d85))
:named Prims_interpretation_Tm_arrow_244b5b2a1fc882c67ebcb032ace08d85))
(declare-fun Prims.magic@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.magic; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.magic@tok
@x0)
@x1)
(Prims.magic @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.magic@tok
@x0)
@x1))

:pattern ((Prims.magic @x0
@x1))
:qid token_correspondence_Prims.magic))
:named token_correspondence_Prims.magic))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.magic; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.magic@tok
(Tm_arrow_244b5b2a1fc882c67ebcb032ace08d85 Prims.unit)))
 

:pattern ((ApplyTT Prims.magic@tok
@x0))

:pattern ((ApplyTT @x0
Prims.magic@tok))
:qid function_token_typing_Prims.magic))
:named function_token_typing_Prims.magic))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.magic; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.unit))
(HasType (Prims.magic @x0
@x1)
@x0))
 

:pattern ((Prims.magic @x0
@x1))
:qid typing_Prims.magic))
:named typing_Prims.magic))

; </end encoding Prims.magic>

; <Start encoding Prims.unsafe_coerce>
(declare-fun Prims.unsafe_coerce (Term Term Term) Term)
;;;;;;;;;;;;;;;;x:a -> Prims.Tot b
(declare-fun Tm_arrow_205942e024d5471c930d18c2ca3ae24b () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_205942e024d5471c930d18c2ca3ae24b
;;; Fact-ids: Name Prims.unsafe_coerce; Namespace Prims
(assert (! (HasType Tm_arrow_205942e024d5471c930d18c2ca3ae24b
Tm_type)
:named kinding_Tm_arrow_205942e024d5471c930d18c2ca3ae24b))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.unsafe_coerce; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_205942e024d5471c930d18c2ca3ae24b)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_205942e024d5471c930d18c2ca3ae24b))
:qid Prims_pre_typing_Tm_arrow_205942e024d5471c930d18c2ca3ae24b))
:named Prims_pre_typing_Tm_arrow_205942e024d5471c930d18c2ca3ae24b))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_205942e024d5471c930d18c2ca3ae24b
;;; Fact-ids: Name Prims.unsafe_coerce; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_205942e024d5471c930d18c2ca3ae24b)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
@x1))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid Prims_interpretation_Tm_arrow_205942e024d5471c930d18c2ca3ae24b.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_205942e024d5471c930d18c2ca3ae24b))
:qid Prims_interpretation_Tm_arrow_205942e024d5471c930d18c2ca3ae24b))
:named Prims_interpretation_Tm_arrow_205942e024d5471c930d18c2ca3ae24b))
(declare-fun Prims.unsafe_coerce@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.unsafe_coerce; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.unsafe_coerce@tok
@x0)
@x1)
@x2)
(Prims.unsafe_coerce @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.unsafe_coerce@tok
@x0)
@x1)
@x2))

:pattern ((Prims.unsafe_coerce @x0
@x1
@x2))
:qid token_correspondence_Prims.unsafe_coerce))
:named token_correspondence_Prims.unsafe_coerce))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.unsafe_coerce; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.unsafe_coerce@tok
Tm_arrow_205942e024d5471c930d18c2ca3ae24b))
 

:pattern ((ApplyTT Prims.unsafe_coerce@tok
@x0))

:pattern ((ApplyTT @x0
Prims.unsafe_coerce@tok))
:qid function_token_typing_Prims.unsafe_coerce))
:named function_token_typing_Prims.unsafe_coerce))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.unsafe_coerce; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
@x0))
(HasType (Prims.unsafe_coerce @x0
@x1
@x2)
@x1))
 

:pattern ((Prims.unsafe_coerce @x0
@x1
@x2))
:qid typing_Prims.unsafe_coerce))
:named typing_Prims.unsafe_coerce))

; </end encoding Prims.unsafe_coerce>

; <Start encoding Prims.admitP>
(declare-fun Prims.admitP (Term) Term)
(declare-fun Non_total_Tm_arrow_709 () Term)
;;;;;;;;;;;;;;;;Typing for non-total arrows
;;; Fact-ids: Name Prims.admitP; Namespace Prims
(assert (! (HasType Non_total_Tm_arrow_709
Tm_type)
:named Prims_non_total_function_typing_Non_total_Tm_arrow_709))
;;;;;;;;;;;;;;;;pre_typing_Non_total_Tm_arrow_709
;;; Fact-ids: Name Prims.admitP; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Non_total_Tm_arrow_709)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Non_total_Tm_arrow_709))
:qid Prims_pre_typing_Non_total_Tm_arrow_709))
:named Prims_pre_typing_Non_total_Tm_arrow_709))
(declare-fun Prims.admitP@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.admitP; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.admitP@tok
@x0)
(Prims.admitP @x0))
 

:pattern ((ApplyTT Prims.admitP@tok
@x0))

:pattern ((Prims.admitP @x0))
:qid token_correspondence_Prims.admitP))
:named token_correspondence_Prims.admitP))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.admitP; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.admitP@tok
Non_total_Tm_arrow_709))
 

:pattern ((ApplyTT Prims.admitP@tok
@x0))

:pattern ((ApplyTT @x0
Prims.admitP@tok))
:qid function_token_typing_Prims.admitP))
:named function_token_typing_Prims.admitP))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.admitP; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.admitP @x0)
Prims.unit))
 

:pattern ((Prims.admitP @x0))
:qid typing_Prims.admitP))
:named typing_Prims.admitP))

; </end encoding Prims.admitP>

; <Start encoding Prims._assert>
(declare-fun Prims._assert (Term) Term)
(declare-fun Non_total_Tm_arrow_711 () Term)
;;;;;;;;;;;;;;;;Typing for non-total arrows
;;; Fact-ids: Name Prims._assert; Namespace Prims
(assert (! (HasType Non_total_Tm_arrow_711
Tm_type)
:named Prims_non_total_function_typing_Non_total_Tm_arrow_711))
;;;;;;;;;;;;;;;;pre_typing_Non_total_Tm_arrow_711
;;; Fact-ids: Name Prims._assert; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Non_total_Tm_arrow_711)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Non_total_Tm_arrow_711))
:qid Prims_pre_typing_Non_total_Tm_arrow_711))
:named Prims_pre_typing_Non_total_Tm_arrow_711))
(declare-fun Prims._assert@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims._assert; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims._assert@tok
@x0)
(Prims._assert @x0))
 

:pattern ((ApplyTT Prims._assert@tok
@x0))

:pattern ((Prims._assert @x0))
:qid token_correspondence_Prims._assert))
:named token_correspondence_Prims._assert))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims._assert; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims._assert@tok
Non_total_Tm_arrow_711))
 

:pattern ((ApplyTT Prims._assert@tok
@x0))

:pattern ((ApplyTT @x0
Prims._assert@tok))
:qid function_token_typing_Prims._assert))
:named function_token_typing_Prims._assert))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims._assert; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims._assert @x0)
Prims.unit))
 

:pattern ((Prims._assert @x0))
:qid typing_Prims._assert))
:named typing_Prims._assert))
;;;;;;;;;;;;;;;;Equation for Prims._assert
;;; Fact-ids: Name Prims._assert; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (Prims._assert @x0)
Tm_unit)
 

:pattern ((Prims._assert @x0))
:qid equation_Prims._assert))
:named equation_Prims._assert))

; </end encoding Prims._assert>

; <Start encoding Prims.spinoff>
(declare-fun Prims.spinoff (Term) Term)

(declare-fun Prims.spinoff@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.spinoff; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.spinoff@tok
@x0)
(Prims.spinoff @x0))
 

:pattern ((ApplyTT Prims.spinoff@tok
@x0))

:pattern ((Prims.spinoff @x0))
:qid token_correspondence_Prims.spinoff))
:named token_correspondence_Prims.spinoff))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.spinoff; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.spinoff@tok
Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
 

:pattern ((ApplyTT Prims.spinoff@tok
@x0))

:pattern ((ApplyTT @x0
Prims.spinoff@tok))
:qid function_token_typing_Prims.spinoff))
:named function_token_typing_Prims.spinoff))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.spinoff; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.spinoff @x0)
Tm_type))
 

:pattern ((Prims.spinoff @x0))
:qid typing_Prims.spinoff))
:named typing_Prims.spinoff))

; </end encoding Prims.spinoff>

; <Start encoding Prims.assert_spinoff>
(declare-fun Prims.assert_spinoff (Term) Term)
(declare-fun Non_total_Tm_arrow_714 () Term)
;;;;;;;;;;;;;;;;Typing for non-total arrows
;;; Fact-ids: Name Prims.assert_spinoff; Namespace Prims
(assert (! (HasType Non_total_Tm_arrow_714
Tm_type)
:named Prims_non_total_function_typing_Non_total_Tm_arrow_714))
;;;;;;;;;;;;;;;;pre_typing_Non_total_Tm_arrow_714
;;; Fact-ids: Name Prims.assert_spinoff; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Non_total_Tm_arrow_714)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Non_total_Tm_arrow_714))
:qid Prims_pre_typing_Non_total_Tm_arrow_714))
:named Prims_pre_typing_Non_total_Tm_arrow_714))
(declare-fun Prims.assert_spinoff@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.assert_spinoff; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.assert_spinoff@tok
@x0)
(Prims.assert_spinoff @x0))
 

:pattern ((ApplyTT Prims.assert_spinoff@tok
@x0))

:pattern ((Prims.assert_spinoff @x0))
:qid token_correspondence_Prims.assert_spinoff))
:named token_correspondence_Prims.assert_spinoff))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.assert_spinoff; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.assert_spinoff@tok
Non_total_Tm_arrow_714))
 

:pattern ((ApplyTT Prims.assert_spinoff@tok
@x0))

:pattern ((ApplyTT @x0
Prims.assert_spinoff@tok))
:qid function_token_typing_Prims.assert_spinoff))
:named function_token_typing_Prims.assert_spinoff))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.assert_spinoff; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.assert_spinoff @x0)
Prims.unit))
 

:pattern ((Prims.assert_spinoff @x0))
:qid typing_Prims.assert_spinoff))
:named typing_Prims.assert_spinoff))
;;;;;;;;;;;;;;;;Equation for Prims.assert_spinoff
;;; Fact-ids: Name Prims.assert_spinoff; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (Prims.assert_spinoff @x0)
Tm_unit)
 

:pattern ((Prims.assert_spinoff @x0))
:qid equation_Prims.assert_spinoff))
:named equation_Prims.assert_spinoff))

; </end encoding Prims.assert_spinoff>

; <Start encoding Prims.cut>
(declare-fun Prims.cut (Term) Term)
(declare-fun Non_total_Tm_arrow_716 () Term)
;;;;;;;;;;;;;;;;Typing for non-total arrows
;;; Fact-ids: Name Prims.cut; Namespace Prims
(assert (! (HasType Non_total_Tm_arrow_716
Tm_type)
:named Prims_non_total_function_typing_Non_total_Tm_arrow_716))
;;;;;;;;;;;;;;;;pre_typing_Non_total_Tm_arrow_716
;;; Fact-ids: Name Prims.cut; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Non_total_Tm_arrow_716)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Non_total_Tm_arrow_716))
:qid Prims_pre_typing_Non_total_Tm_arrow_716))
:named Prims_pre_typing_Non_total_Tm_arrow_716))
(declare-fun Prims.cut@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.cut; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.cut@tok
@x0)
(Prims.cut @x0))
 

:pattern ((ApplyTT Prims.cut@tok
@x0))

:pattern ((Prims.cut @x0))
:qid token_correspondence_Prims.cut))
:named token_correspondence_Prims.cut))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.cut; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.cut@tok
Non_total_Tm_arrow_716))
 

:pattern ((ApplyTT Prims.cut@tok
@x0))

:pattern ((ApplyTT @x0
Prims.cut@tok))
:qid function_token_typing_Prims.cut))
:named function_token_typing_Prims.cut))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.cut; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.cut @x0)
Prims.unit))
 

:pattern ((Prims.cut @x0))
:qid typing_Prims.cut))
:named typing_Prims.cut))
;;;;;;;;;;;;;;;;Equation for Prims.cut
;;; Fact-ids: Name Prims.cut; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (Prims.cut @x0)
Tm_unit)
 

:pattern ((Prims.cut @x0))
:qid equation_Prims.cut))
:named equation_Prims.cut))

; </end encoding Prims.cut>

; <Start encoding Prims.nat>
(declare-fun Prims.nat () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named function_token_typing_Prims.nat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named typing_Prims.nat))
(declare-fun Prims_Tm_refine_ba523126f67e00e7cd55f0b92f16681d (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Prims_Tm_refine_ba523126f67e00e7cd55f0b92f16681d @x0)
Tm_type)
 

:pattern ((HasType (Prims_Tm_refine_ba523126f67e00e7cd55f0b92f16681d @x0)
Tm_type))
:qid refinement_kinding_Prims_Tm_refine_ba523126f67e00e7cd55f0b92f16681d))
:named refinement_kinding_Prims_Tm_refine_ba523126f67e00e7cd55f0b92f16681d))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (exists ((@x1 Term))
 (! (and (HasType @x1
@x0)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
)
 
;;no pats
:qid ref_valid_Prims_Tm_refine_ba523126f67e00e7cd55f0b92f16681d.1))
(Valid (Prims_Tm_refine_ba523126f67e00e7cd55f0b92f16681d @x0)))
 

:pattern ((Valid (Prims_Tm_refine_ba523126f67e00e7cd55f0b92f16681d @x0)))
:qid ref_valid_Prims_Tm_refine_ba523126f67e00e7cd55f0b92f16681d))
:named ref_valid_Prims_Tm_refine_ba523126f67e00e7cd55f0b92f16681d))
;;;;;;;;;;;;;;;;(i:Prims.int{ Prims.b2t (i >= 0) })
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Prims_Tm_refine_ba523126f67e00e7cd55f0b92f16681d @x2))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims_Tm_refine_ba523126f67e00e7cd55f0b92f16681d @x2)))
:qid refinement_interpretation_Prims_Tm_refine_ba523126f67e00e7cd55f0b92f16681d))
:named refinement_interpretation_Prims_Tm_refine_ba523126f67e00e7cd55f0b92f16681d))
;;;;;;;;;;;;;;;;haseq for Prims_Tm_refine_ba523126f67e00e7cd55f0b92f16681d
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Prims_Tm_refine_ba523126f67e00e7cd55f0b92f16681d @x0)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Prims_Tm_refine_ba523126f67e00e7cd55f0b92f16681d @x0))))
:qid haseqPrims_Tm_refine_ba523126f67e00e7cd55f0b92f16681d))
:named haseqPrims_Tm_refine_ba523126f67e00e7cd55f0b92f16681d))
;;;;;;;;;;;;;;;;Equation for Prims.nat
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (= Prims.nat
(Prims_Tm_refine_ba523126f67e00e7cd55f0b92f16681d Prims.int))
:named equation_Prims.nat))

; </end encoding Prims.nat>

; <Start encoding Prims.pos>
(declare-fun Prims.pos () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Prims.pos
Tm_type)
:named function_token_typing_Prims.pos))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Prims.pos
Tm_type)
:named typing_Prims.pos))
(declare-fun Prims_Tm_refine_f048236b5f8051f83b495ea5eaa6127b (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Prims_Tm_refine_f048236b5f8051f83b495ea5eaa6127b @x0)
Tm_type)
 

:pattern ((HasType (Prims_Tm_refine_f048236b5f8051f83b495ea5eaa6127b @x0)
Tm_type))
:qid refinement_kinding_Prims_Tm_refine_f048236b5f8051f83b495ea5eaa6127b))
:named refinement_kinding_Prims_Tm_refine_f048236b5f8051f83b495ea5eaa6127b))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (exists ((@x1 Term))
 (! (and (HasType @x1
@x0)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(290,17-290,22); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(290,17-290,22)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
)
 
;;no pats
:qid ref_valid_Prims_Tm_refine_f048236b5f8051f83b495ea5eaa6127b.1))
(Valid (Prims_Tm_refine_f048236b5f8051f83b495ea5eaa6127b @x0)))
 

:pattern ((Valid (Prims_Tm_refine_f048236b5f8051f83b495ea5eaa6127b @x0)))
:qid ref_valid_Prims_Tm_refine_f048236b5f8051f83b495ea5eaa6127b))
:named ref_valid_Prims_Tm_refine_f048236b5f8051f83b495ea5eaa6127b))
;;;;;;;;;;;;;;;;(i:Prims.int{ Prims.b2t (i > 0) })
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Prims_Tm_refine_f048236b5f8051f83b495ea5eaa6127b @x2))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(290,17-290,22); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(290,17-290,22)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims_Tm_refine_f048236b5f8051f83b495ea5eaa6127b @x2)))
:qid refinement_interpretation_Prims_Tm_refine_f048236b5f8051f83b495ea5eaa6127b))
:named refinement_interpretation_Prims_Tm_refine_f048236b5f8051f83b495ea5eaa6127b))
;;;;;;;;;;;;;;;;haseq for Prims_Tm_refine_f048236b5f8051f83b495ea5eaa6127b
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Prims_Tm_refine_f048236b5f8051f83b495ea5eaa6127b @x0)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Prims_Tm_refine_f048236b5f8051f83b495ea5eaa6127b @x0))))
:qid haseqPrims_Tm_refine_f048236b5f8051f83b495ea5eaa6127b))
:named haseqPrims_Tm_refine_f048236b5f8051f83b495ea5eaa6127b))
;;;;;;;;;;;;;;;;Equation for Prims.pos
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (= Prims.pos
(Prims_Tm_refine_f048236b5f8051f83b495ea5eaa6127b Prims.int))
:named equation_Prims.pos))

; </end encoding Prims.pos>

; <Start encoding Prims.nonzero>
(declare-fun Prims.nonzero () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (HasType Prims.nonzero
Tm_type)
:named function_token_typing_Prims.nonzero))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (HasType Prims.nonzero
Tm_type)
:named typing_Prims.nonzero))
(declare-fun Prims_Tm_refine_7075614a0e8c0bdbec6de0d0ef7f1280 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Prims_Tm_refine_7075614a0e8c0bdbec6de0d0ef7f1280 @x0)
Tm_type)
 

:pattern ((HasType (Prims_Tm_refine_7075614a0e8c0bdbec6de0d0ef7f1280 @x0)
Tm_type))
:qid refinement_kinding_Prims_Tm_refine_7075614a0e8c0bdbec6de0d0ef7f1280))
:named refinement_kinding_Prims_Tm_refine_7075614a0e8c0bdbec6de0d0ef7f1280))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (exists ((@x1 Term))
 (! (and (HasType @x1
@x0)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25)
(not (= @x1
(BoxInt 0)))
)
 
;;no pats
:qid ref_valid_Prims_Tm_refine_7075614a0e8c0bdbec6de0d0ef7f1280.1))
(Valid (Prims_Tm_refine_7075614a0e8c0bdbec6de0d0ef7f1280 @x0)))
 

:pattern ((Valid (Prims_Tm_refine_7075614a0e8c0bdbec6de0d0ef7f1280 @x0)))
:qid ref_valid_Prims_Tm_refine_7075614a0e8c0bdbec6de0d0ef7f1280))
:named ref_valid_Prims_Tm_refine_7075614a0e8c0bdbec6de0d0ef7f1280))
;;;;;;;;;;;;;;;;(i:Prims.int{ Prims.b2t (i <> 0) })
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Prims_Tm_refine_7075614a0e8c0bdbec6de0d0ef7f1280 @x2))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25)
(not (= @x1
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims_Tm_refine_7075614a0e8c0bdbec6de0d0ef7f1280 @x2)))
:qid refinement_interpretation_Prims_Tm_refine_7075614a0e8c0bdbec6de0d0ef7f1280))
:named refinement_interpretation_Prims_Tm_refine_7075614a0e8c0bdbec6de0d0ef7f1280))
;;;;;;;;;;;;;;;;haseq for Prims_Tm_refine_7075614a0e8c0bdbec6de0d0ef7f1280
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Prims_Tm_refine_7075614a0e8c0bdbec6de0d0ef7f1280 @x0)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Prims_Tm_refine_7075614a0e8c0bdbec6de0d0ef7f1280 @x0))))
:qid haseqPrims_Tm_refine_7075614a0e8c0bdbec6de0d0ef7f1280))
:named haseqPrims_Tm_refine_7075614a0e8c0bdbec6de0d0ef7f1280))
;;;;;;;;;;;;;;;;Equation for Prims.nonzero
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (= Prims.nonzero
(Prims_Tm_refine_7075614a0e8c0bdbec6de0d0ef7f1280 Prims.int))
:named equation_Prims.nonzero))

; </end encoding Prims.nonzero>

; <Start encoding Prims.op_Modulus>
(declare-fun Prims.op_Modulus (Term Term) Term)
(declare-fun Prims.op_Modulus@tok () Term)
;;; Fact-ids: Name Prims.op_Modulus; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Modulus @x0
@x1)
(BoxInt (mod (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Modulus @x0
@x1))
:qid primitive_Prims.op_Modulus))
:named primitive_Prims.op_Modulus))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.op_Modulus; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.op_Modulus@tok
@x0)
@x1)
(Prims.op_Modulus @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.op_Modulus@tok
@x0)
@x1))
:qid token_correspondence_Prims.op_Modulus))
:named token_correspondence_Prims.op_Modulus))

; </end encoding Prims.op_Modulus>

; <Start encoding Prims.op_Division>
(declare-fun Prims.op_Division (Term Term) Term)
(declare-fun Prims.op_Division@tok () Term)
;;; Fact-ids: Name Prims.op_Division; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Division @x0
@x1)
(BoxInt (div (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Division @x0
@x1))
:qid primitive_Prims.op_Division))
:named primitive_Prims.op_Division))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.op_Division; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.op_Division@tok
@x0)
@x1)
(Prims.op_Division @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.op_Division@tok
@x0)
@x1))
:qid token_correspondence_Prims.op_Division))
:named token_correspondence_Prims.op_Division))

; </end encoding Prims.op_Division>

; <Start encoding Prims.pow2>
;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Prims.pow2.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Prims.pow2.fuel_instrumented_token () Term)
(declare-fun Prims.pow2 (Term) Term)
(declare-fun Prims.pow2@tok () Term)

;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.pow2@tok
@x0)
(Prims.pow2 @x0))
 

:pattern ((ApplyTT Prims.pow2@tok
@x0))

:pattern ((Prims.pow2 @x0))
:qid token_correspondence_Prims.pow2))
:named token_correspondence_Prims.pow2))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.pow2@tok
(Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b Prims.pos
Prims.nat)))
 

:pattern ((ApplyTT Prims.pow2@tok
@x0))

:pattern ((ApplyTT @x0
Prims.pow2@tok))
:qid function_token_typing_Prims.pow2))
:named function_token_typing_Prims.pow2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (Prims.pow2 @x0)
Prims.pos))
 

:pattern ((Prims.pow2 @x0))
:qid typing_Prims.pow2))
:named typing_Prims.pow2))
;;;;;;;;;;;;;;;;Fuel token correspondence
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (= (ApplyTT (ApplyTF Prims.pow2.fuel_instrumented_token
@u0)
@x1)
(Prims.pow2.fuel_instrumented @u0
@x1))
 

:pattern ((ApplyTT (ApplyTF Prims.pow2.fuel_instrumented_token
@u0)
@x1))
:qid fuel_token_correspondence_Prims.pow2.fuel_instrumented_token))
:named fuel_token_correspondence_Prims.pow2.fuel_instrumented_token))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
Prims.nat)
(HasType (Prims.pow2.fuel_instrumented @u0
@x1)
Prims.pos))
 

:pattern ((Prims.pow2.fuel_instrumented @u0
@x1))
:qid token_correspondence_Prims.pow2.fuel_instrumented))
:named token_correspondence_Prims.pow2.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (Prims.pow2 @x0)
(Prims.pow2.fuel_instrumented MaxFuel
@x0))
 

:pattern ((Prims.pow2 @x0))
:qid @fuel_correspondence_Prims.pow2.fuel_instrumented))
:named @fuel_correspondence_Prims.pow2.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (= (Prims.pow2.fuel_instrumented (SFuel @u0)
@x1)
(Prims.pow2.fuel_instrumented ZFuel
@x1))
 

:pattern ((Prims.pow2.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_Prims.pow2.fuel_instrumented))
:named @fuel_irrelevance_Prims.pow2.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: Prims.pow2
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (= (Prims.pow2.fuel_instrumented (SFuel @u0)
@x1)
(let ((@lb2 @x1))
(ite (= @lb2
(BoxInt 0))
(BoxInt 1)
(Prims.op_Multiply (BoxInt 2)
(Prims.pow2.fuel_instrumented @u0
(Prims.op_Subtraction @x1
(BoxInt 1)))))))
 :weight 0


:pattern ((Prims.pow2.fuel_instrumented (SFuel @u0)
@x1))
:qid equation_with_fuel_Prims.pow2.fuel_instrumented))
:named equation_with_fuel_Prims.pow2.fuel_instrumented))

; </end encoding Prims.pow2>

; <Start encoding Prims.min>
(declare-fun Prims.min (Term Term) Term)

(declare-fun Prims.min@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.min; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.min@tok
@x0)
@x1)
(Prims.min @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.min@tok
@x0)
@x1))

:pattern ((Prims.min @x0
@x1))
:qid token_correspondence_Prims.min))
:named token_correspondence_Prims.min))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.min; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.min@tok
(Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf Prims.int)))
 

:pattern ((ApplyTT Prims.min@tok
@x0))

:pattern ((ApplyTT @x0
Prims.min@tok))
:qid function_token_typing_Prims.min))
:named function_token_typing_Prims.min))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.min; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.int))
(HasType (Prims.min @x0
@x1)
Prims.int))
 

:pattern ((Prims.min @x0
@x1))
:qid typing_Prims.min))
:named typing_Prims.min))
;;;;;;;;;;;;;;;;Equation for Prims.min
;;; Fact-ids: Name Prims.min; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.min @x0
@x1)
(let ((@lb2 (Prims.op_LessThanOrEqual @x0
@x1)))
(ite (= @lb2
(BoxBool true))
@x0
@x1)))
 

:pattern ((Prims.min @x0
@x1))
:qid equation_Prims.min))
:named equation_Prims.min))

; </end encoding Prims.min>

; <Start encoding Prims.abs>
(declare-fun Prims.abs (Term) Term)
;;;;;;;;;;;;;;;;x:Prims.int -> Prims.Tot Prims.int
(declare-fun Tm_arrow_f82c3fb9ac6610efb97620a59b378092 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_f82c3fb9ac6610efb97620a59b378092
;;; Fact-ids: Name Prims.abs; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_f82c3fb9ac6610efb97620a59b378092 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_f82c3fb9ac6610efb97620a59b378092 @x0)
Tm_type))
:qid kinding_Tm_arrow_f82c3fb9ac6610efb97620a59b378092))
:named kinding_Tm_arrow_f82c3fb9ac6610efb97620a59b378092))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.abs; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_f82c3fb9ac6610efb97620a59b378092 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_f82c3fb9ac6610efb97620a59b378092 @x2)))
:qid Prims_pre_typing_Tm_arrow_f82c3fb9ac6610efb97620a59b378092))
:named Prims_pre_typing_Tm_arrow_f82c3fb9ac6610efb97620a59b378092))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_f82c3fb9ac6610efb97620a59b378092
;;; Fact-ids: Name Prims.abs; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_f82c3fb9ac6610efb97620a59b378092 @x1))
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(HasType (ApplyTT @x0
@x2)
@x1))
 

:pattern ((ApplyTT @x0
@x2))
:qid Prims_interpretation_Tm_arrow_f82c3fb9ac6610efb97620a59b378092.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_f82c3fb9ac6610efb97620a59b378092 @x1)))
:qid Prims_interpretation_Tm_arrow_f82c3fb9ac6610efb97620a59b378092))
:named Prims_interpretation_Tm_arrow_f82c3fb9ac6610efb97620a59b378092))
(declare-fun Prims.abs@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.abs; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.abs@tok
@x0)
(Prims.abs @x0))
 

:pattern ((ApplyTT Prims.abs@tok
@x0))

:pattern ((Prims.abs @x0))
:qid token_correspondence_Prims.abs))
:named token_correspondence_Prims.abs))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.abs; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.abs@tok
(Tm_arrow_f82c3fb9ac6610efb97620a59b378092 Prims.int)))
 

:pattern ((ApplyTT Prims.abs@tok
@x0))

:pattern ((ApplyTT @x0
Prims.abs@tok))
:qid function_token_typing_Prims.abs))
:named function_token_typing_Prims.abs))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.abs; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.int)
(HasType (Prims.abs @x0)
Prims.int))
 

:pattern ((Prims.abs @x0))
:qid typing_Prims.abs))
:named typing_Prims.abs))
;;;;;;;;;;;;;;;;Equation for Prims.abs
;;; Fact-ids: Name Prims.abs; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (Prims.abs @x0)
(let ((@lb1 (Prims.op_GreaterThanOrEqual @x0
(BoxInt 0))))
(ite (= @lb1
(BoxBool true))
@x0
(Prims.op_Minus @x0))))
 

:pattern ((Prims.abs @x0))
:qid equation_Prims.abs))
:named equation_Prims.abs))

; </end encoding Prims.abs>

; <Start encoding Prims.string_of_bool>
(declare-fun Prims.string_of_bool (Term) Term)

(declare-fun Prims.string_of_bool@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.string_of_bool; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.string_of_bool@tok
@x0)
(Prims.string_of_bool @x0))
 

:pattern ((ApplyTT Prims.string_of_bool@tok
@x0))

:pattern ((Prims.string_of_bool @x0))
:qid token_correspondence_Prims.string_of_bool))
:named token_correspondence_Prims.string_of_bool))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.string_of_bool; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.string_of_bool@tok
(Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b Prims.string
Prims.bool)))
 

:pattern ((ApplyTT Prims.string_of_bool@tok
@x0))

:pattern ((ApplyTT @x0
Prims.string_of_bool@tok))
:qid function_token_typing_Prims.string_of_bool))
:named function_token_typing_Prims.string_of_bool))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.string_of_bool; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.bool)
(HasType (Prims.string_of_bool @x0)
Prims.string))
 

:pattern ((Prims.string_of_bool @x0))
:qid typing_Prims.string_of_bool))
:named typing_Prims.string_of_bool))

; </end encoding Prims.string_of_bool>

; <Start encoding Prims.string_of_int>
(declare-fun Prims.string_of_int (Term) Term)

(declare-fun Prims.string_of_int@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.string_of_int; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.string_of_int@tok
@x0)
(Prims.string_of_int @x0))
 

:pattern ((ApplyTT Prims.string_of_int@tok
@x0))

:pattern ((Prims.string_of_int @x0))
:qid token_correspondence_Prims.string_of_int))
:named token_correspondence_Prims.string_of_int))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.string_of_int; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.string_of_int@tok
(Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b Prims.string
Prims.int)))
 

:pattern ((ApplyTT Prims.string_of_int@tok
@x0))

:pattern ((ApplyTT @x0
Prims.string_of_int@tok))
:qid function_token_typing_Prims.string_of_int))
:named function_token_typing_Prims.string_of_int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.string_of_int; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.int)
(HasType (Prims.string_of_int @x0)
Prims.string))
 

:pattern ((Prims.string_of_int @x0))
:qid typing_Prims.string_of_int))
:named typing_Prims.string_of_int))

; </end encoding Prims.string_of_int>

; <Start encoding Prims.normalize_term>
(declare-fun Prims.normalize_term (Term Term) Term)

(declare-fun Prims.normalize_term@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.normalize_term; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.normalize_term@tok
@x0)
@x1)
(Prims.normalize_term @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.normalize_term@tok
@x0)
@x1))

:pattern ((Prims.normalize_term @x0
@x1))
:qid token_correspondence_Prims.normalize_term))
:named token_correspondence_Prims.normalize_term))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.normalize_term; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.normalize_term@tok
Tm_arrow_fa4e3ee4a3dfa402363cd0693fcbfca4))
 

:pattern ((ApplyTT Prims.normalize_term@tok
@x0))

:pattern ((ApplyTT @x0
Prims.normalize_term@tok))
:qid function_token_typing_Prims.normalize_term))
:named function_token_typing_Prims.normalize_term))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.normalize_term; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0))
(HasType (Prims.normalize_term @x0
@x1)
@x0))
 

:pattern ((Prims.normalize_term @x0
@x1))
:qid typing_Prims.normalize_term))
:named typing_Prims.normalize_term))

; </end encoding Prims.normalize_term>

; <Start encoding Prims.normalize>
(declare-fun Prims.normalize (Term) Term)

(declare-fun Prims.normalize@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.normalize; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.normalize@tok
@x0)
(Prims.normalize @x0))
 

:pattern ((ApplyTT Prims.normalize@tok
@x0))

:pattern ((Prims.normalize @x0))
:qid token_correspondence_Prims.normalize))
:named token_correspondence_Prims.normalize))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.normalize; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.normalize@tok
Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
 

:pattern ((ApplyTT Prims.normalize@tok
@x0))

:pattern ((ApplyTT @x0
Prims.normalize@tok))
:qid function_token_typing_Prims.normalize))
:named function_token_typing_Prims.normalize))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.normalize; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.normalize @x0)
Tm_type))
 

:pattern ((Prims.normalize @x0))
:qid typing_Prims.normalize))
:named typing_Prims.normalize))

; </end encoding Prims.normalize>

; <Start encoding Prims.norm_step>
(declare-fun Prims.norm_step () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.norm_step; Namespace Prims
(assert (! (HasType Prims.norm_step
Tm_type)
:named function_token_typing_Prims.norm_step))
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name Prims.norm_step; Namespace Prims
(assert (! (= 730
(Term_constr_id Prims.norm_step))
:named constructor_distinct_Prims.norm_step))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.norm_step; Namespace Prims
(assert (! (forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.norm_step)
(= Prims.norm_step
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.norm_step))
:qid Prims_pretyping_a0ef42db5d6ee51a58f5fc251ed4d148))
:named Prims_pretyping_a0ef42db5d6ee51a58f5fc251ed4d148))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.norm_step; Namespace Prims
(assert (! (HasType Prims.norm_step
Tm_type)
:named typing_Prims.norm_step))

; </end encoding Prims.norm_step>

; <Start encoding Prims.Simpl>
(declare-fun Prims.Simpl () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.Simpl; Namespace Prims
(assert (! (HasType Prims.Simpl
Prims.norm_step)
:named function_token_typing_Prims.Simpl))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.Simpl; Namespace Prims
(assert (! (HasType Prims.Simpl
Prims.norm_step)
:named typing_Prims.Simpl))

; </end encoding Prims.Simpl>

; <Start encoding Prims.WHNF>
(declare-fun Prims.WHNF () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.WHNF; Namespace Prims
(assert (! (HasType Prims.WHNF
Prims.norm_step)
:named function_token_typing_Prims.WHNF))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.WHNF; Namespace Prims
(assert (! (HasType Prims.WHNF
Prims.norm_step)
:named typing_Prims.WHNF))

; </end encoding Prims.WHNF>

; <Start encoding Prims.Primops>
(declare-fun Prims.Primops () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.Primops; Namespace Prims
(assert (! (HasType Prims.Primops
Prims.norm_step)
:named function_token_typing_Prims.Primops))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.Primops; Namespace Prims
(assert (! (HasType Prims.Primops
Prims.norm_step)
:named typing_Prims.Primops))

; </end encoding Prims.Primops>

; <Start encoding Prims.Delta>
(declare-fun Prims.Delta () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.Delta; Namespace Prims
(assert (! (HasType Prims.Delta
Prims.norm_step)
:named function_token_typing_Prims.Delta))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.Delta; Namespace Prims
(assert (! (HasType Prims.Delta
Prims.norm_step)
:named typing_Prims.Delta))

; </end encoding Prims.Delta>

; <Start encoding Prims.Zeta>
(declare-fun Prims.Zeta () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.Zeta; Namespace Prims
(assert (! (HasType Prims.Zeta
Prims.norm_step)
:named function_token_typing_Prims.Zeta))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.Zeta; Namespace Prims
(assert (! (HasType Prims.Zeta
Prims.norm_step)
:named typing_Prims.Zeta))

; </end encoding Prims.Zeta>

; <Start encoding Prims.Iota>
(declare-fun Prims.Iota () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.Iota; Namespace Prims
(assert (! (HasType Prims.Iota
Prims.norm_step)
:named function_token_typing_Prims.Iota))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.Iota; Namespace Prims
(assert (! (HasType Prims.Iota
Prims.norm_step)
:named typing_Prims.Iota))

; </end encoding Prims.Iota>

; <Start encoding Prims.UnfoldOnly>
(declare-fun Prims.UnfoldOnly (Term) Term)
;;;;;;;;;;;;;;;;_0:Prims.list Prims.string -> Prims.Tot Prims.norm_step
(declare-fun Tm_arrow_52c7e04c1aef70d52ef99d2cc9753aed (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_52c7e04c1aef70d52ef99d2cc9753aed
;;; Fact-ids: Name Prims.UnfoldOnly; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_52c7e04c1aef70d52ef99d2cc9753aed @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_52c7e04c1aef70d52ef99d2cc9753aed @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_52c7e04c1aef70d52ef99d2cc9753aed))
:named kinding_Tm_arrow_52c7e04c1aef70d52ef99d2cc9753aed))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.UnfoldOnly; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_52c7e04c1aef70d52ef99d2cc9753aed @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_52c7e04c1aef70d52ef99d2cc9753aed @x2
@x3)))
:qid Prims_pre_typing_Tm_arrow_52c7e04c1aef70d52ef99d2cc9753aed))
:named Prims_pre_typing_Tm_arrow_52c7e04c1aef70d52ef99d2cc9753aed))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_52c7e04c1aef70d52ef99d2cc9753aed
;;; Fact-ids: Name Prims.UnfoldOnly; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_52c7e04c1aef70d52ef99d2cc9753aed @x1
@x2))
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Prims.list @x2))
(HasType (ApplyTT @x0
@x3)
@x1))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_arrow_52c7e04c1aef70d52ef99d2cc9753aed.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_52c7e04c1aef70d52ef99d2cc9753aed @x1
@x2)))
:qid Prims_interpretation_Tm_arrow_52c7e04c1aef70d52ef99d2cc9753aed))
:named Prims_interpretation_Tm_arrow_52c7e04c1aef70d52ef99d2cc9753aed))
(declare-fun Prims.UnfoldOnly@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.UnfoldOnly; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.UnfoldOnly@tok
@x0)
(Prims.UnfoldOnly @x0))
 

:pattern ((ApplyTT Prims.UnfoldOnly@tok
@x0))

:pattern ((Prims.UnfoldOnly @x0))
:qid token_correspondence_Prims.UnfoldOnly))
:named token_correspondence_Prims.UnfoldOnly))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.UnfoldOnly; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.UnfoldOnly@tok
(Tm_arrow_52c7e04c1aef70d52ef99d2cc9753aed Prims.norm_step
Prims.string)))
 

:pattern ((ApplyTT Prims.UnfoldOnly@tok
@x0))

:pattern ((ApplyTT @x0
Prims.UnfoldOnly@tok))
:qid function_token_typing_Prims.UnfoldOnly))
:named function_token_typing_Prims.UnfoldOnly))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.UnfoldOnly; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
(Prims.list Prims.string))
(HasType (Prims.UnfoldOnly @x0)
Prims.norm_step))
 

:pattern ((Prims.UnfoldOnly @x0))
:qid typing_Prims.UnfoldOnly))
:named typing_Prims.UnfoldOnly))

; </end encoding Prims.UnfoldOnly>

; <Start encoding Prims.norm_step_haseq>
;;;;;;;;;;;;;;;;Assumption: norm_step_haseq
;;; Fact-ids: Name Prims.norm_step_haseq; Namespace Prims
(assert (! 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(327,0-334,43); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(327,0-334,43)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(327,0-334,43); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(327,0-334,43)
(Prims.hasEq Prims.norm_step)
)

:named assumption_Prims.norm_step_haseq))

; </end encoding Prims.norm_step_haseq>

; <Start encoding Prims.uu___is_Simpl>
(declare-fun Prims.uu___is_Simpl (Term) Term)

(declare-fun Prims.uu___is_Simpl@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.uu___is_Simpl; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.uu___is_Simpl@tok
@x0)
(Prims.uu___is_Simpl @x0))
 

:pattern ((ApplyTT Prims.uu___is_Simpl@tok
@x0))

:pattern ((Prims.uu___is_Simpl @x0))
:qid token_correspondence_Prims.uu___is_Simpl))
:named token_correspondence_Prims.uu___is_Simpl))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.uu___is_Simpl; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.uu___is_Simpl@tok
(Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b Prims.bool
Prims.norm_step)))
 

:pattern ((ApplyTT Prims.uu___is_Simpl@tok
@x0))

:pattern ((ApplyTT @x0
Prims.uu___is_Simpl@tok))
:qid function_token_typing_Prims.uu___is_Simpl))
:named function_token_typing_Prims.uu___is_Simpl))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Simpl; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.norm_step)
(HasType (Prims.uu___is_Simpl @x0)
Prims.bool))
 

:pattern ((Prims.uu___is_Simpl @x0))
:qid typing_Prims.uu___is_Simpl))
:named typing_Prims.uu___is_Simpl))

; </end encoding Prims.uu___is_Simpl>

; <Start encoding Prims.uu___is_WHNF>
(declare-fun Prims.uu___is_WHNF (Term) Term)

(declare-fun Prims.uu___is_WHNF@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.uu___is_WHNF; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.uu___is_WHNF@tok
@x0)
(Prims.uu___is_WHNF @x0))
 

:pattern ((ApplyTT Prims.uu___is_WHNF@tok
@x0))

:pattern ((Prims.uu___is_WHNF @x0))
:qid token_correspondence_Prims.uu___is_WHNF))
:named token_correspondence_Prims.uu___is_WHNF))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.uu___is_WHNF; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.uu___is_WHNF@tok
(Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b Prims.bool
Prims.norm_step)))
 

:pattern ((ApplyTT Prims.uu___is_WHNF@tok
@x0))

:pattern ((ApplyTT @x0
Prims.uu___is_WHNF@tok))
:qid function_token_typing_Prims.uu___is_WHNF))
:named function_token_typing_Prims.uu___is_WHNF))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_WHNF; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.norm_step)
(HasType (Prims.uu___is_WHNF @x0)
Prims.bool))
 

:pattern ((Prims.uu___is_WHNF @x0))
:qid typing_Prims.uu___is_WHNF))
:named typing_Prims.uu___is_WHNF))

; </end encoding Prims.uu___is_WHNF>

; <Start encoding Prims.uu___is_Primops>
(declare-fun Prims.uu___is_Primops (Term) Term)

(declare-fun Prims.uu___is_Primops@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.uu___is_Primops; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.uu___is_Primops@tok
@x0)
(Prims.uu___is_Primops @x0))
 

:pattern ((ApplyTT Prims.uu___is_Primops@tok
@x0))

:pattern ((Prims.uu___is_Primops @x0))
:qid token_correspondence_Prims.uu___is_Primops))
:named token_correspondence_Prims.uu___is_Primops))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.uu___is_Primops; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.uu___is_Primops@tok
(Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b Prims.bool
Prims.norm_step)))
 

:pattern ((ApplyTT Prims.uu___is_Primops@tok
@x0))

:pattern ((ApplyTT @x0
Prims.uu___is_Primops@tok))
:qid function_token_typing_Prims.uu___is_Primops))
:named function_token_typing_Prims.uu___is_Primops))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Primops; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.norm_step)
(HasType (Prims.uu___is_Primops @x0)
Prims.bool))
 

:pattern ((Prims.uu___is_Primops @x0))
:qid typing_Prims.uu___is_Primops))
:named typing_Prims.uu___is_Primops))

; </end encoding Prims.uu___is_Primops>

; <Start encoding Prims.uu___is_Delta>
(declare-fun Prims.uu___is_Delta (Term) Term)

(declare-fun Prims.uu___is_Delta@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.uu___is_Delta; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.uu___is_Delta@tok
@x0)
(Prims.uu___is_Delta @x0))
 

:pattern ((ApplyTT Prims.uu___is_Delta@tok
@x0))

:pattern ((Prims.uu___is_Delta @x0))
:qid token_correspondence_Prims.uu___is_Delta))
:named token_correspondence_Prims.uu___is_Delta))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.uu___is_Delta; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.uu___is_Delta@tok
(Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b Prims.bool
Prims.norm_step)))
 

:pattern ((ApplyTT Prims.uu___is_Delta@tok
@x0))

:pattern ((ApplyTT @x0
Prims.uu___is_Delta@tok))
:qid function_token_typing_Prims.uu___is_Delta))
:named function_token_typing_Prims.uu___is_Delta))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Delta; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.norm_step)
(HasType (Prims.uu___is_Delta @x0)
Prims.bool))
 

:pattern ((Prims.uu___is_Delta @x0))
:qid typing_Prims.uu___is_Delta))
:named typing_Prims.uu___is_Delta))

; </end encoding Prims.uu___is_Delta>

; <Start encoding Prims.uu___is_Zeta>
(declare-fun Prims.uu___is_Zeta (Term) Term)

(declare-fun Prims.uu___is_Zeta@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.uu___is_Zeta; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.uu___is_Zeta@tok
@x0)
(Prims.uu___is_Zeta @x0))
 

:pattern ((ApplyTT Prims.uu___is_Zeta@tok
@x0))

:pattern ((Prims.uu___is_Zeta @x0))
:qid token_correspondence_Prims.uu___is_Zeta))
:named token_correspondence_Prims.uu___is_Zeta))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.uu___is_Zeta; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.uu___is_Zeta@tok
(Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b Prims.bool
Prims.norm_step)))
 

:pattern ((ApplyTT Prims.uu___is_Zeta@tok
@x0))

:pattern ((ApplyTT @x0
Prims.uu___is_Zeta@tok))
:qid function_token_typing_Prims.uu___is_Zeta))
:named function_token_typing_Prims.uu___is_Zeta))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Zeta; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.norm_step)
(HasType (Prims.uu___is_Zeta @x0)
Prims.bool))
 

:pattern ((Prims.uu___is_Zeta @x0))
:qid typing_Prims.uu___is_Zeta))
:named typing_Prims.uu___is_Zeta))

; </end encoding Prims.uu___is_Zeta>

; <Start encoding Prims.uu___is_Iota>
(declare-fun Prims.uu___is_Iota (Term) Term)

(declare-fun Prims.uu___is_Iota@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.uu___is_Iota; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.uu___is_Iota@tok
@x0)
(Prims.uu___is_Iota @x0))
 

:pattern ((ApplyTT Prims.uu___is_Iota@tok
@x0))

:pattern ((Prims.uu___is_Iota @x0))
:qid token_correspondence_Prims.uu___is_Iota))
:named token_correspondence_Prims.uu___is_Iota))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.uu___is_Iota; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.uu___is_Iota@tok
(Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b Prims.bool
Prims.norm_step)))
 

:pattern ((ApplyTT Prims.uu___is_Iota@tok
@x0))

:pattern ((ApplyTT @x0
Prims.uu___is_Iota@tok))
:qid function_token_typing_Prims.uu___is_Iota))
:named function_token_typing_Prims.uu___is_Iota))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Iota; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.norm_step)
(HasType (Prims.uu___is_Iota @x0)
Prims.bool))
 

:pattern ((Prims.uu___is_Iota @x0))
:qid typing_Prims.uu___is_Iota))
:named typing_Prims.uu___is_Iota))

; </end encoding Prims.uu___is_Iota>

; <Start encoding Prims.uu___is_UnfoldOnly>
(declare-fun Prims.uu___is_UnfoldOnly (Term) Term)

(declare-fun Prims.uu___is_UnfoldOnly@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.uu___is_UnfoldOnly; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.uu___is_UnfoldOnly@tok
@x0)
(Prims.uu___is_UnfoldOnly @x0))
 

:pattern ((ApplyTT Prims.uu___is_UnfoldOnly@tok
@x0))

:pattern ((Prims.uu___is_UnfoldOnly @x0))
:qid token_correspondence_Prims.uu___is_UnfoldOnly))
:named token_correspondence_Prims.uu___is_UnfoldOnly))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.uu___is_UnfoldOnly; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.uu___is_UnfoldOnly@tok
(Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b Prims.bool
Prims.norm_step)))
 

:pattern ((ApplyTT Prims.uu___is_UnfoldOnly@tok
@x0))

:pattern ((ApplyTT @x0
Prims.uu___is_UnfoldOnly@tok))
:qid function_token_typing_Prims.uu___is_UnfoldOnly))
:named function_token_typing_Prims.uu___is_UnfoldOnly))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_UnfoldOnly; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.norm_step)
(HasType (Prims.uu___is_UnfoldOnly @x0)
Prims.bool))
 

:pattern ((Prims.uu___is_UnfoldOnly @x0))
:qid typing_Prims.uu___is_UnfoldOnly))
:named typing_Prims.uu___is_UnfoldOnly))

; </end encoding Prims.uu___is_UnfoldOnly>

; <Start encoding Prims.__proj__UnfoldOnly__item___0>
(declare-fun Prims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.__proj__UnfoldOnly__item___0; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Prims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa @x0)
Tm_type)
 

:pattern ((HasType (Prims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa @x0)
Tm_type))
:qid refinement_kinding_Prims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa))
:named refinement_kinding_Prims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: Name Prims.__proj__UnfoldOnly__item___0; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (exists ((@x1 Term))
 (! (and (HasType @x1
@x0)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(334,6-334,16); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(334,6-334,16)
(BoxBool_proj_0 (Prims.uu___is_UnfoldOnly @x1))
)
 
;;no pats
:qid ref_valid_Prims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa.1))
(Valid (Prims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa @x0)))
 

:pattern ((Valid (Prims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa @x0)))
:qid ref_valid_Prims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa))
:named ref_valid_Prims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa))
;;;;;;;;;;;;;;;;(uu___10580:Prims.norm_step{ Prims.b2t (UnfoldOnly? uu___10580) })
;;; Fact-ids: Name Prims.__proj__UnfoldOnly__item___0; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Prims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa @x2))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(334,6-334,16); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(334,6-334,16)
(BoxBool_proj_0 (Prims.uu___is_UnfoldOnly @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa @x2)))
:qid refinement_interpretation_Prims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa))
:named refinement_interpretation_Prims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa))
;;;;;;;;;;;;;;;;haseq for Prims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa
;;; Fact-ids: Name Prims.__proj__UnfoldOnly__item___0; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Prims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa @x0)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Prims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa @x0))))
:qid haseqPrims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa))
:named haseqPrims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa))
(declare-fun Prims.__proj__UnfoldOnly__item___0 (Term) Term)
;;;;;;;;;;;;;;;;projectee:(uu___10590:Prims.norm_step{ Prims.b2t (UnfoldOnly? uu___10590) }) ->...
(declare-fun Tm_arrow_d557d6f968371c9d41d751b620a29cb0 (Term Term) Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_d557d6f968371c9d41d751b620a29cb0
;;; Fact-ids: Name Prims.__proj__UnfoldOnly__item___0; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_d557d6f968371c9d41d751b620a29cb0 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_d557d6f968371c9d41d751b620a29cb0 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_d557d6f968371c9d41d751b620a29cb0))
:named kinding_Tm_arrow_d557d6f968371c9d41d751b620a29cb0))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.__proj__UnfoldOnly__item___0; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_d557d6f968371c9d41d751b620a29cb0 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_d557d6f968371c9d41d751b620a29cb0 @x2
@x3)))
:qid Prims_pre_typing_Tm_arrow_d557d6f968371c9d41d751b620a29cb0))
:named Prims_pre_typing_Tm_arrow_d557d6f968371c9d41d751b620a29cb0))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d557d6f968371c9d41d751b620a29cb0
;;; Fact-ids: Name Prims.__proj__UnfoldOnly__item___0; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_d557d6f968371c9d41d751b620a29cb0 @x1
@x2))
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Prims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa @x2))
(HasType (ApplyTT @x0
@x3)
(Prims.list @x1)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_arrow_d557d6f968371c9d41d751b620a29cb0.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_d557d6f968371c9d41d751b620a29cb0 @x1
@x2)))
:qid Prims_interpretation_Tm_arrow_d557d6f968371c9d41d751b620a29cb0))
:named Prims_interpretation_Tm_arrow_d557d6f968371c9d41d751b620a29cb0))
(declare-fun Prims.__proj__UnfoldOnly__item___0@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.__proj__UnfoldOnly__item___0; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.__proj__UnfoldOnly__item___0@tok
@x0)
(Prims.__proj__UnfoldOnly__item___0 @x0))
 

:pattern ((ApplyTT Prims.__proj__UnfoldOnly__item___0@tok
@x0))

:pattern ((Prims.__proj__UnfoldOnly__item___0 @x0))
:qid token_correspondence_Prims.__proj__UnfoldOnly__item___0))
:named token_correspondence_Prims.__proj__UnfoldOnly__item___0))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__proj__UnfoldOnly__item___0; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.__proj__UnfoldOnly__item___0@tok
(Tm_arrow_d557d6f968371c9d41d751b620a29cb0 Prims.string
Prims.norm_step)))
 

:pattern ((ApplyTT Prims.__proj__UnfoldOnly__item___0@tok
@x0))

:pattern ((ApplyTT @x0
Prims.__proj__UnfoldOnly__item___0@tok))
:qid function_token_typing_Prims.__proj__UnfoldOnly__item___0))
:named function_token_typing_Prims.__proj__UnfoldOnly__item___0))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.__proj__UnfoldOnly__item___0; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
(Prims_Tm_refine_28dc1b0cf5856b7b357f1e3845ca1cfa Prims.norm_step))
(HasType (Prims.__proj__UnfoldOnly__item___0 @x0)
(Prims.list Prims.string)))
 

:pattern ((Prims.__proj__UnfoldOnly__item___0 @x0))
:qid typing_Prims.__proj__UnfoldOnly__item___0))
:named typing_Prims.__proj__UnfoldOnly__item___0))

; </end encoding Prims.__proj__UnfoldOnly__item___0>

; <Start encoding Prims.simplify>
(declare-fun Prims.simplify () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.simplify; Namespace Prims
(assert (! (HasType Prims.simplify
Prims.norm_step)
:named function_token_typing_Prims.simplify))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.simplify; Namespace Prims
(assert (! (HasType Prims.simplify
Prims.norm_step)
:named typing_Prims.simplify))
;;;;;;;;;;;;;;;;Equation for Prims.simplify
;;; Fact-ids: Name Prims.simplify; Namespace Prims
(assert (! (= Prims.simplify
Prims.Simpl)
:named equation_Prims.simplify))

; </end encoding Prims.simplify>

; <Start encoding Prims.whnf>
(declare-fun Prims.whnf () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.whnf; Namespace Prims
(assert (! (HasType Prims.whnf
Prims.norm_step)
:named function_token_typing_Prims.whnf))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.whnf; Namespace Prims
(assert (! (HasType Prims.whnf
Prims.norm_step)
:named typing_Prims.whnf))
;;;;;;;;;;;;;;;;Equation for Prims.whnf
;;; Fact-ids: Name Prims.whnf; Namespace Prims
(assert (! (= Prims.whnf
Prims.WHNF)
:named equation_Prims.whnf))

; </end encoding Prims.whnf>

; <Start encoding Prims.primops>
(declare-fun Prims.primops () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.primops; Namespace Prims
(assert (! (HasType Prims.primops
Prims.norm_step)
:named function_token_typing_Prims.primops))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.primops; Namespace Prims
(assert (! (HasType Prims.primops
Prims.norm_step)
:named typing_Prims.primops))
;;;;;;;;;;;;;;;;Equation for Prims.primops
;;; Fact-ids: Name Prims.primops; Namespace Prims
(assert (! (= Prims.primops
Prims.Primops)
:named equation_Prims.primops))

; </end encoding Prims.primops>

; <Start encoding Prims.delta>
(declare-fun Prims.delta () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.delta; Namespace Prims
(assert (! (HasType Prims.delta
Prims.norm_step)
:named function_token_typing_Prims.delta))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.delta; Namespace Prims
(assert (! (HasType Prims.delta
Prims.norm_step)
:named typing_Prims.delta))
;;;;;;;;;;;;;;;;Equation for Prims.delta
;;; Fact-ids: Name Prims.delta; Namespace Prims
(assert (! (= Prims.delta
Prims.Delta)
:named equation_Prims.delta))

; </end encoding Prims.delta>

; <Start encoding Prims.zeta>
(declare-fun Prims.zeta () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.zeta; Namespace Prims
(assert (! (HasType Prims.zeta
Prims.norm_step)
:named function_token_typing_Prims.zeta))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.zeta; Namespace Prims
(assert (! (HasType Prims.zeta
Prims.norm_step)
:named typing_Prims.zeta))
;;;;;;;;;;;;;;;;Equation for Prims.zeta
;;; Fact-ids: Name Prims.zeta; Namespace Prims
(assert (! (= Prims.zeta
Prims.Zeta)
:named equation_Prims.zeta))

; </end encoding Prims.zeta>

; <Start encoding Prims.iota>
(declare-fun Prims.iota () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.iota; Namespace Prims
(assert (! (HasType Prims.iota
Prims.norm_step)
:named function_token_typing_Prims.iota))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.iota; Namespace Prims
(assert (! (HasType Prims.iota
Prims.norm_step)
:named typing_Prims.iota))
;;;;;;;;;;;;;;;;Equation for Prims.iota
;;; Fact-ids: Name Prims.iota; Namespace Prims
(assert (! (= Prims.iota
Prims.Iota)
:named equation_Prims.iota))

; </end encoding Prims.iota>

; <Start encoding Prims.delta_only>
(declare-fun Prims.delta_only (Term) Term)

(declare-fun Prims.delta_only@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.delta_only; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.delta_only@tok
@x0)
(Prims.delta_only @x0))
 

:pattern ((ApplyTT Prims.delta_only@tok
@x0))

:pattern ((Prims.delta_only @x0))
:qid token_correspondence_Prims.delta_only))
:named token_correspondence_Prims.delta_only))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.delta_only; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.delta_only@tok
(Tm_arrow_52c7e04c1aef70d52ef99d2cc9753aed Prims.norm_step
Prims.string)))
 

:pattern ((ApplyTT Prims.delta_only@tok
@x0))

:pattern ((ApplyTT @x0
Prims.delta_only@tok))
:qid function_token_typing_Prims.delta_only))
:named function_token_typing_Prims.delta_only))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.delta_only; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
(Prims.list Prims.string))
(HasType (Prims.delta_only @x0)
Prims.norm_step))
 

:pattern ((Prims.delta_only @x0))
:qid typing_Prims.delta_only))
:named typing_Prims.delta_only))
;;;;;;;;;;;;;;;;Equation for Prims.delta_only
;;; Fact-ids: Name Prims.delta_only; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (Prims.delta_only @x0)
(Prims.UnfoldOnly @x0))
 

:pattern ((Prims.delta_only @x0))
:qid equation_Prims.delta_only))
:named equation_Prims.delta_only))

; </end encoding Prims.delta_only>

; <Start encoding Prims.norm>
(declare-fun Prims.norm (Term Term Term) Term)
;;;;;;;;;;;;;;;;s:Prims.list Prims.norm_step -> x:a -> Prims.Tot a
(declare-fun Tm_arrow_cff63087848ae2e59f28234902699c0f (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_cff63087848ae2e59f28234902699c0f
;;; Fact-ids: Name Prims.norm; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_cff63087848ae2e59f28234902699c0f @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_cff63087848ae2e59f28234902699c0f @x0)
Tm_type))
:qid kinding_Tm_arrow_cff63087848ae2e59f28234902699c0f))
:named kinding_Tm_arrow_cff63087848ae2e59f28234902699c0f))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.norm; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_cff63087848ae2e59f28234902699c0f @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_cff63087848ae2e59f28234902699c0f @x2)))
:qid Prims_pre_typing_Tm_arrow_cff63087848ae2e59f28234902699c0f))
:named Prims_pre_typing_Tm_arrow_cff63087848ae2e59f28234902699c0f))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_cff63087848ae2e59f28234902699c0f
;;; Fact-ids: Name Prims.norm; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_cff63087848ae2e59f28234902699c0f @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
(Prims.list @x1))
(HasType @x3
Tm_type)
(HasType @x4
@x3))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4))
:qid Prims_interpretation_Tm_arrow_cff63087848ae2e59f28234902699c0f.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_cff63087848ae2e59f28234902699c0f @x1)))
:qid Prims_interpretation_Tm_arrow_cff63087848ae2e59f28234902699c0f))
:named Prims_interpretation_Tm_arrow_cff63087848ae2e59f28234902699c0f))
(declare-fun Prims.norm@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.norm; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.norm@tok
@x0)
@x1)
@x2)
(Prims.norm @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.norm@tok
@x0)
@x1)
@x2))

:pattern ((Prims.norm @x0
@x1
@x2))
:qid token_correspondence_Prims.norm))
:named token_correspondence_Prims.norm))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.norm; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.norm@tok
(Tm_arrow_cff63087848ae2e59f28234902699c0f Prims.norm_step)))
 

:pattern ((ApplyTT Prims.norm@tok
@x0))

:pattern ((ApplyTT @x0
Prims.norm@tok))
:qid function_token_typing_Prims.norm))
:named function_token_typing_Prims.norm))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.norm; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
(Prims.list Prims.norm_step))
(HasType @x1
Tm_type)
(HasType @x2
@x1))
(HasType (Prims.norm @x0
@x1
@x2)
@x1))
 

:pattern ((Prims.norm @x0
@x1
@x2))
:qid typing_Prims.norm))
:named typing_Prims.norm))

; </end encoding Prims.norm>

; <Start encoding Prims.assert_norm>
(declare-fun Prims.assert_norm (Term) Term)
(declare-fun Non_total_Tm_arrow_749 () Term)
;;;;;;;;;;;;;;;;Typing for non-total arrows
;;; Fact-ids: Name Prims.assert_norm; Namespace Prims
(assert (! (HasType Non_total_Tm_arrow_749
Tm_type)
:named Prims_non_total_function_typing_Non_total_Tm_arrow_749))
;;;;;;;;;;;;;;;;pre_typing_Non_total_Tm_arrow_749
;;; Fact-ids: Name Prims.assert_norm; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Non_total_Tm_arrow_749)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Non_total_Tm_arrow_749))
:qid Prims_pre_typing_Non_total_Tm_arrow_749))
:named Prims_pre_typing_Non_total_Tm_arrow_749))
(declare-fun Prims.assert_norm@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Prims.assert_norm; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT Prims.assert_norm@tok
@x0)
(Prims.assert_norm @x0))
 

:pattern ((ApplyTT Prims.assert_norm@tok
@x0))

:pattern ((Prims.assert_norm @x0))
:qid token_correspondence_Prims.assert_norm))
:named token_correspondence_Prims.assert_norm))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.assert_norm; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType Prims.assert_norm@tok
Non_total_Tm_arrow_749))
 

:pattern ((ApplyTT Prims.assert_norm@tok
@x0))

:pattern ((ApplyTT @x0
Prims.assert_norm@tok))
:qid function_token_typing_Prims.assert_norm))
:named function_token_typing_Prims.assert_norm))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.assert_norm; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.assert_norm @x0)
Prims.unit))
 

:pattern ((Prims.assert_norm @x0))
:qid typing_Prims.assert_norm))
:named typing_Prims.assert_norm))
;;;;;;;;;;;;;;;;Equation for Prims.assert_norm
;;; Fact-ids: Name Prims.assert_norm; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (= (Prims.assert_norm @x0)
Tm_unit)
 

:pattern ((Prims.assert_norm @x0))
:qid equation_Prims.assert_norm))
:named equation_Prims.assert_norm))

; </end encoding Prims.assert_norm>

; End Externals for module Prims

; 
(push)

; Externals for module FStar.Pervasives.Native

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.option (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.option@x0 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.option@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.None (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.None_a (Term) Term)
;;;;;;;;;;;;;;;;Prims.Tot (FStar.Pervasives.Native.option a)
(declare-fun Tm_arrow_61613ad0fe4e0bf49515f58291a6d65c () Term)
;;;;;;;;;;;;;;;;data constructor proxy: None
(declare-fun FStar.Pervasives.Native.None@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Some (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_v (Term) Term)
;;;;;;;;;;;;;;;;v:a -> Prims.Tot (FStar.Pervasives.Native.option a)
(declare-fun Tm_arrow_df8cdbdef952cf059d2e5d9fe5b8bf02 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Some
(declare-fun FStar.Pervasives.Native.Some@tok () Term)

; <Start encoding FStar.Pervasives.Native.option>

; <start constructor FStar.Pervasives.Native.option>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (= 1030
(Term_constr_id (FStar.Pervasives.Native.option @x0)))
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid constructor_distinct_FStar.Pervasives.Native.option))
:named constructor_distinct_FStar.Pervasives.Native.option))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.option ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1030)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.Native.option @x0))
 
;;no pats
:qid is-FStar.Pervasives.Native.option))))

; </end constructor FStar.Pervasives.Native.option>
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (= 1031
(Term_constr_id FStar.Pervasives.Native.option@tok))
:named fresh_token_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.Native.option@tok
@x0)
(FStar.Pervasives.Native.option @x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.option@tok
@x0))

:pattern ((FStar.Pervasives.Native.option @x0))
:qid token_correspondence_FStar.Pervasives.Native.option@tok))
:named token_correspondence_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.option@tok))
:named pre_kinding_FStar.Pervasives.Native.option@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Pervasives.Native.option @x0)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid kinding_FStar.Pervasives.Native.option@tok))
:named kinding_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.option @x2))
(= (FStar.Pervasives.Native.option @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.option @x2)))
:qid FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125))
:named FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125))

; </end encoding FStar.Pervasives.Native.option>

; <Start encoding FStar.Pervasives.Native.None>

; <start constructor FStar.Pervasives.Native.None>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (= 1037
(Term_constr_id (FStar.Pervasives.Native.None @x0)))
 

:pattern ((FStar.Pervasives.Native.None @x0))
:qid constructor_distinct_FStar.Pervasives.Native.None))
:named constructor_distinct_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (= (FStar.Pervasives.Native.None_a (FStar.Pervasives.Native.None @x0))
@x0)
 

:pattern ((FStar.Pervasives.Native.None @x0))
:qid projection_inverse_FStar.Pervasives.Native.None_a))
:named projection_inverse_FStar.Pervasives.Native.None_a))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.None ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1037)
(= __@x0
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.None_a __@x0)))))

; </end constructor FStar.Pervasives.Native.None>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_61613ad0fe4e0bf49515f58291a6d65c
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_61613ad0fe4e0bf49515f58291a6d65c
Tm_type)
:named kinding_Tm_arrow_61613ad0fe4e0bf49515f58291a6d65c))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_61613ad0fe4e0bf49515f58291a6d65c)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_61613ad0fe4e0bf49515f58291a6d65c))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_61613ad0fe4e0bf49515f58291a6d65c))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_61613ad0fe4e0bf49515f58291a6d65c))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_61613ad0fe4e0bf49515f58291a6d65c
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_61613ad0fe4e0bf49515f58291a6d65c)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_type)
(HasType (ApplyTT @x0
@x1)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_61613ad0fe4e0bf49515f58291a6d65c.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_61613ad0fe4e0bf49515f58291a6d65c))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_61613ad0fe4e0bf49515f58291a6d65c))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_61613ad0fe4e0bf49515f58291a6d65c))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (= 1040
(Term_constr_id FStar.Pervasives.Native.None@tok))
:named fresh_token_FStar.Pervasives.Native.None@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.None@tok
Tm_arrow_61613ad0fe4e0bf49515f58291a6d65c))
 

:pattern ((ApplyTT FStar.Pervasives.Native.None@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.None@tok))
:qid typing_tok_FStar.Pervasives.Native.None@tok))
:named typing_tok_FStar.Pervasives.Native.None@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.Native.None@tok
@x0)
(FStar.Pervasives.Native.None @x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.None@tok
@x0))
:qid equality_tok_FStar.Pervasives.Native.None@tok))
:named equality_tok_FStar.Pervasives.Native.None@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x1)))
:qid data_typing_intro_FStar.Pervasives.Native.None@tok))
:named data_typing_intro_FStar.Pervasives.Native.None@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x2))
(and (HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x1
Tm_type)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x2)))
:qid data_elim_FStar.Pervasives.Native.None))
:named data_elim_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! true
:named subterm_ordering_FStar.Pervasives.Native.None))

; </end encoding FStar.Pervasives.Native.None>

; <Start encoding FStar.Pervasives.Native.Some>

; <start constructor FStar.Pervasives.Native.Some>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= 1042
(Term_constr_id (FStar.Pervasives.Native.Some @x0
@x1)))
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.Native.Some))
:named constructor_distinct_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.Some_a (FStar.Pervasives.Native.Some @x0
@x1))
@x0)
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Native.Some_a))
:named projection_inverse_FStar.Pervasives.Native.Some_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.Some_v (FStar.Pervasives.Native.Some @x0
@x1))
@x1)
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Native.Some_v))
:named projection_inverse_FStar.Pervasives.Native.Some_v))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Some ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1042)
(= __@x0
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.Some_a __@x0)
(FStar.Pervasives.Native.Some_v __@x0)))))

; </end constructor FStar.Pervasives.Native.Some>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_df8cdbdef952cf059d2e5d9fe5b8bf02
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_df8cdbdef952cf059d2e5d9fe5b8bf02
Tm_type)
:named kinding_Tm_arrow_df8cdbdef952cf059d2e5d9fe5b8bf02))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_df8cdbdef952cf059d2e5d9fe5b8bf02)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_df8cdbdef952cf059d2e5d9fe5b8bf02))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_df8cdbdef952cf059d2e5d9fe5b8bf02))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_df8cdbdef952cf059d2e5d9fe5b8bf02))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_df8cdbdef952cf059d2e5d9fe5b8bf02
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_df8cdbdef952cf059d2e5d9fe5b8bf02)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_df8cdbdef952cf059d2e5d9fe5b8bf02.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_df8cdbdef952cf059d2e5d9fe5b8bf02))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_df8cdbdef952cf059d2e5d9fe5b8bf02))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_df8cdbdef952cf059d2e5d9fe5b8bf02))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (= 1045
(Term_constr_id FStar.Pervasives.Native.Some@tok))
:named fresh_token_FStar.Pervasives.Native.Some@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.Some@tok
Tm_arrow_df8cdbdef952cf059d2e5d9fe5b8bf02))
 

:pattern ((ApplyTT FStar.Pervasives.Native.Some@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.Some@tok))
:qid typing_tok_FStar.Pervasives.Native.Some@tok))
:named typing_tok_FStar.Pervasives.Native.Some@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.Native.Some@tok
@x0)
@x1)
(FStar.Pervasives.Native.Some @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.Native.Some@tok
@x0)
@x1))
:qid equality_tok_FStar.Pervasives.Native.Some@tok))
:named equality_tok_FStar.Pervasives.Native.Some@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x1)))
:qid data_typing_intro_FStar.Pervasives.Native.Some@tok))
:named data_typing_intro_FStar.Pervasives.Native.Some@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3))
(and (HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x2
@x3)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3)))
:qid data_elim_FStar.Pervasives.Native.Some))
:named data_elim_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3))
(Valid (Precedes @x2
(FStar.Pervasives.Native.Some @x1
@x2))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3)))
:qid subterm_ordering_FStar.Pervasives.Native.Some))
:named subterm_ordering_FStar.Pervasives.Native.Some))

; </end encoding FStar.Pervasives.Native.Some>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.Native.option @x2))
(or (and (is-FStar.Pervasives.Native.None @x1)
(= @x2
(FStar.Pervasives.Native.None_a @x1)))
(and (is-FStar.Pervasives.Native.Some @x1)
(= @x2
(FStar.Pervasives.Native.Some_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.Native.option @x2)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.option))
:named fuel_guarded_inversion_FStar.Pervasives.Native.option))

; </end encoding >

; <Start encoding FStar.Pervasives.Native.option_haseq>
;;;;;;;;;;;;;;;;Assumption: option_haseq
;;; Fact-ids: Name FStar.Pervasives.Native.option_haseq; Namespace FStar.Pervasives.Native
(assert (! 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(4,0-6,26); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(4,0-6,26)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(4,0-6,26); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(4,0-6,26)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(4,0-6,26); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(4,0-6,26)
(Prims.hasEq @x0)
)
)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(4,0-6,26); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(4,0-6,26)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(4,0-6,26); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(4,0-6,26)
(Prims.hasEq (FStar.Pervasives.Native.option @x0))
)
)
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.option @x0)))
:qid assumption_FStar.Pervasives.Native.option_haseq))

:named assumption_FStar.Pervasives.Native.option_haseq))

; </end encoding FStar.Pervasives.Native.option_haseq>

; <Start encoding FStar.Pervasives.Native.uu___is_None>
(declare-fun FStar.Pervasives.Native.uu___is_None (Term Term) Term)
;;;;;;;;;;;;;;;;projectee:FStar.Pervasives.Native.option a -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_6d32d43d8787bb16acca18c75ecbe1b1 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_6d32d43d8787bb16acca18c75ecbe1b1
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_6d32d43d8787bb16acca18c75ecbe1b1 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_6d32d43d8787bb16acca18c75ecbe1b1 @x0)
Tm_type))
:qid kinding_Tm_arrow_6d32d43d8787bb16acca18c75ecbe1b1))
:named kinding_Tm_arrow_6d32d43d8787bb16acca18c75ecbe1b1))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_6d32d43d8787bb16acca18c75ecbe1b1 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_6d32d43d8787bb16acca18c75ecbe1b1 @x2)))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_6d32d43d8787bb16acca18c75ecbe1b1))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_6d32d43d8787bb16acca18c75ecbe1b1))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_6d32d43d8787bb16acca18c75ecbe1b1
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_6d32d43d8787bb16acca18c75ecbe1b1 @x1))
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.Native.option @x2)))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x1))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_6d32d43d8787bb16acca18c75ecbe1b1.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_6d32d43d8787bb16acca18c75ecbe1b1 @x1)))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_6d32d43d8787bb16acca18c75ecbe1b1))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_6d32d43d8787bb16acca18c75ecbe1b1))
(declare-fun FStar.Pervasives.Native.uu___is_None@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.Native.uu___is_None@tok
@x0)
@x1)
(FStar.Pervasives.Native.uu___is_None @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.Native.uu___is_None@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid token_correspondence_FStar.Pervasives.Native.uu___is_None))
:named token_correspondence_FStar.Pervasives.Native.uu___is_None))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.uu___is_None@tok
(Tm_arrow_6d32d43d8787bb16acca18c75ecbe1b1 Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.Native.uu___is_None@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.uu___is_None@tok))
:qid function_token_typing_FStar.Pervasives.Native.uu___is_None))
:named function_token_typing_FStar.Pervasives.Native.uu___is_None))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native.option @x0)))
(HasType (FStar.Pervasives.Native.uu___is_None @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid typing_FStar.Pervasives.Native.uu___is_None))
:named typing_FStar.Pervasives.Native.uu___is_None))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.uu___is_None @x0
@x1)
(BoxBool (is-FStar.Pervasives.Native.None @x1)))
 

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid disc_equation_FStar.Pervasives.Native.None))
:named disc_equation_FStar.Pervasives.Native.None))

; </end encoding FStar.Pervasives.Native.uu___is_None>

; <Skipped FStar.Pervasives.Native.uu___is_None/>

; <Start encoding FStar.Pervasives.Native.uu___is_Some>
(declare-fun FStar.Pervasives.Native.uu___is_Some (Term Term) Term)

(declare-fun FStar.Pervasives.Native.uu___is_Some@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.Native.uu___is_Some@tok
@x0)
@x1)
(FStar.Pervasives.Native.uu___is_Some @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.Native.uu___is_Some@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid token_correspondence_FStar.Pervasives.Native.uu___is_Some))
:named token_correspondence_FStar.Pervasives.Native.uu___is_Some))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.uu___is_Some@tok
(Tm_arrow_6d32d43d8787bb16acca18c75ecbe1b1 Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.Native.uu___is_Some@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.uu___is_Some@tok))
:qid function_token_typing_FStar.Pervasives.Native.uu___is_Some))
:named function_token_typing_FStar.Pervasives.Native.uu___is_Some))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native.option @x0)))
(HasType (FStar.Pervasives.Native.uu___is_Some @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid typing_FStar.Pervasives.Native.uu___is_Some))
:named typing_FStar.Pervasives.Native.uu___is_Some))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.uu___is_Some @x0
@x1)
(BoxBool (is-FStar.Pervasives.Native.Some @x1)))
 

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid disc_equation_FStar.Pervasives.Native.Some))
:named disc_equation_FStar.Pervasives.Native.Some))

; </end encoding FStar.Pervasives.Native.uu___is_Some>

; <Skipped FStar.Pervasives.Native.uu___is_Some/>

; <Start encoding FStar.Pervasives.Native.__proj__Some__item__v>
(declare-fun FStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (HasType (FStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)
Tm_type)
 

:pattern ((HasType (FStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)
Tm_type))
:qid refinement_kinding_FStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))
:named refinement_kinding_FStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (exists ((@x1 Term))
 (! (and (HasType @x1
(FStar.Pervasives.Native.option @x0))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(6,4-6,8); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(6,4-6,8)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x1))
)
 
;;no pats
:qid ref_valid_FStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a.1))
(Valid (FStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)))
 

:pattern ((Valid (FStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)))
:qid ref_valid_FStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))
:named ref_valid_FStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))
;;;;;;;;;;;;;;;;(uu___108513:FStar.Pervasives.Native.option a{ Prims.b2t (Some? uu___108513) })
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x2))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.option @x2))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(6,4-6,8); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(6,4-6,8)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x2
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x2)))
:qid refinement_interpretation_FStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))
:named refinement_interpretation_FStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))
;;;;;;;;;;;;;;;;haseq for FStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (FStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.option @x0))))
 

:pattern ((Valid (Prims.hasEq (FStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0))))
:qid haseqFStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))
:named haseqFStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v (Term Term) Term)
;;;;;;;;;;;;;;;;projectee:(uu___108527:FStar.Pervasives.Native.option a{ Prims.b2t (Some? uu___108527) }) ->...
(declare-fun Tm_arrow_4f040c69fbe8d7b2e50ca31bd5455a8e () Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_4f040c69fbe8d7b2e50ca31bd5455a8e
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_4f040c69fbe8d7b2e50ca31bd5455a8e
Tm_type)
:named kinding_Tm_arrow_4f040c69fbe8d7b2e50ca31bd5455a8e))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_4f040c69fbe8d7b2e50ca31bd5455a8e)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_4f040c69fbe8d7b2e50ca31bd5455a8e))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_4f040c69fbe8d7b2e50ca31bd5455a8e))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_4f040c69fbe8d7b2e50ca31bd5455a8e))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_4f040c69fbe8d7b2e50ca31bd5455a8e
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_4f040c69fbe8d7b2e50ca31bd5455a8e)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x1)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x1))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_4f040c69fbe8d7b2e50ca31bd5455a8e.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_4f040c69fbe8d7b2e50ca31bd5455a8e))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_4f040c69fbe8d7b2e50ca31bd5455a8e))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_4f040c69fbe8d7b2e50ca31bd5455a8e))
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Some__item__v@tok
@x0)
@x1)
(FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Some__item__v@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Some__item__v))
:named token_correspondence_FStar.Pervasives.Native.__proj__Some__item__v))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Some__item__v@tok
Tm_arrow_4f040c69fbe8d7b2e50ca31bd5455a8e))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Some__item__v@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Some__item__v@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Some__item__v))
:named function_token_typing_FStar.Pervasives.Native.__proj__Some__item__v))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)))
(HasType (FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1)
@x0))
 

:pattern ((FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1))
:qid typing_FStar.Pervasives.Native.__proj__Some__item__v))
:named typing_FStar.Pervasives.Native.__proj__Some__item__v))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1)
(FStar.Pervasives.Native.Some_v @x1))
 

:pattern ((FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1))
:qid proj_equation_FStar.Pervasives.Native.Some_v))
:named proj_equation_FStar.Pervasives.Native.Some_v))

; </end encoding FStar.Pervasives.Native.__proj__Some__item__v>

; <Skipped FStar.Pervasives.Native.__proj__Some__item__v/>

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple2@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple2@x1 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;_1:'a -> _2:'b -> Prims.Tot ('a * 'b)
(declare-fun Tm_arrow_ea874dc954d16eee0f41a749d898407d () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple2
(declare-fun FStar.Pervasives.Native.Mktuple2@tok () Term)

; <Start encoding FStar.Pervasives.Native.tuple2>

; <start constructor FStar.Pervasives.Native.tuple2>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= 1053
(Term_constr_id (FStar.Pervasives.Native.tuple2 @x0
@x1)))
 

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.Native.tuple2))
:named constructor_distinct_FStar.Pervasives.Native.tuple2))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1053)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple2))))

; </end constructor FStar.Pervasives.Native.tuple2>
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (= 1054
(Term_constr_id FStar.Pervasives.Native.tuple2@tok))
:named fresh_token_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0)
@x1)
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid token_correspondence_FStar.Pervasives.Native.tuple2@tok))
:named token_correspondence_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.tuple2@tok))
:named pre_kinding_FStar.Pervasives.Native.tuple2@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (FStar.Pervasives.Native.tuple2 @x0
@x1)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid kinding_FStar.Pervasives.Native.tuple2@tok))
:named kinding_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple2 @x2
@x3))
(= (FStar.Pervasives.Native.tuple2 @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple2 @x2
@x3)))
:qid FStar.Pervasives.Native_pretyping_4894c30cf477acf9a27e7a844279eb08))
:named FStar.Pervasives.Native_pretyping_4894c30cf477acf9a27e7a844279eb08))

; </end encoding FStar.Pervasives.Native.tuple2>

; <Start encoding FStar.Pervasives.Native.Mktuple2>

; <start constructor FStar.Pervasives.Native.Mktuple2>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 1060
(Term_constr_id (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3)))
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid constructor_distinct_FStar.Pervasives.Native.Mktuple2))
:named constructor_distinct_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__a (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__a))
:named projection_inverse_FStar.Pervasives.Native.Mktuple2__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__b (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__b))
:named projection_inverse_FStar.Pervasives.Native.Mktuple2__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__1 (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__1))
:named projection_inverse_FStar.Pervasives.Native.Mktuple2__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__2))
:named projection_inverse_FStar.Pervasives.Native.Mktuple2__2))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1060)
(= __@x0
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.Mktuple2__a __@x0)
(FStar.Pervasives.Native.Mktuple2__b __@x0)
(FStar.Pervasives.Native.Mktuple2__1 __@x0)
(FStar.Pervasives.Native.Mktuple2__2 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple2>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_ea874dc954d16eee0f41a749d898407d
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_ea874dc954d16eee0f41a749d898407d
Tm_type)
:named kinding_Tm_arrow_ea874dc954d16eee0f41a749d898407d))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_ea874dc954d16eee0f41a749d898407d)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_ea874dc954d16eee0f41a749d898407d))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_ea874dc954d16eee0f41a749d898407d))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_ea874dc954d16eee0f41a749d898407d))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_ea874dc954d16eee0f41a749d898407d
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_ea874dc954d16eee0f41a749d898407d)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
@x1)
(HasType @x4
@x2))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_ea874dc954d16eee0f41a749d898407d.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_ea874dc954d16eee0f41a749d898407d))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_ea874dc954d16eee0f41a749d898407d))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_ea874dc954d16eee0f41a749d898407d))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (= 1063
(Term_constr_id FStar.Pervasives.Native.Mktuple2@tok))
:named fresh_token_FStar.Pervasives.Native.Mktuple2@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.Mktuple2@tok
Tm_arrow_ea874dc954d16eee0f41a749d898407d))
 

:pattern ((ApplyTT FStar.Pervasives.Native.Mktuple2@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.Mktuple2@tok))
:qid typing_tok_FStar.Pervasives.Native.Mktuple2@tok))
:named typing_tok_FStar.Pervasives.Native.Mktuple2@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.Mktuple2@tok
@x0)
@x1)
@x2)
@x3)
(FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.Mktuple2@tok
@x0)
@x1)
@x2)
@x3))
:qid equality_tok_FStar.Pervasives.Native.Mktuple2@tok))
:named equality_tok_FStar.Pervasives.Native.Mktuple2@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
:qid data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok))
:named data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6))
(and (HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x4
@x6)
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6)))
:qid data_elim_FStar.Pervasives.Native.Mktuple2))
:named data_elim_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6))
(and (Valid (Precedes @x3
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)))
(Valid (Precedes @x4
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6)))
:qid subterm_ordering_FStar.Pervasives.Native.Mktuple2))
:named subterm_ordering_FStar.Pervasives.Native.Mktuple2))

; </end encoding FStar.Pervasives.Native.Mktuple2>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x2
@x3))
(and (is-FStar.Pervasives.Native.Mktuple2 @x1)
(= @x2
(FStar.Pervasives.Native.Mktuple2__a @x1))
(= @x3
(FStar.Pervasives.Native.Mktuple2__b @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x2
@x3)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.tuple2))
:named fuel_guarded_inversion_FStar.Pervasives.Native.tuple2))

; </end encoding >

; <Start encoding FStar.Pervasives.Native.tuple2_haseq>
;;;;;;;;;;;;;;;;Assumption: tuple2_haseq
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2_haseq; Namespace FStar.Pervasives.Native
(assert (! 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(9,0-10,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(9,0-10,44)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(9,0-10,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(9,0-10,44)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(9,0-10,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(9,0-10,44)
(Prims.hasEq @x0)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(9,0-10,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(9,0-10,44)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(9,0-10,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(9,0-10,44)
(Prims.hasEq @x1)
)
)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(9,0-10,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(9,0-10,44)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(9,0-10,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(9,0-10,44)
(Prims.hasEq (FStar.Pervasives.Native.tuple2 @x0
@x1))
)
)
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.tuple2 @x0
@x1)))
:qid assumption_FStar.Pervasives.Native.tuple2_haseq))

:named assumption_FStar.Pervasives.Native.tuple2_haseq))

; </end encoding FStar.Pervasives.Native.tuple2_haseq>

; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple2>
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_0e873ada4642b527a7ed8ad8c9a23c0c (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_0e873ada4642b527a7ed8ad8c9a23c0c
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_0e873ada4642b527a7ed8ad8c9a23c0c @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_0e873ada4642b527a7ed8ad8c9a23c0c @x0)
Tm_type))
:qid kinding_Tm_arrow_0e873ada4642b527a7ed8ad8c9a23c0c))
:named kinding_Tm_arrow_0e873ada4642b527a7ed8ad8c9a23c0c))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_0e873ada4642b527a7ed8ad8c9a23c0c @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_0e873ada4642b527a7ed8ad8c9a23c0c @x2)))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_0e873ada4642b527a7ed8ad8c9a23c0c))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_0e873ada4642b527a7ed8ad8c9a23c0c))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_0e873ada4642b527a7ed8ad8c9a23c0c
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_0e873ada4642b527a7ed8ad8c9a23c0c @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(FStar.Pervasives.Native.tuple2 @x2
@x3)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_0e873ada4642b527a7ed8ad8c9a23c0c.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_0e873ada4642b527a7ed8ad8c9a23c0c @x1)))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_0e873ada4642b527a7ed8ad8c9a23c0c))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_0e873ada4642b527a7ed8ad8c9a23c0c))
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.uu___is_Mktuple2@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.Native.uu___is_Mktuple2 @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.uu___is_Mktuple2@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple2 @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.Native.uu___is_Mktuple2))
:named token_correspondence_FStar.Pervasives.Native.uu___is_Mktuple2))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.uu___is_Mktuple2@tok
(Tm_arrow_0e873ada4642b527a7ed8ad8c9a23c0c Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.Native.uu___is_Mktuple2@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.uu___is_Mktuple2@tok))
:qid function_token_typing_FStar.Pervasives.Native.uu___is_Mktuple2))
:named function_token_typing_FStar.Pervasives.Native.uu___is_Mktuple2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.Native.tuple2 @x0
@x1)))
(HasType (FStar.Pervasives.Native.uu___is_Mktuple2 @x0
@x1
@x2)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple2 @x0
@x1
@x2))
:qid typing_FStar.Pervasives.Native.uu___is_Mktuple2))
:named typing_FStar.Pervasives.Native.uu___is_Mktuple2))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Native.uu___is_Mktuple2 @x0
@x1
@x2)
(BoxBool (is-FStar.Pervasives.Native.Mktuple2 @x2)))
 

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple2 @x0
@x1
@x2))
:qid disc_equation_FStar.Pervasives.Native.Mktuple2))
:named disc_equation_FStar.Pervasives.Native.Mktuple2))

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple2>

; <Skipped FStar.Pervasives.Native.uu___is_Mktuple2/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple2__item___1>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b -> Prims.Tot 'a
(declare-fun Tm_arrow_7fe3e7847982dd1674bac902db1b25d6 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_7fe3e7847982dd1674bac902db1b25d6
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___1; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_7fe3e7847982dd1674bac902db1b25d6
Tm_type)
:named kinding_Tm_arrow_7fe3e7847982dd1674bac902db1b25d6))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_7fe3e7847982dd1674bac902db1b25d6)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_7fe3e7847982dd1674bac902db1b25d6))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_7fe3e7847982dd1674bac902db1b25d6))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_7fe3e7847982dd1674bac902db1b25d6))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_7fe3e7847982dd1674bac902db1b25d6
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_7fe3e7847982dd1674bac902db1b25d6)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_7fe3e7847982dd1674bac902db1b25d6.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_7fe3e7847982dd1674bac902db1b25d6))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_7fe3e7847982dd1674bac902db1b25d6))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_7fe3e7847982dd1674bac902db1b25d6))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple2__item___1@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple2__item___1@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple2__item___1))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple2__item___1))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple2__item___1@tok
Tm_arrow_7fe3e7847982dd1674bac902db1b25d6))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple2__item___1@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple2__item___1@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple2__item___1))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple2__item___1))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.Native.tuple2 @x0
@x1)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2)
@x0))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple2__item___1))
:named typing_FStar.Pervasives.Native.__proj__Mktuple2__item___1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2)
(FStar.Pervasives.Native.Mktuple2__1 @x2))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2))
:qid proj_equation_FStar.Pervasives.Native.Mktuple2__1))
:named proj_equation_FStar.Pervasives.Native.Mktuple2__1))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple2__item___1>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple2__item___1/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple2__item___2>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b -> Prims.Tot 'b
(declare-fun Tm_arrow_caf985f824d0c8c31cc1333a92d97b40 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_caf985f824d0c8c31cc1333a92d97b40
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___2; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_caf985f824d0c8c31cc1333a92d97b40
Tm_type)
:named kinding_Tm_arrow_caf985f824d0c8c31cc1333a92d97b40))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_caf985f824d0c8c31cc1333a92d97b40)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_caf985f824d0c8c31cc1333a92d97b40))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_caf985f824d0c8c31cc1333a92d97b40))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_caf985f824d0c8c31cc1333a92d97b40))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_caf985f824d0c8c31cc1333a92d97b40
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_caf985f824d0c8c31cc1333a92d97b40)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_caf985f824d0c8c31cc1333a92d97b40.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_caf985f824d0c8c31cc1333a92d97b40))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_caf985f824d0c8c31cc1333a92d97b40))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_caf985f824d0c8c31cc1333a92d97b40))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple2__item___2@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple2__item___2@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple2__item___2))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple2__item___2))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple2__item___2@tok
Tm_arrow_caf985f824d0c8c31cc1333a92d97b40))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple2__item___2@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple2__item___2@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple2__item___2))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple2__item___2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.Native.tuple2 @x0
@x1)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2)
@x1))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple2__item___2))
:named typing_FStar.Pervasives.Native.__proj__Mktuple2__item___2))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @x2))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2))
:qid proj_equation_FStar.Pervasives.Native.Mktuple2__2))
:named proj_equation_FStar.Pervasives.Native.Mktuple2__2))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple2__item___2>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple2__item___2/>

; <Start encoding FStar.Pervasives.Native.fst>
(declare-fun FStar.Pervasives.Native.fst (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.fst@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.fst; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.fst@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.Native.fst @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.fst@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.Native.fst @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.Native.fst))
:named token_correspondence_FStar.Pervasives.Native.fst))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.fst; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.fst@tok
Tm_arrow_7fe3e7847982dd1674bac902db1b25d6))
 

:pattern ((ApplyTT FStar.Pervasives.Native.fst@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.fst@tok))
:qid function_token_typing_FStar.Pervasives.Native.fst))
:named function_token_typing_FStar.Pervasives.Native.fst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.fst; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.Native.tuple2 @x0
@x1)))
(HasType (FStar.Pervasives.Native.fst @x0
@x1
@x2)
@x0))
 

:pattern ((FStar.Pervasives.Native.fst @x0
@x1
@x2))
:qid typing_FStar.Pervasives.Native.fst))
:named typing_FStar.Pervasives.Native.fst))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.Native.fst
;;; Fact-ids: Name FStar.Pervasives.Native.fst; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Native.fst @x0
@x1
@x2)
(FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2))
 

:pattern ((FStar.Pervasives.Native.fst @x0
@x1
@x2))
:qid equation_FStar.Pervasives.Native.fst))
:named equation_FStar.Pervasives.Native.fst))

; </end encoding FStar.Pervasives.Native.fst>

; <Start encoding FStar.Pervasives.Native.snd>
(declare-fun FStar.Pervasives.Native.snd (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.snd@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.snd; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.snd@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.Native.snd @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.snd@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.Native.snd @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.Native.snd))
:named token_correspondence_FStar.Pervasives.Native.snd))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.snd; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.snd@tok
Tm_arrow_caf985f824d0c8c31cc1333a92d97b40))
 

:pattern ((ApplyTT FStar.Pervasives.Native.snd@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.snd@tok))
:qid function_token_typing_FStar.Pervasives.Native.snd))
:named function_token_typing_FStar.Pervasives.Native.snd))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.snd; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.Native.tuple2 @x0
@x1)))
(HasType (FStar.Pervasives.Native.snd @x0
@x1
@x2)
@x1))
 

:pattern ((FStar.Pervasives.Native.snd @x0
@x1
@x2))
:qid typing_FStar.Pervasives.Native.snd))
:named typing_FStar.Pervasives.Native.snd))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.Native.snd
;;; Fact-ids: Name FStar.Pervasives.Native.snd; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Native.snd @x0
@x1
@x2)
(FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2))
 

:pattern ((FStar.Pervasives.Native.snd @x0
@x1
@x2))
:qid equation_FStar.Pervasives.Native.snd))
:named equation_FStar.Pervasives.Native.snd))

; </end encoding FStar.Pervasives.Native.snd>

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple3@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple3@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple3@x2 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;_1:'a -> _2:'b -> _3:'c -> Prims.Tot ('a * 'b * 'c)
(declare-fun Tm_arrow_aa2ac0c2eefec3ef36a52a5c1e92dd6b () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple3
(declare-fun FStar.Pervasives.Native.Mktuple3@tok () Term)

; <Start encoding FStar.Pervasives.Native.tuple3>

; <start constructor FStar.Pervasives.Native.tuple3>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 1072
(Term_constr_id (FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)))
 

:pattern ((FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
:qid constructor_distinct_FStar.Pervasives.Native.tuple3))
:named constructor_distinct_FStar.Pervasives.Native.tuple3))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1072)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple3))))

; </end constructor FStar.Pervasives.Native.tuple3>
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (= 1073
(Term_constr_id FStar.Pervasives.Native.tuple3@tok))
:named fresh_token_FStar.Pervasives.Native.tuple3@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.Native.tuple3@tok))
:named token_correspondence_FStar.Pervasives.Native.tuple3@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.tuple3@tok))
:named pre_kinding_FStar.Pervasives.Native.tuple3@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type))
(HasType (FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
:qid kinding_FStar.Pervasives.Native.tuple3@tok))
:named kinding_FStar.Pervasives.Native.tuple3@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4))
(= (FStar.Pervasives.Native.tuple3 @x2
@x3
@x4)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4)))
:qid FStar.Pervasives.Native_pretyping_3c3cf72e1bf7b1d6f8b0873a4feb6ec5))
:named FStar.Pervasives.Native_pretyping_3c3cf72e1bf7b1d6f8b0873a4feb6ec5))

; </end encoding FStar.Pervasives.Native.tuple3>

; <Start encoding FStar.Pervasives.Native.Mktuple3>

; <start constructor FStar.Pervasives.Native.Mktuple3>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= 1079
(Term_constr_id (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5)))
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid constructor_distinct_FStar.Pervasives.Native.Mktuple3))
:named constructor_distinct_FStar.Pervasives.Native.Mktuple3))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__a (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x0)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__a))
:named projection_inverse_FStar.Pervasives.Native.Mktuple3__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__b (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x1)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__b))
:named projection_inverse_FStar.Pervasives.Native.Mktuple3__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__c (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x2)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__c))
:named projection_inverse_FStar.Pervasives.Native.Mktuple3__c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__1 (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x3)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__1))
:named projection_inverse_FStar.Pervasives.Native.Mktuple3__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__2 (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x4)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__2))
:named projection_inverse_FStar.Pervasives.Native.Mktuple3__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__3 (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x5)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__3))
:named projection_inverse_FStar.Pervasives.Native.Mktuple3__3))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1079)
(= __@x0
(FStar.Pervasives.Native.Mktuple3 (FStar.Pervasives.Native.Mktuple3__a __@x0)
(FStar.Pervasives.Native.Mktuple3__b __@x0)
(FStar.Pervasives.Native.Mktuple3__c __@x0)
(FStar.Pervasives.Native.Mktuple3__1 __@x0)
(FStar.Pervasives.Native.Mktuple3__2 __@x0)
(FStar.Pervasives.Native.Mktuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple3>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_aa2ac0c2eefec3ef36a52a5c1e92dd6b
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_aa2ac0c2eefec3ef36a52a5c1e92dd6b
Tm_type)
:named kinding_Tm_arrow_aa2ac0c2eefec3ef36a52a5c1e92dd6b))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_aa2ac0c2eefec3ef36a52a5c1e92dd6b)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_aa2ac0c2eefec3ef36a52a5c1e92dd6b))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_aa2ac0c2eefec3ef36a52a5c1e92dd6b))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_aa2ac0c2eefec3ef36a52a5c1e92dd6b))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_aa2ac0c2eefec3ef36a52a5c1e92dd6b
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_aa2ac0c2eefec3ef36a52a5c1e92dd6b)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
@x1)
(HasType @x5
@x2)
(HasType @x6
@x3))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
(FStar.Pervasives.Native.tuple3 @x1
@x2
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_aa2ac0c2eefec3ef36a52a5c1e92dd6b.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_aa2ac0c2eefec3ef36a52a5c1e92dd6b))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_aa2ac0c2eefec3ef36a52a5c1e92dd6b))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_aa2ac0c2eefec3ef36a52a5c1e92dd6b))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (= 1082
(Term_constr_id FStar.Pervasives.Native.Mktuple3@tok))
:named fresh_token_FStar.Pervasives.Native.Mktuple3@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.Mktuple3@tok
Tm_arrow_aa2ac0c2eefec3ef36a52a5c1e92dd6b))
 

:pattern ((ApplyTT FStar.Pervasives.Native.Mktuple3@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.Mktuple3@tok))
:qid typing_tok_FStar.Pervasives.Native.Mktuple3@tok))
:named typing_tok_FStar.Pervasives.Native.Mktuple3@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.Mktuple3@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
(FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.Mktuple3@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5))
:qid equality_tok_FStar.Pervasives.Native.Mktuple3@tok))
:named equality_tok_FStar.Pervasives.Native.Mktuple3@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
@x1)
(HasTypeFuel @u0
@x5
@x2)
(HasTypeFuel @u0
@x6
@x3))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x1
@x2
@x3)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x1
@x2
@x3)))
:qid data_typing_intro_FStar.Pervasives.Native.Mktuple3@tok))
:named data_typing_intro_FStar.Pervasives.Native.Mktuple3@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x7
@x8
@x9))
(and (HasTypeFuel @u0
@x9
Tm_type)
(HasTypeFuel @u0
@x6
@x9)
(HasTypeFuel @u0
@x8
Tm_type)
(HasTypeFuel @u0
@x5
@x8)
(HasTypeFuel @u0
@x7
Tm_type)
(HasTypeFuel @u0
@x4
@x7)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
@x1)
(HasTypeFuel @u0
@x5
@x2)
(HasTypeFuel @u0
@x6
@x3)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x7
@x8
@x9)))
:qid data_elim_FStar.Pervasives.Native.Mktuple3))
:named data_elim_FStar.Pervasives.Native.Mktuple3))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x7
@x8
@x9))
(and (Valid (Precedes @x4
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Precedes @x5
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Precedes @x6
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x7
@x8
@x9)))
:qid subterm_ordering_FStar.Pervasives.Native.Mktuple3))
:named subterm_ordering_FStar.Pervasives.Native.Mktuple3))

; </end encoding FStar.Pervasives.Native.Mktuple3>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4))
(and (is-FStar.Pervasives.Native.Mktuple3 @x1)
(= @x2
(FStar.Pervasives.Native.Mktuple3__a @x1))
(= @x3
(FStar.Pervasives.Native.Mktuple3__b @x1))
(= @x4
(FStar.Pervasives.Native.Mktuple3__c @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.tuple3))
:named fuel_guarded_inversion_FStar.Pervasives.Native.tuple3))

; </end encoding >

; <Start encoding FStar.Pervasives.Native.tuple3_haseq>
;;;;;;;;;;;;;;;;Assumption: tuple3_haseq
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3_haseq; Namespace FStar.Pervasives.Native
(assert (! 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(17,0-21,28); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(17,0-21,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(17,0-21,28); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(17,0-21,28)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(17,0-21,28); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(17,0-21,28)
(Prims.hasEq @x0)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(17,0-21,28); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(17,0-21,28)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(17,0-21,28); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(17,0-21,28)
(Prims.hasEq @x1)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(17,0-21,28); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(17,0-21,28)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(17,0-21,28); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(17,0-21,28)
(Prims.hasEq @x2)
)
)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(17,0-21,28); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(17,0-21,28)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(17,0-21,28); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(17,0-21,28)
(Prims.hasEq (FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
)
)
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)))
:qid assumption_FStar.Pervasives.Native.tuple3_haseq))

:named assumption_FStar.Pervasives.Native.tuple3_haseq))

; </end encoding FStar.Pervasives.Native.tuple3_haseq>

; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple3>
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'c -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_81b181f0a50be9c359f1e3afcab46996 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_81b181f0a50be9c359f1e3afcab46996
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_81b181f0a50be9c359f1e3afcab46996 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_81b181f0a50be9c359f1e3afcab46996 @x0)
Tm_type))
:qid kinding_Tm_arrow_81b181f0a50be9c359f1e3afcab46996))
:named kinding_Tm_arrow_81b181f0a50be9c359f1e3afcab46996))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_81b181f0a50be9c359f1e3afcab46996 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_81b181f0a50be9c359f1e3afcab46996 @x2)))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_81b181f0a50be9c359f1e3afcab46996))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_81b181f0a50be9c359f1e3afcab46996))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_81b181f0a50be9c359f1e3afcab46996
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_81b181f0a50be9c359f1e3afcab46996 @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_81b181f0a50be9c359f1e3afcab46996.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_81b181f0a50be9c359f1e3afcab46996 @x1)))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_81b181f0a50be9c359f1e3afcab46996))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_81b181f0a50be9c359f1e3afcab46996))
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.uu___is_Mktuple3@tok
@x0)
@x1)
@x2)
@x3)
(FStar.Pervasives.Native.uu___is_Mktuple3 @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.uu___is_Mktuple3@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple3 @x0
@x1
@x2
@x3))
:qid token_correspondence_FStar.Pervasives.Native.uu___is_Mktuple3))
:named token_correspondence_FStar.Pervasives.Native.uu___is_Mktuple3))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.uu___is_Mktuple3@tok
(Tm_arrow_81b181f0a50be9c359f1e3afcab46996 Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.Native.uu___is_Mktuple3@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.uu___is_Mktuple3@tok))
:qid function_token_typing_FStar.Pervasives.Native.uu___is_Mktuple3))
:named function_token_typing_FStar.Pervasives.Native.uu___is_Mktuple3))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)))
(HasType (FStar.Pervasives.Native.uu___is_Mktuple3 @x0
@x1
@x2
@x3)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple3 @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives.Native.uu___is_Mktuple3))
:named typing_FStar.Pervasives.Native.uu___is_Mktuple3))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.uu___is_Mktuple3 @x0
@x1
@x2
@x3)
(BoxBool (is-FStar.Pervasives.Native.Mktuple3 @x3)))
 

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple3 @x0
@x1
@x2
@x3))
:qid disc_equation_FStar.Pervasives.Native.Mktuple3))
:named disc_equation_FStar.Pervasives.Native.Mktuple3))

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple3>

; <Skipped FStar.Pervasives.Native.uu___is_Mktuple3/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple3__item___1>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'c -> Prims.Tot 'a
(declare-fun Tm_arrow_530e081bbbd964966a402b7e14fb9d69 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_530e081bbbd964966a402b7e14fb9d69
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___1; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_530e081bbbd964966a402b7e14fb9d69
Tm_type)
:named kinding_Tm_arrow_530e081bbbd964966a402b7e14fb9d69))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_530e081bbbd964966a402b7e14fb9d69)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_530e081bbbd964966a402b7e14fb9d69))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_530e081bbbd964966a402b7e14fb9d69))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_530e081bbbd964966a402b7e14fb9d69))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_530e081bbbd964966a402b7e14fb9d69
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_530e081bbbd964966a402b7e14fb9d69)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(FStar.Pervasives.Native.tuple3 @x1
@x2
@x3)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_530e081bbbd964966a402b7e14fb9d69.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_530e081bbbd964966a402b7e14fb9d69))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_530e081bbbd964966a402b7e14fb9d69))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_530e081bbbd964966a402b7e14fb9d69))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple3__item___1@tok
@x0)
@x1)
@x2)
@x3)
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple3__item___1@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple3__item___1 @x0
@x1
@x2
@x3))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple3__item___1))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple3__item___1))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple3__item___1@tok
Tm_arrow_530e081bbbd964966a402b7e14fb9d69))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple3__item___1@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple3__item___1@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple3__item___1))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple3__item___1))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple3__item___1 @x0
@x1
@x2
@x3)
@x0))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple3__item___1 @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple3__item___1))
:named typing_FStar.Pervasives.Native.__proj__Mktuple3__item___1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple3__item___1 @x0
@x1
@x2
@x3)
(FStar.Pervasives.Native.Mktuple3__1 @x3))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple3__item___1 @x0
@x1
@x2
@x3))
:qid proj_equation_FStar.Pervasives.Native.Mktuple3__1))
:named proj_equation_FStar.Pervasives.Native.Mktuple3__1))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple3__item___1>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple3__item___1/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple3__item___2>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'c -> Prims.Tot 'b
(declare-fun Tm_arrow_cdcc1b95ab3319da21eacff69bb46ef7 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_cdcc1b95ab3319da21eacff69bb46ef7
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___2; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_cdcc1b95ab3319da21eacff69bb46ef7
Tm_type)
:named kinding_Tm_arrow_cdcc1b95ab3319da21eacff69bb46ef7))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_cdcc1b95ab3319da21eacff69bb46ef7)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_cdcc1b95ab3319da21eacff69bb46ef7))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_cdcc1b95ab3319da21eacff69bb46ef7))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_cdcc1b95ab3319da21eacff69bb46ef7))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_cdcc1b95ab3319da21eacff69bb46ef7
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_cdcc1b95ab3319da21eacff69bb46ef7)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(FStar.Pervasives.Native.tuple3 @x1
@x2
@x3)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_cdcc1b95ab3319da21eacff69bb46ef7.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_cdcc1b95ab3319da21eacff69bb46ef7))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_cdcc1b95ab3319da21eacff69bb46ef7))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_cdcc1b95ab3319da21eacff69bb46ef7))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple3__item___2@tok
@x0)
@x1)
@x2)
@x3)
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple3__item___2@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple3__item___2 @x0
@x1
@x2
@x3))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple3__item___2))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple3__item___2))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple3__item___2@tok
Tm_arrow_cdcc1b95ab3319da21eacff69bb46ef7))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple3__item___2@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple3__item___2@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple3__item___2))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple3__item___2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple3__item___2 @x0
@x1
@x2
@x3)
@x1))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple3__item___2 @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple3__item___2))
:named typing_FStar.Pervasives.Native.__proj__Mktuple3__item___2))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple3__item___2 @x0
@x1
@x2
@x3)
(FStar.Pervasives.Native.Mktuple3__2 @x3))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple3__item___2 @x0
@x1
@x2
@x3))
:qid proj_equation_FStar.Pervasives.Native.Mktuple3__2))
:named proj_equation_FStar.Pervasives.Native.Mktuple3__2))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple3__item___2>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple3__item___2/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple3__item___3>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'c -> Prims.Tot 'c
(declare-fun Tm_arrow_ea1d9eb08a7fc2511c09cc8007396ae9 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_ea1d9eb08a7fc2511c09cc8007396ae9
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___3; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_ea1d9eb08a7fc2511c09cc8007396ae9
Tm_type)
:named kinding_Tm_arrow_ea1d9eb08a7fc2511c09cc8007396ae9))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_ea1d9eb08a7fc2511c09cc8007396ae9)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_ea1d9eb08a7fc2511c09cc8007396ae9))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_ea1d9eb08a7fc2511c09cc8007396ae9))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_ea1d9eb08a7fc2511c09cc8007396ae9))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_ea1d9eb08a7fc2511c09cc8007396ae9
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_ea1d9eb08a7fc2511c09cc8007396ae9)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(FStar.Pervasives.Native.tuple3 @x1
@x2
@x3)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_ea1d9eb08a7fc2511c09cc8007396ae9.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_ea1d9eb08a7fc2511c09cc8007396ae9))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_ea1d9eb08a7fc2511c09cc8007396ae9))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_ea1d9eb08a7fc2511c09cc8007396ae9))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple3__item___3@tok
@x0)
@x1)
@x2)
@x3)
(FStar.Pervasives.Native.__proj__Mktuple3__item___3 @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple3__item___3@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple3__item___3 @x0
@x1
@x2
@x3))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple3__item___3))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple3__item___3))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple3__item___3@tok
Tm_arrow_ea1d9eb08a7fc2511c09cc8007396ae9))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple3__item___3@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple3__item___3@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple3__item___3))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple3__item___3))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple3__item___3 @x0
@x1
@x2
@x3)
@x2))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple3__item___3 @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple3__item___3))
:named typing_FStar.Pervasives.Native.__proj__Mktuple3__item___3))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple3__item___3 @x0
@x1
@x2
@x3)
(FStar.Pervasives.Native.Mktuple3__3 @x3))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple3__item___3 @x0
@x1
@x2
@x3))
:qid proj_equation_FStar.Pervasives.Native.Mktuple3__3))
:named proj_equation_FStar.Pervasives.Native.Mktuple3__3))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple3__item___3>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple3__item___3/>

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple4@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple4@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple4@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple4@x3 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;_1:'a -> _2:'b -> _3:'c -> _4:'d -> Prims.Tot ('a * 'b * 'd)
(declare-fun Tm_arrow_57fa2a22c6acb92aec36a98d388a288a () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple4
(declare-fun FStar.Pervasives.Native.Mktuple4@tok () Term)

; <Start encoding FStar.Pervasives.Native.tuple4>

; <start constructor FStar.Pervasives.Native.tuple4>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 1091
(Term_constr_id (FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3)))
 

:pattern ((FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3))
:qid constructor_distinct_FStar.Pervasives.Native.tuple4))
:named constructor_distinct_FStar.Pervasives.Native.tuple4))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1091)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple4))))

; </end constructor FStar.Pervasives.Native.tuple4>
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (= 1092
(Term_constr_id FStar.Pervasives.Native.tuple4@tok))
:named fresh_token_FStar.Pervasives.Native.tuple4@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple4@tok
@x0)
@x1)
@x2)
@x3)
(FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple4@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3))
:qid token_correspondence_FStar.Pervasives.Native.tuple4@tok))
:named token_correspondence_FStar.Pervasives.Native.tuple4@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.tuple4@tok))
:named pre_kinding_FStar.Pervasives.Native.tuple4@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type))
(HasType (FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3))
:qid kinding_FStar.Pervasives.Native.tuple4@tok))
:named kinding_FStar.Pervasives.Native.tuple4@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple4 @x2
@x3
@x4
@x5))
(= (FStar.Pervasives.Native.tuple4 @x2
@x3
@x4
@x5)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple4 @x2
@x3
@x4
@x5)))
:qid FStar.Pervasives.Native_pretyping_a921c31b95ad6298eaccfc3532fde0e3))
:named FStar.Pervasives.Native_pretyping_a921c31b95ad6298eaccfc3532fde0e3))

; </end encoding FStar.Pervasives.Native.tuple4>

; <Start encoding FStar.Pervasives.Native.Mktuple4>

; <start constructor FStar.Pervasives.Native.Mktuple4>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= 1098
(Term_constr_id (FStar.Pervasives.Native.Mktuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)))
 

:pattern ((FStar.Pervasives.Native.Mktuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid constructor_distinct_FStar.Pervasives.Native.Mktuple4))
:named constructor_distinct_FStar.Pervasives.Native.Mktuple4))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Native.Mktuple4__a (FStar.Pervasives.Native.Mktuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
@x0)
 

:pattern ((FStar.Pervasives.Native.Mktuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple4__a))
:named projection_inverse_FStar.Pervasives.Native.Mktuple4__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Native.Mktuple4__b (FStar.Pervasives.Native.Mktuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
@x1)
 

:pattern ((FStar.Pervasives.Native.Mktuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple4__b))
:named projection_inverse_FStar.Pervasives.Native.Mktuple4__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Native.Mktuple4__c (FStar.Pervasives.Native.Mktuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
@x2)
 

:pattern ((FStar.Pervasives.Native.Mktuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple4__c))
:named projection_inverse_FStar.Pervasives.Native.Mktuple4__c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Native.Mktuple4__d (FStar.Pervasives.Native.Mktuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
@x3)
 

:pattern ((FStar.Pervasives.Native.Mktuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple4__d))
:named projection_inverse_FStar.Pervasives.Native.Mktuple4__d))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Native.Mktuple4__1 (FStar.Pervasives.Native.Mktuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
@x4)
 

:pattern ((FStar.Pervasives.Native.Mktuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple4__1))
:named projection_inverse_FStar.Pervasives.Native.Mktuple4__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Native.Mktuple4__2 (FStar.Pervasives.Native.Mktuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
@x5)
 

:pattern ((FStar.Pervasives.Native.Mktuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple4__2))
:named projection_inverse_FStar.Pervasives.Native.Mktuple4__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Native.Mktuple4__3 (FStar.Pervasives.Native.Mktuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
@x6)
 

:pattern ((FStar.Pervasives.Native.Mktuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple4__3))
:named projection_inverse_FStar.Pervasives.Native.Mktuple4__3))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Native.Mktuple4__4 (FStar.Pervasives.Native.Mktuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
@x7)
 

:pattern ((FStar.Pervasives.Native.Mktuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple4__4))
:named projection_inverse_FStar.Pervasives.Native.Mktuple4__4))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1098)
(= __@x0
(FStar.Pervasives.Native.Mktuple4 (FStar.Pervasives.Native.Mktuple4__a __@x0)
(FStar.Pervasives.Native.Mktuple4__b __@x0)
(FStar.Pervasives.Native.Mktuple4__c __@x0)
(FStar.Pervasives.Native.Mktuple4__d __@x0)
(FStar.Pervasives.Native.Mktuple4__1 __@x0)
(FStar.Pervasives.Native.Mktuple4__2 __@x0)
(FStar.Pervasives.Native.Mktuple4__3 __@x0)
(FStar.Pervasives.Native.Mktuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple4>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_57fa2a22c6acb92aec36a98d388a288a
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_57fa2a22c6acb92aec36a98d388a288a
Tm_type)
:named kinding_Tm_arrow_57fa2a22c6acb92aec36a98d388a288a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_57fa2a22c6acb92aec36a98d388a288a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_57fa2a22c6acb92aec36a98d388a288a))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_57fa2a22c6acb92aec36a98d388a288a))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_57fa2a22c6acb92aec36a98d388a288a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_57fa2a22c6acb92aec36a98d388a288a
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_57fa2a22c6acb92aec36a98d388a288a)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
@x1)
(HasType @x6
@x2)
(HasType @x7
@x3)
(HasType @x8
@x4))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
(FStar.Pervasives.Native.tuple4 @x1
@x2
@x3
@x4)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_57fa2a22c6acb92aec36a98d388a288a.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_57fa2a22c6acb92aec36a98d388a288a))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_57fa2a22c6acb92aec36a98d388a288a))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_57fa2a22c6acb92aec36a98d388a288a))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (= 1101
(Term_constr_id FStar.Pervasives.Native.Mktuple4@tok))
:named fresh_token_FStar.Pervasives.Native.Mktuple4@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.Mktuple4@tok
Tm_arrow_57fa2a22c6acb92aec36a98d388a288a))
 

:pattern ((ApplyTT FStar.Pervasives.Native.Mktuple4@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.Mktuple4@tok))
:qid typing_tok_FStar.Pervasives.Native.Mktuple4@tok))
:named typing_tok_FStar.Pervasives.Native.Mktuple4@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.Mktuple4@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
(FStar.Pervasives.Native.Mktuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.Mktuple4@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))
:qid equality_tok_FStar.Pervasives.Native.Mktuple4@tok))
:named equality_tok_FStar.Pervasives.Native.Mktuple4@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
@x1)
(HasTypeFuel @u0
@x6
@x2)
(HasTypeFuel @u0
@x7
@x3)
(HasTypeFuel @u0
@x8
@x4))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple4 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(FStar.Pervasives.Native.tuple4 @x1
@x2
@x3
@x4)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple4 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(FStar.Pervasives.Native.tuple4 @x1
@x2
@x3
@x4)))
:qid data_typing_intro_FStar.Pervasives.Native.Mktuple4@tok))
:named data_typing_intro_FStar.Pervasives.Native.Mktuple4@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple4 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(FStar.Pervasives.Native.tuple4 @x9
@x10
@x11
@x12))
(and (HasTypeFuel @u0
@x12
Tm_type)
(HasTypeFuel @u0
@x8
@x12)
(HasTypeFuel @u0
@x11
Tm_type)
(HasTypeFuel @u0
@x7
@x11)
(HasTypeFuel @u0
@x10
Tm_type)
(HasTypeFuel @u0
@x6
@x10)
(HasTypeFuel @u0
@x9
Tm_type)
(HasTypeFuel @u0
@x5
@x9)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
@x1)
(HasTypeFuel @u0
@x6
@x2)
(HasTypeFuel @u0
@x7
@x3)
(HasTypeFuel @u0
@x8
@x4)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple4 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(FStar.Pervasives.Native.tuple4 @x9
@x10
@x11
@x12)))
:qid data_elim_FStar.Pervasives.Native.Mktuple4))
:named data_elim_FStar.Pervasives.Native.Mktuple4))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple4 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(FStar.Pervasives.Native.tuple4 @x9
@x10
@x11
@x12))
(and (Valid (Precedes @x5
(FStar.Pervasives.Native.Mktuple4 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
(Valid (Precedes @x6
(FStar.Pervasives.Native.Mktuple4 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
(Valid (Precedes @x7
(FStar.Pervasives.Native.Mktuple4 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
(Valid (Precedes @x8
(FStar.Pervasives.Native.Mktuple4 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple4 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(FStar.Pervasives.Native.tuple4 @x9
@x10
@x11
@x12)))
:qid subterm_ordering_FStar.Pervasives.Native.Mktuple4))
:named subterm_ordering_FStar.Pervasives.Native.Mktuple4))

; </end encoding FStar.Pervasives.Native.Mktuple4>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple4 @x2
@x3
@x4
@x5))
(and (is-FStar.Pervasives.Native.Mktuple4 @x1)
(= @x2
(FStar.Pervasives.Native.Mktuple4__a @x1))
(= @x3
(FStar.Pervasives.Native.Mktuple4__b @x1))
(= @x4
(FStar.Pervasives.Native.Mktuple4__c @x1))
(= @x5
(FStar.Pervasives.Native.Mktuple4__d @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple4 @x2
@x3
@x4
@x5)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.tuple4))
:named fuel_guarded_inversion_FStar.Pervasives.Native.tuple4))

; </end encoding >

; <Start encoding FStar.Pervasives.Native.tuple4_haseq>
;;;;;;;;;;;;;;;;Assumption: tuple4_haseq
;;; Fact-ids: Name FStar.Pervasives.Native.tuple4_haseq; Namespace FStar.Pervasives.Native
(assert (! 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32)
(Prims.hasEq @x0)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32)
(Prims.hasEq @x1)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32)
(Prims.hasEq @x2)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32)
(Prims.hasEq @x3)
)
)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(24,0-29,32)
(Prims.hasEq (FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3))
)
)
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3)))
:qid assumption_FStar.Pervasives.Native.tuple4_haseq))

:named assumption_FStar.Pervasives.Native.tuple4_haseq))

; </end encoding FStar.Pervasives.Native.tuple4_haseq>

; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple4>
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'd -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_471e47868c0f16aa720099399b21873e (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_471e47868c0f16aa720099399b21873e
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_471e47868c0f16aa720099399b21873e @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_471e47868c0f16aa720099399b21873e @x0)
Tm_type))
:qid kinding_Tm_arrow_471e47868c0f16aa720099399b21873e))
:named kinding_Tm_arrow_471e47868c0f16aa720099399b21873e))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_471e47868c0f16aa720099399b21873e @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_471e47868c0f16aa720099399b21873e @x2)))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_471e47868c0f16aa720099399b21873e))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_471e47868c0f16aa720099399b21873e))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_471e47868c0f16aa720099399b21873e
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_471e47868c0f16aa720099399b21873e @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
(FStar.Pervasives.Native.tuple4 @x2
@x3
@x4
@x5)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x6)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x6))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_471e47868c0f16aa720099399b21873e.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_471e47868c0f16aa720099399b21873e @x1)))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_471e47868c0f16aa720099399b21873e))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_471e47868c0f16aa720099399b21873e))
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.uu___is_Mktuple4@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(FStar.Pervasives.Native.uu___is_Mktuple4 @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.uu___is_Mktuple4@tok
@x0)
@x1)
@x2)
@x3)
@x4))

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple4 @x0
@x1
@x2
@x3
@x4))
:qid token_correspondence_FStar.Pervasives.Native.uu___is_Mktuple4))
:named token_correspondence_FStar.Pervasives.Native.uu___is_Mktuple4))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.uu___is_Mktuple4@tok
(Tm_arrow_471e47868c0f16aa720099399b21873e Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.Native.uu___is_Mktuple4@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.uu___is_Mktuple4@tok))
:qid function_token_typing_FStar.Pervasives.Native.uu___is_Mktuple4))
:named function_token_typing_FStar.Pervasives.Native.uu___is_Mktuple4))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3)))
(HasType (FStar.Pervasives.Native.uu___is_Mktuple4 @x0
@x1
@x2
@x3
@x4)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple4 @x0
@x1
@x2
@x3
@x4))
:qid typing_FStar.Pervasives.Native.uu___is_Mktuple4))
:named typing_FStar.Pervasives.Native.uu___is_Mktuple4))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Pervasives.Native.uu___is_Mktuple4 @x0
@x1
@x2
@x3
@x4)
(BoxBool (is-FStar.Pervasives.Native.Mktuple4 @x4)))
 

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple4 @x0
@x1
@x2
@x3
@x4))
:qid disc_equation_FStar.Pervasives.Native.Mktuple4))
:named disc_equation_FStar.Pervasives.Native.Mktuple4))

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple4>

; <Skipped FStar.Pervasives.Native.uu___is_Mktuple4/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple4__item___1>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'd -> Prims.Tot 'a
(declare-fun Tm_arrow_21647838ffa803cb1cbaf82c99e03f01 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_21647838ffa803cb1cbaf82c99e03f01
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___1; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_21647838ffa803cb1cbaf82c99e03f01
Tm_type)
:named kinding_Tm_arrow_21647838ffa803cb1cbaf82c99e03f01))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_21647838ffa803cb1cbaf82c99e03f01)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_21647838ffa803cb1cbaf82c99e03f01))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_21647838ffa803cb1cbaf82c99e03f01))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_21647838ffa803cb1cbaf82c99e03f01))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_21647838ffa803cb1cbaf82c99e03f01
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_21647838ffa803cb1cbaf82c99e03f01)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
(FStar.Pervasives.Native.tuple4 @x1
@x2
@x3
@x4)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_21647838ffa803cb1cbaf82c99e03f01.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_21647838ffa803cb1cbaf82c99e03f01))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_21647838ffa803cb1cbaf82c99e03f01))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_21647838ffa803cb1cbaf82c99e03f01))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple4__item___1@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(FStar.Pervasives.Native.__proj__Mktuple4__item___1 @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple4__item___1@tok
@x0)
@x1)
@x2)
@x3)
@x4))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple4__item___1 @x0
@x1
@x2
@x3
@x4))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple4__item___1))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple4__item___1))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple4__item___1@tok
Tm_arrow_21647838ffa803cb1cbaf82c99e03f01))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple4__item___1@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple4__item___1@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple4__item___1))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple4__item___1))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple4__item___1 @x0
@x1
@x2
@x3
@x4)
@x0))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple4__item___1 @x0
@x1
@x2
@x3
@x4))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple4__item___1))
:named typing_FStar.Pervasives.Native.__proj__Mktuple4__item___1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple4__item___1 @x0
@x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.Mktuple4__1 @x4))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple4__item___1 @x0
@x1
@x2
@x3
@x4))
:qid proj_equation_FStar.Pervasives.Native.Mktuple4__1))
:named proj_equation_FStar.Pervasives.Native.Mktuple4__1))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple4__item___1>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple4__item___1/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple4__item___2>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'd -> Prims.Tot 'b
(declare-fun Tm_arrow_4a0e4247f19d3748beed54010175e86f () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_4a0e4247f19d3748beed54010175e86f
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___2; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_4a0e4247f19d3748beed54010175e86f
Tm_type)
:named kinding_Tm_arrow_4a0e4247f19d3748beed54010175e86f))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_4a0e4247f19d3748beed54010175e86f)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_4a0e4247f19d3748beed54010175e86f))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_4a0e4247f19d3748beed54010175e86f))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_4a0e4247f19d3748beed54010175e86f))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_4a0e4247f19d3748beed54010175e86f
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_4a0e4247f19d3748beed54010175e86f)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
(FStar.Pervasives.Native.tuple4 @x1
@x2
@x3
@x4)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_4a0e4247f19d3748beed54010175e86f.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_4a0e4247f19d3748beed54010175e86f))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_4a0e4247f19d3748beed54010175e86f))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_4a0e4247f19d3748beed54010175e86f))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple4__item___2@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(FStar.Pervasives.Native.__proj__Mktuple4__item___2 @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple4__item___2@tok
@x0)
@x1)
@x2)
@x3)
@x4))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple4__item___2 @x0
@x1
@x2
@x3
@x4))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple4__item___2))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple4__item___2))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple4__item___2@tok
Tm_arrow_4a0e4247f19d3748beed54010175e86f))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple4__item___2@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple4__item___2@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple4__item___2))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple4__item___2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple4__item___2 @x0
@x1
@x2
@x3
@x4)
@x1))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple4__item___2 @x0
@x1
@x2
@x3
@x4))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple4__item___2))
:named typing_FStar.Pervasives.Native.__proj__Mktuple4__item___2))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple4__item___2 @x0
@x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.Mktuple4__2 @x4))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple4__item___2 @x0
@x1
@x2
@x3
@x4))
:qid proj_equation_FStar.Pervasives.Native.Mktuple4__2))
:named proj_equation_FStar.Pervasives.Native.Mktuple4__2))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple4__item___2>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple4__item___2/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple4__item___3>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'd -> Prims.Tot 'c
(declare-fun Tm_arrow_879fb9ac6887317b2253fa415d6e297f () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_879fb9ac6887317b2253fa415d6e297f
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___3; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_879fb9ac6887317b2253fa415d6e297f
Tm_type)
:named kinding_Tm_arrow_879fb9ac6887317b2253fa415d6e297f))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_879fb9ac6887317b2253fa415d6e297f)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_879fb9ac6887317b2253fa415d6e297f))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_879fb9ac6887317b2253fa415d6e297f))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_879fb9ac6887317b2253fa415d6e297f))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_879fb9ac6887317b2253fa415d6e297f
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_879fb9ac6887317b2253fa415d6e297f)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
(FStar.Pervasives.Native.tuple4 @x1
@x2
@x3
@x4)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_879fb9ac6887317b2253fa415d6e297f.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_879fb9ac6887317b2253fa415d6e297f))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_879fb9ac6887317b2253fa415d6e297f))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_879fb9ac6887317b2253fa415d6e297f))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple4__item___3@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(FStar.Pervasives.Native.__proj__Mktuple4__item___3 @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple4__item___3@tok
@x0)
@x1)
@x2)
@x3)
@x4))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple4__item___3 @x0
@x1
@x2
@x3
@x4))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple4__item___3))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple4__item___3))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple4__item___3@tok
Tm_arrow_879fb9ac6887317b2253fa415d6e297f))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple4__item___3@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple4__item___3@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple4__item___3))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple4__item___3))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple4__item___3 @x0
@x1
@x2
@x3
@x4)
@x2))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple4__item___3 @x0
@x1
@x2
@x3
@x4))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple4__item___3))
:named typing_FStar.Pervasives.Native.__proj__Mktuple4__item___3))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple4__item___3 @x0
@x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.Mktuple4__3 @x4))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple4__item___3 @x0
@x1
@x2
@x3
@x4))
:qid proj_equation_FStar.Pervasives.Native.Mktuple4__3))
:named proj_equation_FStar.Pervasives.Native.Mktuple4__3))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple4__item___3>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple4__item___3/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple4__item___4>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'd -> Prims.Tot 'd
(declare-fun Tm_arrow_094933c54ea2002054dad555e01358ba () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_094933c54ea2002054dad555e01358ba
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___4; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_094933c54ea2002054dad555e01358ba
Tm_type)
:named kinding_Tm_arrow_094933c54ea2002054dad555e01358ba))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_094933c54ea2002054dad555e01358ba)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_094933c54ea2002054dad555e01358ba))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_094933c54ea2002054dad555e01358ba))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_094933c54ea2002054dad555e01358ba))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_094933c54ea2002054dad555e01358ba
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_094933c54ea2002054dad555e01358ba)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
(FStar.Pervasives.Native.tuple4 @x1
@x2
@x3
@x4)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_094933c54ea2002054dad555e01358ba.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_094933c54ea2002054dad555e01358ba))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_094933c54ea2002054dad555e01358ba))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_094933c54ea2002054dad555e01358ba))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple4__item___4@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(FStar.Pervasives.Native.__proj__Mktuple4__item___4 @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple4__item___4@tok
@x0)
@x1)
@x2)
@x3)
@x4))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple4__item___4 @x0
@x1
@x2
@x3
@x4))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple4__item___4))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple4__item___4))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple4__item___4@tok
Tm_arrow_094933c54ea2002054dad555e01358ba))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple4__item___4@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple4__item___4@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple4__item___4))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple4__item___4))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple4__item___4 @x0
@x1
@x2
@x3
@x4)
@x3))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple4__item___4 @x0
@x1
@x2
@x3
@x4))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple4__item___4))
:named typing_FStar.Pervasives.Native.__proj__Mktuple4__item___4))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple4__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple4__item___4 @x0
@x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.Mktuple4__4 @x4))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple4__item___4 @x0
@x1
@x2
@x3
@x4))
:qid proj_equation_FStar.Pervasives.Native.Mktuple4__4))
:named proj_equation_FStar.Pervasives.Native.Mktuple4__4))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple4__item___4>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple4__item___4/>

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple5@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple5@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple5@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple5@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple5@x4 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;_1:'a -> _2:'b -> _3:'c -> _4:'d -> _5:'e -> Prims.Tot ('a * 'b * 'e)
(declare-fun Tm_arrow_a25fd62df6305ca0d5e962cb259a6497 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple5
(declare-fun FStar.Pervasives.Native.Mktuple5@tok () Term)

; <Start encoding FStar.Pervasives.Native.tuple5>

; <start constructor FStar.Pervasives.Native.tuple5>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= 1112
(Term_constr_id (FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4))
:qid constructor_distinct_FStar.Pervasives.Native.tuple5))
:named constructor_distinct_FStar.Pervasives.Native.tuple5))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1112)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple5))))

; </end constructor FStar.Pervasives.Native.tuple5>
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (= 1113
(Term_constr_id FStar.Pervasives.Native.tuple5@tok))
:named fresh_token_FStar.Pervasives.Native.tuple5@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple5@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple5@tok
@x0)
@x1)
@x2)
@x3)
@x4))

:pattern ((FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4))
:qid token_correspondence_FStar.Pervasives.Native.tuple5@tok))
:named token_correspondence_FStar.Pervasives.Native.tuple5@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.tuple5@tok))
:named pre_kinding_FStar.Pervasives.Native.tuple5@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type))
(HasType (FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4))
:qid kinding_FStar.Pervasives.Native.tuple5@tok))
:named kinding_FStar.Pervasives.Native.tuple5@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple5 @x2
@x3
@x4
@x5
@x6))
(= (FStar.Pervasives.Native.tuple5 @x2
@x3
@x4
@x5
@x6)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple5 @x2
@x3
@x4
@x5
@x6)))
:qid FStar.Pervasives.Native_pretyping_616a6997592eb0970d9b3cb7e154d4a2))
:named FStar.Pervasives.Native_pretyping_616a6997592eb0970d9b3cb7e154d4a2))

; </end encoding FStar.Pervasives.Native.tuple5>

; <Start encoding FStar.Pervasives.Native.Mktuple5>

; <start constructor FStar.Pervasives.Native.Mktuple5>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= 1119
(Term_constr_id (FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
 

:pattern ((FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid constructor_distinct_FStar.Pervasives.Native.Mktuple5))
:named constructor_distinct_FStar.Pervasives.Native.Mktuple5))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (FStar.Pervasives.Native.Mktuple5__a (FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x0)
 

:pattern ((FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple5__a))
:named projection_inverse_FStar.Pervasives.Native.Mktuple5__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (FStar.Pervasives.Native.Mktuple5__b (FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x1)
 

:pattern ((FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple5__b))
:named projection_inverse_FStar.Pervasives.Native.Mktuple5__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (FStar.Pervasives.Native.Mktuple5__c (FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x2)
 

:pattern ((FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple5__c))
:named projection_inverse_FStar.Pervasives.Native.Mktuple5__c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (FStar.Pervasives.Native.Mktuple5__d (FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x3)
 

:pattern ((FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple5__d))
:named projection_inverse_FStar.Pervasives.Native.Mktuple5__d))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (FStar.Pervasives.Native.Mktuple5__e (FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x4)
 

:pattern ((FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple5__e))
:named projection_inverse_FStar.Pervasives.Native.Mktuple5__e))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (FStar.Pervasives.Native.Mktuple5__1 (FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x5)
 

:pattern ((FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple5__1))
:named projection_inverse_FStar.Pervasives.Native.Mktuple5__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (FStar.Pervasives.Native.Mktuple5__2 (FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x6)
 

:pattern ((FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple5__2))
:named projection_inverse_FStar.Pervasives.Native.Mktuple5__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (FStar.Pervasives.Native.Mktuple5__3 (FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x7)
 

:pattern ((FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple5__3))
:named projection_inverse_FStar.Pervasives.Native.Mktuple5__3))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (FStar.Pervasives.Native.Mktuple5__4 (FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x8)
 

:pattern ((FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple5__4))
:named projection_inverse_FStar.Pervasives.Native.Mktuple5__4))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (FStar.Pervasives.Native.Mktuple5__5 (FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x9)
 

:pattern ((FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple5__5))
:named projection_inverse_FStar.Pervasives.Native.Mktuple5__5))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1119)
(= __@x0
(FStar.Pervasives.Native.Mktuple5 (FStar.Pervasives.Native.Mktuple5__a __@x0)
(FStar.Pervasives.Native.Mktuple5__b __@x0)
(FStar.Pervasives.Native.Mktuple5__c __@x0)
(FStar.Pervasives.Native.Mktuple5__d __@x0)
(FStar.Pervasives.Native.Mktuple5__e __@x0)
(FStar.Pervasives.Native.Mktuple5__1 __@x0)
(FStar.Pervasives.Native.Mktuple5__2 __@x0)
(FStar.Pervasives.Native.Mktuple5__3 __@x0)
(FStar.Pervasives.Native.Mktuple5__4 __@x0)
(FStar.Pervasives.Native.Mktuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple5>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a25fd62df6305ca0d5e962cb259a6497
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_a25fd62df6305ca0d5e962cb259a6497
Tm_type)
:named kinding_Tm_arrow_a25fd62df6305ca0d5e962cb259a6497))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_a25fd62df6305ca0d5e962cb259a6497)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_a25fd62df6305ca0d5e962cb259a6497))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_a25fd62df6305ca0d5e962cb259a6497))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_a25fd62df6305ca0d5e962cb259a6497))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a25fd62df6305ca0d5e962cb259a6497
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_a25fd62df6305ca0d5e962cb259a6497)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
@x1)
(HasType @x7
@x2)
(HasType @x8
@x3)
(HasType @x9
@x4)
(HasType @x10
@x5))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
(FStar.Pervasives.Native.tuple5 @x1
@x2
@x3
@x4
@x5)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_a25fd62df6305ca0d5e962cb259a6497.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_a25fd62df6305ca0d5e962cb259a6497))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_a25fd62df6305ca0d5e962cb259a6497))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_a25fd62df6305ca0d5e962cb259a6497))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (= 1122
(Term_constr_id FStar.Pervasives.Native.Mktuple5@tok))
:named fresh_token_FStar.Pervasives.Native.Mktuple5@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.Mktuple5@tok
Tm_arrow_a25fd62df6305ca0d5e962cb259a6497))
 

:pattern ((ApplyTT FStar.Pervasives.Native.Mktuple5@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.Mktuple5@tok))
:qid typing_tok_FStar.Pervasives.Native.Mktuple5@tok))
:named typing_tok_FStar.Pervasives.Native.Mktuple5@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.Mktuple5@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
(FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.Mktuple5@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9))
:qid equality_tok_FStar.Pervasives.Native.Mktuple5@tok))
:named equality_tok_FStar.Pervasives.Native.Mktuple5@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
@x1)
(HasTypeFuel @u0
@x7
@x2)
(HasTypeFuel @u0
@x8
@x3)
(HasTypeFuel @u0
@x9
@x4)
(HasTypeFuel @u0
@x10
@x5))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple5 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
(FStar.Pervasives.Native.tuple5 @x1
@x2
@x3
@x4
@x5)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple5 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
(FStar.Pervasives.Native.tuple5 @x1
@x2
@x3
@x4
@x5)))
:qid data_typing_intro_FStar.Pervasives.Native.Mktuple5@tok))
:named data_typing_intro_FStar.Pervasives.Native.Mktuple5@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple5 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
(FStar.Pervasives.Native.tuple5 @x11
@x12
@x13
@x14
@x15))
(and (HasTypeFuel @u0
@x15
Tm_type)
(HasTypeFuel @u0
@x10
@x15)
(HasTypeFuel @u0
@x14
Tm_type)
(HasTypeFuel @u0
@x9
@x14)
(HasTypeFuel @u0
@x13
Tm_type)
(HasTypeFuel @u0
@x8
@x13)
(HasTypeFuel @u0
@x12
Tm_type)
(HasTypeFuel @u0
@x7
@x12)
(HasTypeFuel @u0
@x11
Tm_type)
(HasTypeFuel @u0
@x6
@x11)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
@x1)
(HasTypeFuel @u0
@x7
@x2)
(HasTypeFuel @u0
@x8
@x3)
(HasTypeFuel @u0
@x9
@x4)
(HasTypeFuel @u0
@x10
@x5)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple5 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
(FStar.Pervasives.Native.tuple5 @x11
@x12
@x13
@x14
@x15)))
:qid data_elim_FStar.Pervasives.Native.Mktuple5))
:named data_elim_FStar.Pervasives.Native.Mktuple5))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple5 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
(FStar.Pervasives.Native.tuple5 @x11
@x12
@x13
@x14
@x15))
(and (Valid (Precedes @x6
(FStar.Pervasives.Native.Mktuple5 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
(Valid (Precedes @x7
(FStar.Pervasives.Native.Mktuple5 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
(Valid (Precedes @x8
(FStar.Pervasives.Native.Mktuple5 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
(Valid (Precedes @x9
(FStar.Pervasives.Native.Mktuple5 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
(Valid (Precedes @x10
(FStar.Pervasives.Native.Mktuple5 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple5 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
(FStar.Pervasives.Native.tuple5 @x11
@x12
@x13
@x14
@x15)))
:qid subterm_ordering_FStar.Pervasives.Native.Mktuple5))
:named subterm_ordering_FStar.Pervasives.Native.Mktuple5))

; </end encoding FStar.Pervasives.Native.Mktuple5>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple5 @x2
@x3
@x4
@x5
@x6))
(and (is-FStar.Pervasives.Native.Mktuple5 @x1)
(= @x2
(FStar.Pervasives.Native.Mktuple5__a @x1))
(= @x3
(FStar.Pervasives.Native.Mktuple5__b @x1))
(= @x4
(FStar.Pervasives.Native.Mktuple5__c @x1))
(= @x5
(FStar.Pervasives.Native.Mktuple5__d @x1))
(= @x6
(FStar.Pervasives.Native.Mktuple5__e @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple5 @x2
@x3
@x4
@x5
@x6)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.tuple5))
:named fuel_guarded_inversion_FStar.Pervasives.Native.tuple5))

; </end encoding >

; <Start encoding FStar.Pervasives.Native.tuple5_haseq>
;;;;;;;;;;;;;;;;Assumption: tuple5_haseq
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5_haseq; Namespace FStar.Pervasives.Native
(assert (! 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35)
(Prims.hasEq @x0)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35)
(Prims.hasEq @x1)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35)
(Prims.hasEq @x2)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35)
(Prims.hasEq @x3)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35)
(Prims.hasEq @x4)
)
)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(32,0-38,35)
(Prims.hasEq (FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4))
)
)
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4)))
:qid assumption_FStar.Pervasives.Native.tuple5_haseq))

:named assumption_FStar.Pervasives.Native.tuple5_haseq))

; </end encoding FStar.Pervasives.Native.tuple5_haseq>

; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple5>
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'e -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_071cdac364befd9b3a1ef15c982380ca (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_071cdac364befd9b3a1ef15c982380ca
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_071cdac364befd9b3a1ef15c982380ca @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_071cdac364befd9b3a1ef15c982380ca @x0)
Tm_type))
:qid kinding_Tm_arrow_071cdac364befd9b3a1ef15c982380ca))
:named kinding_Tm_arrow_071cdac364befd9b3a1ef15c982380ca))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_071cdac364befd9b3a1ef15c982380ca @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_071cdac364befd9b3a1ef15c982380ca @x2)))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_071cdac364befd9b3a1ef15c982380ca))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_071cdac364befd9b3a1ef15c982380ca))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_071cdac364befd9b3a1ef15c982380ca
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_071cdac364befd9b3a1ef15c982380ca @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
(FStar.Pervasives.Native.tuple5 @x2
@x3
@x4
@x5
@x6)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_071cdac364befd9b3a1ef15c982380ca.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_071cdac364befd9b3a1ef15c982380ca @x1)))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_071cdac364befd9b3a1ef15c982380ca))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_071cdac364befd9b3a1ef15c982380ca))
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.uu___is_Mktuple5@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
(FStar.Pervasives.Native.uu___is_Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.uu___is_Mktuple5@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5))

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5))
:qid token_correspondence_FStar.Pervasives.Native.uu___is_Mktuple5))
:named token_correspondence_FStar.Pervasives.Native.uu___is_Mktuple5))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.uu___is_Mktuple5@tok
(Tm_arrow_071cdac364befd9b3a1ef15c982380ca Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.Native.uu___is_Mktuple5@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.uu___is_Mktuple5@tok))
:qid function_token_typing_FStar.Pervasives.Native.uu___is_Mktuple5))
:named function_token_typing_FStar.Pervasives.Native.uu___is_Mktuple5))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4)))
(HasType (FStar.Pervasives.Native.uu___is_Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_FStar.Pervasives.Native.uu___is_Mktuple5))
:named typing_FStar.Pervasives.Native.uu___is_Mktuple5))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.uu___is_Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5)
(BoxBool (is-FStar.Pervasives.Native.Mktuple5 @x5)))
 

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5))
:qid disc_equation_FStar.Pervasives.Native.Mktuple5))
:named disc_equation_FStar.Pervasives.Native.Mktuple5))

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple5>

; <Skipped FStar.Pervasives.Native.uu___is_Mktuple5/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple5__item___1>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'e -> Prims.Tot 'a
(declare-fun Tm_arrow_6426d9c2c96ff0881bdcece54fff4277 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_6426d9c2c96ff0881bdcece54fff4277
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___1; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_6426d9c2c96ff0881bdcece54fff4277
Tm_type)
:named kinding_Tm_arrow_6426d9c2c96ff0881bdcece54fff4277))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_6426d9c2c96ff0881bdcece54fff4277)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_6426d9c2c96ff0881bdcece54fff4277))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_6426d9c2c96ff0881bdcece54fff4277))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_6426d9c2c96ff0881bdcece54fff4277))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_6426d9c2c96ff0881bdcece54fff4277
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_6426d9c2c96ff0881bdcece54fff4277)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
(FStar.Pervasives.Native.tuple5 @x1
@x2
@x3
@x4
@x5)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_6426d9c2c96ff0881bdcece54fff4277.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_6426d9c2c96ff0881bdcece54fff4277))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_6426d9c2c96ff0881bdcece54fff4277))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_6426d9c2c96ff0881bdcece54fff4277))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple5__item___1@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
(FStar.Pervasives.Native.__proj__Mktuple5__item___1 @x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple5__item___1@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple5__item___1 @x0
@x1
@x2
@x3
@x4
@x5))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple5__item___1))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple5__item___1))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple5__item___1@tok
Tm_arrow_6426d9c2c96ff0881bdcece54fff4277))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple5__item___1@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple5__item___1@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple5__item___1))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple5__item___1))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple5__item___1 @x0
@x1
@x2
@x3
@x4
@x5)
@x0))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple5__item___1 @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple5__item___1))
:named typing_FStar.Pervasives.Native.__proj__Mktuple5__item___1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple5__item___1 @x0
@x1
@x2
@x3
@x4
@x5)
(FStar.Pervasives.Native.Mktuple5__1 @x5))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple5__item___1 @x0
@x1
@x2
@x3
@x4
@x5))
:qid proj_equation_FStar.Pervasives.Native.Mktuple5__1))
:named proj_equation_FStar.Pervasives.Native.Mktuple5__1))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple5__item___1>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple5__item___1/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple5__item___2>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'e -> Prims.Tot 'b
(declare-fun Tm_arrow_0dad7bc7f64c4faac713e4788a31a16e () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_0dad7bc7f64c4faac713e4788a31a16e
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___2; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_0dad7bc7f64c4faac713e4788a31a16e
Tm_type)
:named kinding_Tm_arrow_0dad7bc7f64c4faac713e4788a31a16e))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_0dad7bc7f64c4faac713e4788a31a16e)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_0dad7bc7f64c4faac713e4788a31a16e))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_0dad7bc7f64c4faac713e4788a31a16e))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_0dad7bc7f64c4faac713e4788a31a16e))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_0dad7bc7f64c4faac713e4788a31a16e
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_0dad7bc7f64c4faac713e4788a31a16e)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
(FStar.Pervasives.Native.tuple5 @x1
@x2
@x3
@x4
@x5)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_0dad7bc7f64c4faac713e4788a31a16e.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_0dad7bc7f64c4faac713e4788a31a16e))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_0dad7bc7f64c4faac713e4788a31a16e))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_0dad7bc7f64c4faac713e4788a31a16e))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple5__item___2@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
(FStar.Pervasives.Native.__proj__Mktuple5__item___2 @x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple5__item___2@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple5__item___2 @x0
@x1
@x2
@x3
@x4
@x5))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple5__item___2))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple5__item___2))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple5__item___2@tok
Tm_arrow_0dad7bc7f64c4faac713e4788a31a16e))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple5__item___2@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple5__item___2@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple5__item___2))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple5__item___2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple5__item___2 @x0
@x1
@x2
@x3
@x4
@x5)
@x1))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple5__item___2 @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple5__item___2))
:named typing_FStar.Pervasives.Native.__proj__Mktuple5__item___2))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple5__item___2 @x0
@x1
@x2
@x3
@x4
@x5)
(FStar.Pervasives.Native.Mktuple5__2 @x5))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple5__item___2 @x0
@x1
@x2
@x3
@x4
@x5))
:qid proj_equation_FStar.Pervasives.Native.Mktuple5__2))
:named proj_equation_FStar.Pervasives.Native.Mktuple5__2))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple5__item___2>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple5__item___2/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple5__item___3>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'e -> Prims.Tot 'c
(declare-fun Tm_arrow_efdf2741fc5d2cd7ffdf01b992c9e8a9 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_efdf2741fc5d2cd7ffdf01b992c9e8a9
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___3; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_efdf2741fc5d2cd7ffdf01b992c9e8a9
Tm_type)
:named kinding_Tm_arrow_efdf2741fc5d2cd7ffdf01b992c9e8a9))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_efdf2741fc5d2cd7ffdf01b992c9e8a9)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_efdf2741fc5d2cd7ffdf01b992c9e8a9))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_efdf2741fc5d2cd7ffdf01b992c9e8a9))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_efdf2741fc5d2cd7ffdf01b992c9e8a9))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_efdf2741fc5d2cd7ffdf01b992c9e8a9
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_efdf2741fc5d2cd7ffdf01b992c9e8a9)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
(FStar.Pervasives.Native.tuple5 @x1
@x2
@x3
@x4
@x5)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_efdf2741fc5d2cd7ffdf01b992c9e8a9.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_efdf2741fc5d2cd7ffdf01b992c9e8a9))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_efdf2741fc5d2cd7ffdf01b992c9e8a9))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_efdf2741fc5d2cd7ffdf01b992c9e8a9))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple5__item___3@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
(FStar.Pervasives.Native.__proj__Mktuple5__item___3 @x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple5__item___3@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple5__item___3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple5__item___3))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple5__item___3))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple5__item___3@tok
Tm_arrow_efdf2741fc5d2cd7ffdf01b992c9e8a9))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple5__item___3@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple5__item___3@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple5__item___3))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple5__item___3))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple5__item___3 @x0
@x1
@x2
@x3
@x4
@x5)
@x2))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple5__item___3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple5__item___3))
:named typing_FStar.Pervasives.Native.__proj__Mktuple5__item___3))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple5__item___3 @x0
@x1
@x2
@x3
@x4
@x5)
(FStar.Pervasives.Native.Mktuple5__3 @x5))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple5__item___3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid proj_equation_FStar.Pervasives.Native.Mktuple5__3))
:named proj_equation_FStar.Pervasives.Native.Mktuple5__3))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple5__item___3>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple5__item___3/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple5__item___4>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'e -> Prims.Tot 'd
(declare-fun Tm_arrow_08953d1bb2ff5a2bd59d780036c9167c () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_08953d1bb2ff5a2bd59d780036c9167c
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___4; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_08953d1bb2ff5a2bd59d780036c9167c
Tm_type)
:named kinding_Tm_arrow_08953d1bb2ff5a2bd59d780036c9167c))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_08953d1bb2ff5a2bd59d780036c9167c)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_08953d1bb2ff5a2bd59d780036c9167c))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_08953d1bb2ff5a2bd59d780036c9167c))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_08953d1bb2ff5a2bd59d780036c9167c))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_08953d1bb2ff5a2bd59d780036c9167c
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_08953d1bb2ff5a2bd59d780036c9167c)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
(FStar.Pervasives.Native.tuple5 @x1
@x2
@x3
@x4
@x5)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_08953d1bb2ff5a2bd59d780036c9167c.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_08953d1bb2ff5a2bd59d780036c9167c))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_08953d1bb2ff5a2bd59d780036c9167c))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_08953d1bb2ff5a2bd59d780036c9167c))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple5__item___4@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
(FStar.Pervasives.Native.__proj__Mktuple5__item___4 @x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple5__item___4@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple5__item___4 @x0
@x1
@x2
@x3
@x4
@x5))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple5__item___4))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple5__item___4))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple5__item___4@tok
Tm_arrow_08953d1bb2ff5a2bd59d780036c9167c))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple5__item___4@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple5__item___4@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple5__item___4))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple5__item___4))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple5__item___4 @x0
@x1
@x2
@x3
@x4
@x5)
@x3))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple5__item___4 @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple5__item___4))
:named typing_FStar.Pervasives.Native.__proj__Mktuple5__item___4))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple5__item___4 @x0
@x1
@x2
@x3
@x4
@x5)
(FStar.Pervasives.Native.Mktuple5__4 @x5))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple5__item___4 @x0
@x1
@x2
@x3
@x4
@x5))
:qid proj_equation_FStar.Pervasives.Native.Mktuple5__4))
:named proj_equation_FStar.Pervasives.Native.Mktuple5__4))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple5__item___4>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple5__item___4/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple5__item___5>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'e -> Prims.Tot 'e
(declare-fun Tm_arrow_c4e77c85318828d15167451b16a74f86 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c4e77c85318828d15167451b16a74f86
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___5; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_c4e77c85318828d15167451b16a74f86
Tm_type)
:named kinding_Tm_arrow_c4e77c85318828d15167451b16a74f86))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_c4e77c85318828d15167451b16a74f86)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_c4e77c85318828d15167451b16a74f86))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_c4e77c85318828d15167451b16a74f86))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_c4e77c85318828d15167451b16a74f86))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c4e77c85318828d15167451b16a74f86
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_c4e77c85318828d15167451b16a74f86)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
(FStar.Pervasives.Native.tuple5 @x1
@x2
@x3
@x4
@x5)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_c4e77c85318828d15167451b16a74f86.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_c4e77c85318828d15167451b16a74f86))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_c4e77c85318828d15167451b16a74f86))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_c4e77c85318828d15167451b16a74f86))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple5__item___5@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
(FStar.Pervasives.Native.__proj__Mktuple5__item___5 @x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple5__item___5@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple5__item___5 @x0
@x1
@x2
@x3
@x4
@x5))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple5__item___5))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple5__item___5))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple5__item___5@tok
Tm_arrow_c4e77c85318828d15167451b16a74f86))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple5__item___5@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple5__item___5@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple5__item___5))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple5__item___5))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple5__item___5 @x0
@x1
@x2
@x3
@x4
@x5)
@x4))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple5__item___5 @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple5__item___5))
:named typing_FStar.Pervasives.Native.__proj__Mktuple5__item___5))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple5__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple5__item___5 @x0
@x1
@x2
@x3
@x4
@x5)
(FStar.Pervasives.Native.Mktuple5__5 @x5))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple5__item___5 @x0
@x1
@x2
@x3
@x4
@x5))
:qid proj_equation_FStar.Pervasives.Native.Mktuple5__5))
:named proj_equation_FStar.Pervasives.Native.Mktuple5__5))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple5__item___5>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple5__item___5/>

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple6 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple6@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple6@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple6@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple6@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple6@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple6@x5 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple6@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__6 (Term) Term)
;;;;;;;;;;;;;;;;_1:'a -> _2:'b -> _3:'c -> _4:'d -> _5:'e -> _6:'f -> Prims.Tot ('a * 'b * 'f)
(declare-fun Tm_arrow_6e23aa00e38a92d031af78d42cdf6218 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple6
(declare-fun FStar.Pervasives.Native.Mktuple6@tok () Term)

; <Start encoding FStar.Pervasives.Native.tuple6>

; <start constructor FStar.Pervasives.Native.tuple6>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= 1135
(Term_constr_id (FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5)))
 

:pattern ((FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5))
:qid constructor_distinct_FStar.Pervasives.Native.tuple6))
:named constructor_distinct_FStar.Pervasives.Native.tuple6))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1135)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple6))))

; </end constructor FStar.Pervasives.Native.tuple6>
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (= 1136
(Term_constr_id FStar.Pervasives.Native.tuple6@tok))
:named fresh_token_FStar.Pervasives.Native.tuple6@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple6@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple6@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5))

:pattern ((FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5))
:qid token_correspondence_FStar.Pervasives.Native.tuple6@tok))
:named token_correspondence_FStar.Pervasives.Native.tuple6@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.tuple6@tok))
:named pre_kinding_FStar.Pervasives.Native.tuple6@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type))
(HasType (FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5))
:qid kinding_FStar.Pervasives.Native.tuple6@tok))
:named kinding_FStar.Pervasives.Native.tuple6@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple6 @x2
@x3
@x4
@x5
@x6
@x7))
(= (FStar.Pervasives.Native.tuple6 @x2
@x3
@x4
@x5
@x6
@x7)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple6 @x2
@x3
@x4
@x5
@x6
@x7)))
:qid FStar.Pervasives.Native_pretyping_77f71cd45f062f25ddde8ee758ebe7ca))
:named FStar.Pervasives.Native_pretyping_77f71cd45f062f25ddde8ee758ebe7ca))

; </end encoding FStar.Pervasives.Native.tuple6>

; <Start encoding FStar.Pervasives.Native.Mktuple6>

; <start constructor FStar.Pervasives.Native.Mktuple6>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= 1142
(Term_constr_id (FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11)))
 

:pattern ((FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
:qid constructor_distinct_FStar.Pervasives.Native.Mktuple6))
:named constructor_distinct_FStar.Pervasives.Native.Mktuple6))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= (FStar.Pervasives.Native.Mktuple6__a (FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
@x0)
 

:pattern ((FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple6__a))
:named projection_inverse_FStar.Pervasives.Native.Mktuple6__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= (FStar.Pervasives.Native.Mktuple6__b (FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
@x1)
 

:pattern ((FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple6__b))
:named projection_inverse_FStar.Pervasives.Native.Mktuple6__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= (FStar.Pervasives.Native.Mktuple6__c (FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
@x2)
 

:pattern ((FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple6__c))
:named projection_inverse_FStar.Pervasives.Native.Mktuple6__c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= (FStar.Pervasives.Native.Mktuple6__d (FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
@x3)
 

:pattern ((FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple6__d))
:named projection_inverse_FStar.Pervasives.Native.Mktuple6__d))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= (FStar.Pervasives.Native.Mktuple6__e (FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
@x4)
 

:pattern ((FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple6__e))
:named projection_inverse_FStar.Pervasives.Native.Mktuple6__e))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= (FStar.Pervasives.Native.Mktuple6__f (FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
@x5)
 

:pattern ((FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple6__f))
:named projection_inverse_FStar.Pervasives.Native.Mktuple6__f))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= (FStar.Pervasives.Native.Mktuple6__1 (FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
@x6)
 

:pattern ((FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple6__1))
:named projection_inverse_FStar.Pervasives.Native.Mktuple6__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= (FStar.Pervasives.Native.Mktuple6__2 (FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
@x7)
 

:pattern ((FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple6__2))
:named projection_inverse_FStar.Pervasives.Native.Mktuple6__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= (FStar.Pervasives.Native.Mktuple6__3 (FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
@x8)
 

:pattern ((FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple6__3))
:named projection_inverse_FStar.Pervasives.Native.Mktuple6__3))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= (FStar.Pervasives.Native.Mktuple6__4 (FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
@x9)
 

:pattern ((FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple6__4))
:named projection_inverse_FStar.Pervasives.Native.Mktuple6__4))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= (FStar.Pervasives.Native.Mktuple6__5 (FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
@x10)
 

:pattern ((FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple6__5))
:named projection_inverse_FStar.Pervasives.Native.Mktuple6__5))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= (FStar.Pervasives.Native.Mktuple6__6 (FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
@x11)
 

:pattern ((FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple6__6))
:named projection_inverse_FStar.Pervasives.Native.Mktuple6__6))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1142)
(= __@x0
(FStar.Pervasives.Native.Mktuple6 (FStar.Pervasives.Native.Mktuple6__a __@x0)
(FStar.Pervasives.Native.Mktuple6__b __@x0)
(FStar.Pervasives.Native.Mktuple6__c __@x0)
(FStar.Pervasives.Native.Mktuple6__d __@x0)
(FStar.Pervasives.Native.Mktuple6__e __@x0)
(FStar.Pervasives.Native.Mktuple6__f __@x0)
(FStar.Pervasives.Native.Mktuple6__1 __@x0)
(FStar.Pervasives.Native.Mktuple6__2 __@x0)
(FStar.Pervasives.Native.Mktuple6__3 __@x0)
(FStar.Pervasives.Native.Mktuple6__4 __@x0)
(FStar.Pervasives.Native.Mktuple6__5 __@x0)
(FStar.Pervasives.Native.Mktuple6__6 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple6>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_6e23aa00e38a92d031af78d42cdf6218
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_6e23aa00e38a92d031af78d42cdf6218
Tm_type)
:named kinding_Tm_arrow_6e23aa00e38a92d031af78d42cdf6218))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_6e23aa00e38a92d031af78d42cdf6218)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_6e23aa00e38a92d031af78d42cdf6218))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_6e23aa00e38a92d031af78d42cdf6218))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_6e23aa00e38a92d031af78d42cdf6218))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_6e23aa00e38a92d031af78d42cdf6218
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_6e23aa00e38a92d031af78d42cdf6218)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
@x1)
(HasType @x8
@x2)
(HasType @x9
@x3)
(HasType @x10
@x4)
(HasType @x11
@x5)
(HasType @x12
@x6))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
(FStar.Pervasives.Native.tuple6 @x1
@x2
@x3
@x4
@x5
@x6)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_6e23aa00e38a92d031af78d42cdf6218.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_6e23aa00e38a92d031af78d42cdf6218))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_6e23aa00e38a92d031af78d42cdf6218))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_6e23aa00e38a92d031af78d42cdf6218))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (= 1145
(Term_constr_id FStar.Pervasives.Native.Mktuple6@tok))
:named fresh_token_FStar.Pervasives.Native.Mktuple6@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.Mktuple6@tok
Tm_arrow_6e23aa00e38a92d031af78d42cdf6218))
 

:pattern ((ApplyTT FStar.Pervasives.Native.Mktuple6@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.Mktuple6@tok))
:qid typing_tok_FStar.Pervasives.Native.Mktuple6@tok))
:named typing_tok_FStar.Pervasives.Native.Mktuple6@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.Mktuple6@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
(FStar.Pervasives.Native.Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.Mktuple6@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11))
:qid equality_tok_FStar.Pervasives.Native.Mktuple6@tok))
:named equality_tok_FStar.Pervasives.Native.Mktuple6@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x7
@x1)
(HasTypeFuel @u0
@x8
@x2)
(HasTypeFuel @u0
@x9
@x3)
(HasTypeFuel @u0
@x10
@x4)
(HasTypeFuel @u0
@x11
@x5)
(HasTypeFuel @u0
@x12
@x6))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple6 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12)
(FStar.Pervasives.Native.tuple6 @x1
@x2
@x3
@x4
@x5
@x6)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple6 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12)
(FStar.Pervasives.Native.tuple6 @x1
@x2
@x3
@x4
@x5
@x6)))
:qid data_typing_intro_FStar.Pervasives.Native.Mktuple6@tok))
:named data_typing_intro_FStar.Pervasives.Native.Mktuple6@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple6 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12)
(FStar.Pervasives.Native.tuple6 @x13
@x14
@x15
@x16
@x17
@x18))
(and (HasTypeFuel @u0
@x18
Tm_type)
(HasTypeFuel @u0
@x12
@x18)
(HasTypeFuel @u0
@x17
Tm_type)
(HasTypeFuel @u0
@x11
@x17)
(HasTypeFuel @u0
@x16
Tm_type)
(HasTypeFuel @u0
@x10
@x16)
(HasTypeFuel @u0
@x15
Tm_type)
(HasTypeFuel @u0
@x9
@x15)
(HasTypeFuel @u0
@x14
Tm_type)
(HasTypeFuel @u0
@x8
@x14)
(HasTypeFuel @u0
@x13
Tm_type)
(HasTypeFuel @u0
@x7
@x13)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x7
@x1)
(HasTypeFuel @u0
@x8
@x2)
(HasTypeFuel @u0
@x9
@x3)
(HasTypeFuel @u0
@x10
@x4)
(HasTypeFuel @u0
@x11
@x5)
(HasTypeFuel @u0
@x12
@x6)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple6 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12)
(FStar.Pervasives.Native.tuple6 @x13
@x14
@x15
@x16
@x17
@x18)))
:qid data_elim_FStar.Pervasives.Native.Mktuple6))
:named data_elim_FStar.Pervasives.Native.Mktuple6))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple6 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12)
(FStar.Pervasives.Native.tuple6 @x13
@x14
@x15
@x16
@x17
@x18))
(and (Valid (Precedes @x7
(FStar.Pervasives.Native.Mktuple6 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12)))
(Valid (Precedes @x8
(FStar.Pervasives.Native.Mktuple6 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12)))
(Valid (Precedes @x9
(FStar.Pervasives.Native.Mktuple6 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12)))
(Valid (Precedes @x10
(FStar.Pervasives.Native.Mktuple6 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12)))
(Valid (Precedes @x11
(FStar.Pervasives.Native.Mktuple6 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12)))
(Valid (Precedes @x12
(FStar.Pervasives.Native.Mktuple6 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple6 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12)
(FStar.Pervasives.Native.tuple6 @x13
@x14
@x15
@x16
@x17
@x18)))
:qid subterm_ordering_FStar.Pervasives.Native.Mktuple6))
:named subterm_ordering_FStar.Pervasives.Native.Mktuple6))

; </end encoding FStar.Pervasives.Native.Mktuple6>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple6 @x2
@x3
@x4
@x5
@x6
@x7))
(and (is-FStar.Pervasives.Native.Mktuple6 @x1)
(= @x2
(FStar.Pervasives.Native.Mktuple6__a @x1))
(= @x3
(FStar.Pervasives.Native.Mktuple6__b @x1))
(= @x4
(FStar.Pervasives.Native.Mktuple6__c @x1))
(= @x5
(FStar.Pervasives.Native.Mktuple6__d @x1))
(= @x6
(FStar.Pervasives.Native.Mktuple6__e @x1))
(= @x7
(FStar.Pervasives.Native.Mktuple6__f @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple6 @x2
@x3
@x4
@x5
@x6
@x7)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.tuple6))
:named fuel_guarded_inversion_FStar.Pervasives.Native.tuple6))

; </end encoding >

; <Start encoding FStar.Pervasives.Native.tuple6_haseq>
;;;;;;;;;;;;;;;;Assumption: tuple6_haseq
;;; Fact-ids: Name FStar.Pervasives.Native.tuple6_haseq; Namespace FStar.Pervasives.Native
(assert (! 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38)
(Prims.hasEq @x0)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38)
(Prims.hasEq @x1)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38)
(Prims.hasEq @x2)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38)
(Prims.hasEq @x3)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38)
(Prims.hasEq @x4)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38)
(Prims.hasEq @x5)
)
)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(41,0-48,38)
(Prims.hasEq (FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5))
)
)
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5)))
:qid assumption_FStar.Pervasives.Native.tuple6_haseq))

:named assumption_FStar.Pervasives.Native.tuple6_haseq))

; </end encoding FStar.Pervasives.Native.tuple6_haseq>

; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple6>
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'f -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_b4cc8204c08bed808cee22615b49bc5f (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_b4cc8204c08bed808cee22615b49bc5f
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_b4cc8204c08bed808cee22615b49bc5f @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_b4cc8204c08bed808cee22615b49bc5f @x0)
Tm_type))
:qid kinding_Tm_arrow_b4cc8204c08bed808cee22615b49bc5f))
:named kinding_Tm_arrow_b4cc8204c08bed808cee22615b49bc5f))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_b4cc8204c08bed808cee22615b49bc5f @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_b4cc8204c08bed808cee22615b49bc5f @x2)))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_b4cc8204c08bed808cee22615b49bc5f))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_b4cc8204c08bed808cee22615b49bc5f))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_b4cc8204c08bed808cee22615b49bc5f
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_b4cc8204c08bed808cee22615b49bc5f @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
(FStar.Pervasives.Native.tuple6 @x2
@x3
@x4
@x5
@x6
@x7)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_b4cc8204c08bed808cee22615b49bc5f.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_b4cc8204c08bed808cee22615b49bc5f @x1)))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_b4cc8204c08bed808cee22615b49bc5f))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_b4cc8204c08bed808cee22615b49bc5f))
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.uu___is_Mktuple6@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
(FStar.Pervasives.Native.uu___is_Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.uu___is_Mktuple6@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid token_correspondence_FStar.Pervasives.Native.uu___is_Mktuple6))
:named token_correspondence_FStar.Pervasives.Native.uu___is_Mktuple6))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.uu___is_Mktuple6@tok
(Tm_arrow_b4cc8204c08bed808cee22615b49bc5f Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.Native.uu___is_Mktuple6@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.uu___is_Mktuple6@tok))
:qid function_token_typing_FStar.Pervasives.Native.uu___is_Mktuple6))
:named function_token_typing_FStar.Pervasives.Native.uu___is_Mktuple6))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5)))
(HasType (FStar.Pervasives.Native.uu___is_Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid typing_FStar.Pervasives.Native.uu___is_Mktuple6))
:named typing_FStar.Pervasives.Native.uu___is_Mktuple6))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (FStar.Pervasives.Native.uu___is_Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
(BoxBool (is-FStar.Pervasives.Native.Mktuple6 @x6)))
 

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple6 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid disc_equation_FStar.Pervasives.Native.Mktuple6))
:named disc_equation_FStar.Pervasives.Native.Mktuple6))

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple6>

; <Skipped FStar.Pervasives.Native.uu___is_Mktuple6/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple6__item___1>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'f -> Prims.Tot 'a
(declare-fun Tm_arrow_3209a7a409ec605c6410051291219438 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_3209a7a409ec605c6410051291219438
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___1; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_3209a7a409ec605c6410051291219438
Tm_type)
:named kinding_Tm_arrow_3209a7a409ec605c6410051291219438))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_3209a7a409ec605c6410051291219438)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_3209a7a409ec605c6410051291219438))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_3209a7a409ec605c6410051291219438))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_3209a7a409ec605c6410051291219438))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_3209a7a409ec605c6410051291219438
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_3209a7a409ec605c6410051291219438)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
(FStar.Pervasives.Native.tuple6 @x1
@x2
@x3
@x4
@x5
@x6)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_3209a7a409ec605c6410051291219438.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_3209a7a409ec605c6410051291219438))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_3209a7a409ec605c6410051291219438))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_3209a7a409ec605c6410051291219438))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple6__item___1@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
(FStar.Pervasives.Native.__proj__Mktuple6__item___1 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple6__item___1@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple6__item___1 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple6__item___1))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple6__item___1))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple6__item___1@tok
Tm_arrow_3209a7a409ec605c6410051291219438))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple6__item___1@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple6__item___1@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple6__item___1))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple6__item___1))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple6__item___1 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
@x0))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple6__item___1 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple6__item___1))
:named typing_FStar.Pervasives.Native.__proj__Mktuple6__item___1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple6__item___1 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.Mktuple6__1 @x6))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple6__item___1 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid proj_equation_FStar.Pervasives.Native.Mktuple6__1))
:named proj_equation_FStar.Pervasives.Native.Mktuple6__1))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple6__item___1>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple6__item___1/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple6__item___2>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'f -> Prims.Tot 'b
(declare-fun Tm_arrow_15e10e26df1554e12524dd8fbe3e2f20 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_15e10e26df1554e12524dd8fbe3e2f20
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___2; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_15e10e26df1554e12524dd8fbe3e2f20
Tm_type)
:named kinding_Tm_arrow_15e10e26df1554e12524dd8fbe3e2f20))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_15e10e26df1554e12524dd8fbe3e2f20)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_15e10e26df1554e12524dd8fbe3e2f20))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_15e10e26df1554e12524dd8fbe3e2f20))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_15e10e26df1554e12524dd8fbe3e2f20))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_15e10e26df1554e12524dd8fbe3e2f20
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_15e10e26df1554e12524dd8fbe3e2f20)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
(FStar.Pervasives.Native.tuple6 @x1
@x2
@x3
@x4
@x5
@x6)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_15e10e26df1554e12524dd8fbe3e2f20.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_15e10e26df1554e12524dd8fbe3e2f20))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_15e10e26df1554e12524dd8fbe3e2f20))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_15e10e26df1554e12524dd8fbe3e2f20))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple6__item___2@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
(FStar.Pervasives.Native.__proj__Mktuple6__item___2 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple6__item___2@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple6__item___2 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple6__item___2))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple6__item___2))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple6__item___2@tok
Tm_arrow_15e10e26df1554e12524dd8fbe3e2f20))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple6__item___2@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple6__item___2@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple6__item___2))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple6__item___2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple6__item___2 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
@x1))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple6__item___2 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple6__item___2))
:named typing_FStar.Pervasives.Native.__proj__Mktuple6__item___2))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple6__item___2 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.Mktuple6__2 @x6))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple6__item___2 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid proj_equation_FStar.Pervasives.Native.Mktuple6__2))
:named proj_equation_FStar.Pervasives.Native.Mktuple6__2))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple6__item___2>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple6__item___2/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple6__item___3>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'f -> Prims.Tot 'c
(declare-fun Tm_arrow_7d790bb96aadc2828cd88ef5143114e0 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_7d790bb96aadc2828cd88ef5143114e0
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___3; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_7d790bb96aadc2828cd88ef5143114e0
Tm_type)
:named kinding_Tm_arrow_7d790bb96aadc2828cd88ef5143114e0))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_7d790bb96aadc2828cd88ef5143114e0)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_7d790bb96aadc2828cd88ef5143114e0))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_7d790bb96aadc2828cd88ef5143114e0))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_7d790bb96aadc2828cd88ef5143114e0))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_7d790bb96aadc2828cd88ef5143114e0
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_7d790bb96aadc2828cd88ef5143114e0)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
(FStar.Pervasives.Native.tuple6 @x1
@x2
@x3
@x4
@x5
@x6)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_7d790bb96aadc2828cd88ef5143114e0.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_7d790bb96aadc2828cd88ef5143114e0))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_7d790bb96aadc2828cd88ef5143114e0))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_7d790bb96aadc2828cd88ef5143114e0))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple6__item___3@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
(FStar.Pervasives.Native.__proj__Mktuple6__item___3 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple6__item___3@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple6__item___3 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple6__item___3))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple6__item___3))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple6__item___3@tok
Tm_arrow_7d790bb96aadc2828cd88ef5143114e0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple6__item___3@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple6__item___3@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple6__item___3))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple6__item___3))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple6__item___3 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
@x2))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple6__item___3 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple6__item___3))
:named typing_FStar.Pervasives.Native.__proj__Mktuple6__item___3))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple6__item___3 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.Mktuple6__3 @x6))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple6__item___3 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid proj_equation_FStar.Pervasives.Native.Mktuple6__3))
:named proj_equation_FStar.Pervasives.Native.Mktuple6__3))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple6__item___3>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple6__item___3/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple6__item___4>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'f -> Prims.Tot 'd
(declare-fun Tm_arrow_9ac1fc4819cbc364e77988b8605dfbd2 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_9ac1fc4819cbc364e77988b8605dfbd2
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___4; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_9ac1fc4819cbc364e77988b8605dfbd2
Tm_type)
:named kinding_Tm_arrow_9ac1fc4819cbc364e77988b8605dfbd2))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_9ac1fc4819cbc364e77988b8605dfbd2)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_9ac1fc4819cbc364e77988b8605dfbd2))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_9ac1fc4819cbc364e77988b8605dfbd2))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_9ac1fc4819cbc364e77988b8605dfbd2))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_9ac1fc4819cbc364e77988b8605dfbd2
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_9ac1fc4819cbc364e77988b8605dfbd2)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
(FStar.Pervasives.Native.tuple6 @x1
@x2
@x3
@x4
@x5
@x6)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_9ac1fc4819cbc364e77988b8605dfbd2.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_9ac1fc4819cbc364e77988b8605dfbd2))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_9ac1fc4819cbc364e77988b8605dfbd2))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_9ac1fc4819cbc364e77988b8605dfbd2))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple6__item___4@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
(FStar.Pervasives.Native.__proj__Mktuple6__item___4 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple6__item___4@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple6__item___4 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple6__item___4))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple6__item___4))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple6__item___4@tok
Tm_arrow_9ac1fc4819cbc364e77988b8605dfbd2))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple6__item___4@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple6__item___4@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple6__item___4))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple6__item___4))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple6__item___4 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
@x3))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple6__item___4 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple6__item___4))
:named typing_FStar.Pervasives.Native.__proj__Mktuple6__item___4))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple6__item___4 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.Mktuple6__4 @x6))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple6__item___4 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid proj_equation_FStar.Pervasives.Native.Mktuple6__4))
:named proj_equation_FStar.Pervasives.Native.Mktuple6__4))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple6__item___4>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple6__item___4/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple6__item___5>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'f -> Prims.Tot 'e
(declare-fun Tm_arrow_4902efa5488190c456656843f7646562 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_4902efa5488190c456656843f7646562
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___5; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_4902efa5488190c456656843f7646562
Tm_type)
:named kinding_Tm_arrow_4902efa5488190c456656843f7646562))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_4902efa5488190c456656843f7646562)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_4902efa5488190c456656843f7646562))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_4902efa5488190c456656843f7646562))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_4902efa5488190c456656843f7646562))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_4902efa5488190c456656843f7646562
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_4902efa5488190c456656843f7646562)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
(FStar.Pervasives.Native.tuple6 @x1
@x2
@x3
@x4
@x5
@x6)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_4902efa5488190c456656843f7646562.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_4902efa5488190c456656843f7646562))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_4902efa5488190c456656843f7646562))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_4902efa5488190c456656843f7646562))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple6__item___5@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
(FStar.Pervasives.Native.__proj__Mktuple6__item___5 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple6__item___5@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple6__item___5 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple6__item___5))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple6__item___5))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple6__item___5@tok
Tm_arrow_4902efa5488190c456656843f7646562))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple6__item___5@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple6__item___5@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple6__item___5))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple6__item___5))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple6__item___5 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
@x4))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple6__item___5 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple6__item___5))
:named typing_FStar.Pervasives.Native.__proj__Mktuple6__item___5))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple6__item___5 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.Mktuple6__5 @x6))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple6__item___5 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid proj_equation_FStar.Pervasives.Native.Mktuple6__5))
:named proj_equation_FStar.Pervasives.Native.Mktuple6__5))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple6__item___5>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple6__item___5/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple6__item___6>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'f -> Prims.Tot 'f
(declare-fun Tm_arrow_45ca9c2b9710ead839b1f3bf7ef7a305 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_45ca9c2b9710ead839b1f3bf7ef7a305
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___6; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_45ca9c2b9710ead839b1f3bf7ef7a305
Tm_type)
:named kinding_Tm_arrow_45ca9c2b9710ead839b1f3bf7ef7a305))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_45ca9c2b9710ead839b1f3bf7ef7a305)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_45ca9c2b9710ead839b1f3bf7ef7a305))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_45ca9c2b9710ead839b1f3bf7ef7a305))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_45ca9c2b9710ead839b1f3bf7ef7a305))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_45ca9c2b9710ead839b1f3bf7ef7a305
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_45ca9c2b9710ead839b1f3bf7ef7a305)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
(FStar.Pervasives.Native.tuple6 @x1
@x2
@x3
@x4
@x5
@x6)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x6))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_45ca9c2b9710ead839b1f3bf7ef7a305.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_45ca9c2b9710ead839b1f3bf7ef7a305))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_45ca9c2b9710ead839b1f3bf7ef7a305))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_45ca9c2b9710ead839b1f3bf7ef7a305))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple6__item___6@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
(FStar.Pervasives.Native.__proj__Mktuple6__item___6 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple6__item___6@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple6__item___6 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple6__item___6))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple6__item___6))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple6__item___6@tok
Tm_arrow_45ca9c2b9710ead839b1f3bf7ef7a305))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple6__item___6@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple6__item___6@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple6__item___6))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple6__item___6))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple6__item___6 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
@x5))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple6__item___6 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple6__item___6))
:named typing_FStar.Pervasives.Native.__proj__Mktuple6__item___6))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple6__item___6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple6__item___6 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.Mktuple6__6 @x6))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple6__item___6 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid proj_equation_FStar.Pervasives.Native.Mktuple6__6))
:named proj_equation_FStar.Pervasives.Native.Mktuple6__6))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple6__item___6>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple6__item___6/>

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple7 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x6 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple7@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__7 (Term) Term)
;;;;;;;;;;;;;;;;_1:'a -> _2:'b -> _3:'c -> _4:'d -> _5:'e -> _6:'f -> _7:'g -> Prims.Tot ('a * 'b * 'g)
(declare-fun Tm_arrow_4be4d0827cb852d3f57a920e42b0e232 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple7
(declare-fun FStar.Pervasives.Native.Mktuple7@tok () Term)

; <Start encoding FStar.Pervasives.Native.tuple7>

; <start constructor FStar.Pervasives.Native.tuple7>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= 1160
(Term_constr_id (FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
 

:pattern ((FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid constructor_distinct_FStar.Pervasives.Native.tuple7))
:named constructor_distinct_FStar.Pervasives.Native.tuple7))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1160)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple7))))

; </end constructor FStar.Pervasives.Native.tuple7>
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (= 1161
(Term_constr_id FStar.Pervasives.Native.tuple7@tok))
:named fresh_token_FStar.Pervasives.Native.tuple7@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple7@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple7@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))

:pattern ((FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid token_correspondence_FStar.Pervasives.Native.tuple7@tok))
:named token_correspondence_FStar.Pervasives.Native.tuple7@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.tuple7@tok))
:named pre_kinding_FStar.Pervasives.Native.tuple7@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type))
(HasType (FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid kinding_FStar.Pervasives.Native.tuple7@tok))
:named kinding_FStar.Pervasives.Native.tuple7@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple7 @x2
@x3
@x4
@x5
@x6
@x7
@x8))
(= (FStar.Pervasives.Native.tuple7 @x2
@x3
@x4
@x5
@x6
@x7
@x8)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple7 @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid FStar.Pervasives.Native_pretyping_6b53da96265c34bc84c778bd6410b170))
:named FStar.Pervasives.Native_pretyping_6b53da96265c34bc84c778bd6410b170))

; </end encoding FStar.Pervasives.Native.tuple7>

; <Start encoding FStar.Pervasives.Native.Mktuple7>

; <start constructor FStar.Pervasives.Native.Mktuple7>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= 1167
(Term_constr_id (FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)))
 

:pattern ((FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
:qid constructor_distinct_FStar.Pervasives.Native.Mktuple7))
:named constructor_distinct_FStar.Pervasives.Native.Mktuple7))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= (FStar.Pervasives.Native.Mktuple7__a (FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
@x0)
 

:pattern ((FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple7__a))
:named projection_inverse_FStar.Pervasives.Native.Mktuple7__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= (FStar.Pervasives.Native.Mktuple7__b (FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
@x1)
 

:pattern ((FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple7__b))
:named projection_inverse_FStar.Pervasives.Native.Mktuple7__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= (FStar.Pervasives.Native.Mktuple7__c (FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
@x2)
 

:pattern ((FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple7__c))
:named projection_inverse_FStar.Pervasives.Native.Mktuple7__c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= (FStar.Pervasives.Native.Mktuple7__d (FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
@x3)
 

:pattern ((FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple7__d))
:named projection_inverse_FStar.Pervasives.Native.Mktuple7__d))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= (FStar.Pervasives.Native.Mktuple7__e (FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
@x4)
 

:pattern ((FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple7__e))
:named projection_inverse_FStar.Pervasives.Native.Mktuple7__e))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= (FStar.Pervasives.Native.Mktuple7__f (FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
@x5)
 

:pattern ((FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple7__f))
:named projection_inverse_FStar.Pervasives.Native.Mktuple7__f))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= (FStar.Pervasives.Native.Mktuple7__g (FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
@x6)
 

:pattern ((FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple7__g))
:named projection_inverse_FStar.Pervasives.Native.Mktuple7__g))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= (FStar.Pervasives.Native.Mktuple7__1 (FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
@x7)
 

:pattern ((FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple7__1))
:named projection_inverse_FStar.Pervasives.Native.Mktuple7__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= (FStar.Pervasives.Native.Mktuple7__2 (FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
@x8)
 

:pattern ((FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple7__2))
:named projection_inverse_FStar.Pervasives.Native.Mktuple7__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= (FStar.Pervasives.Native.Mktuple7__3 (FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
@x9)
 

:pattern ((FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple7__3))
:named projection_inverse_FStar.Pervasives.Native.Mktuple7__3))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= (FStar.Pervasives.Native.Mktuple7__4 (FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
@x10)
 

:pattern ((FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple7__4))
:named projection_inverse_FStar.Pervasives.Native.Mktuple7__4))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= (FStar.Pervasives.Native.Mktuple7__5 (FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
@x11)
 

:pattern ((FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple7__5))
:named projection_inverse_FStar.Pervasives.Native.Mktuple7__5))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= (FStar.Pervasives.Native.Mktuple7__6 (FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
@x12)
 

:pattern ((FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple7__6))
:named projection_inverse_FStar.Pervasives.Native.Mktuple7__6))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= (FStar.Pervasives.Native.Mktuple7__7 (FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
@x13)
 

:pattern ((FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple7__7))
:named projection_inverse_FStar.Pervasives.Native.Mktuple7__7))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1167)
(= __@x0
(FStar.Pervasives.Native.Mktuple7 (FStar.Pervasives.Native.Mktuple7__a __@x0)
(FStar.Pervasives.Native.Mktuple7__b __@x0)
(FStar.Pervasives.Native.Mktuple7__c __@x0)
(FStar.Pervasives.Native.Mktuple7__d __@x0)
(FStar.Pervasives.Native.Mktuple7__e __@x0)
(FStar.Pervasives.Native.Mktuple7__f __@x0)
(FStar.Pervasives.Native.Mktuple7__g __@x0)
(FStar.Pervasives.Native.Mktuple7__1 __@x0)
(FStar.Pervasives.Native.Mktuple7__2 __@x0)
(FStar.Pervasives.Native.Mktuple7__3 __@x0)
(FStar.Pervasives.Native.Mktuple7__4 __@x0)
(FStar.Pervasives.Native.Mktuple7__5 __@x0)
(FStar.Pervasives.Native.Mktuple7__6 __@x0)
(FStar.Pervasives.Native.Mktuple7__7 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple7>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_4be4d0827cb852d3f57a920e42b0e232
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_4be4d0827cb852d3f57a920e42b0e232
Tm_type)
:named kinding_Tm_arrow_4be4d0827cb852d3f57a920e42b0e232))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_4be4d0827cb852d3f57a920e42b0e232)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_4be4d0827cb852d3f57a920e42b0e232))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_4be4d0827cb852d3f57a920e42b0e232))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_4be4d0827cb852d3f57a920e42b0e232))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_4be4d0827cb852d3f57a920e42b0e232
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_4be4d0827cb852d3f57a920e42b0e232)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
@x1)
(HasType @x9
@x2)
(HasType @x10
@x3)
(HasType @x11
@x4)
(HasType @x12
@x5)
(HasType @x13
@x6)
(HasType @x14
@x7))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x14)
(FStar.Pervasives.Native.tuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x14))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_4be4d0827cb852d3f57a920e42b0e232.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_4be4d0827cb852d3f57a920e42b0e232))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_4be4d0827cb852d3f57a920e42b0e232))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_4be4d0827cb852d3f57a920e42b0e232))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (= 1170
(Term_constr_id FStar.Pervasives.Native.Mktuple7@tok))
:named fresh_token_FStar.Pervasives.Native.Mktuple7@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.Mktuple7@tok
Tm_arrow_4be4d0827cb852d3f57a920e42b0e232))
 

:pattern ((ApplyTT FStar.Pervasives.Native.Mktuple7@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.Mktuple7@tok))
:qid typing_tok_FStar.Pervasives.Native.Mktuple7@tok))
:named typing_tok_FStar.Pervasives.Native.Mktuple7@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.Mktuple7@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
(FStar.Pervasives.Native.Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.Mktuple7@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13))
:qid equality_tok_FStar.Pervasives.Native.Mktuple7@tok))
:named equality_tok_FStar.Pervasives.Native.Mktuple7@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x7
Tm_type)
(HasTypeFuel @u0
@x8
@x1)
(HasTypeFuel @u0
@x9
@x2)
(HasTypeFuel @u0
@x10
@x3)
(HasTypeFuel @u0
@x11
@x4)
(HasTypeFuel @u0
@x12
@x5)
(HasTypeFuel @u0
@x13
@x6)
(HasTypeFuel @u0
@x14
@x7))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14)
(FStar.Pervasives.Native.tuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14)
(FStar.Pervasives.Native.tuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7)))
:qid data_typing_intro_FStar.Pervasives.Native.Mktuple7@tok))
:named data_typing_intro_FStar.Pervasives.Native.Mktuple7@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14)
(FStar.Pervasives.Native.tuple7 @x15
@x16
@x17
@x18
@x19
@x20
@x21))
(and (HasTypeFuel @u0
@x21
Tm_type)
(HasTypeFuel @u0
@x14
@x21)
(HasTypeFuel @u0
@x20
Tm_type)
(HasTypeFuel @u0
@x13
@x20)
(HasTypeFuel @u0
@x19
Tm_type)
(HasTypeFuel @u0
@x12
@x19)
(HasTypeFuel @u0
@x18
Tm_type)
(HasTypeFuel @u0
@x11
@x18)
(HasTypeFuel @u0
@x17
Tm_type)
(HasTypeFuel @u0
@x10
@x17)
(HasTypeFuel @u0
@x16
Tm_type)
(HasTypeFuel @u0
@x9
@x16)
(HasTypeFuel @u0
@x15
Tm_type)
(HasTypeFuel @u0
@x8
@x15)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x7
Tm_type)
(HasTypeFuel @u0
@x8
@x1)
(HasTypeFuel @u0
@x9
@x2)
(HasTypeFuel @u0
@x10
@x3)
(HasTypeFuel @u0
@x11
@x4)
(HasTypeFuel @u0
@x12
@x5)
(HasTypeFuel @u0
@x13
@x6)
(HasTypeFuel @u0
@x14
@x7)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14)
(FStar.Pervasives.Native.tuple7 @x15
@x16
@x17
@x18
@x19
@x20
@x21)))
:qid data_elim_FStar.Pervasives.Native.Mktuple7))
:named data_elim_FStar.Pervasives.Native.Mktuple7))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14)
(FStar.Pervasives.Native.tuple7 @x15
@x16
@x17
@x18
@x19
@x20
@x21))
(and (Valid (Precedes @x8
(FStar.Pervasives.Native.Mktuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14)))
(Valid (Precedes @x9
(FStar.Pervasives.Native.Mktuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14)))
(Valid (Precedes @x10
(FStar.Pervasives.Native.Mktuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14)))
(Valid (Precedes @x11
(FStar.Pervasives.Native.Mktuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14)))
(Valid (Precedes @x12
(FStar.Pervasives.Native.Mktuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14)))
(Valid (Precedes @x13
(FStar.Pervasives.Native.Mktuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14)))
(Valid (Precedes @x14
(FStar.Pervasives.Native.Mktuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14)
(FStar.Pervasives.Native.tuple7 @x15
@x16
@x17
@x18
@x19
@x20
@x21)))
:qid subterm_ordering_FStar.Pervasives.Native.Mktuple7))
:named subterm_ordering_FStar.Pervasives.Native.Mktuple7))

; </end encoding FStar.Pervasives.Native.Mktuple7>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple7 @x2
@x3
@x4
@x5
@x6
@x7
@x8))
(and (is-FStar.Pervasives.Native.Mktuple7 @x1)
(= @x2
(FStar.Pervasives.Native.Mktuple7__a @x1))
(= @x3
(FStar.Pervasives.Native.Mktuple7__b @x1))
(= @x4
(FStar.Pervasives.Native.Mktuple7__c @x1))
(= @x5
(FStar.Pervasives.Native.Mktuple7__d @x1))
(= @x6
(FStar.Pervasives.Native.Mktuple7__e @x1))
(= @x7
(FStar.Pervasives.Native.Mktuple7__f @x1))
(= @x8
(FStar.Pervasives.Native.Mktuple7__g @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple7 @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.tuple7))
:named fuel_guarded_inversion_FStar.Pervasives.Native.tuple7))

; </end encoding >

; <Start encoding FStar.Pervasives.Native.tuple7_haseq>
;;;;;;;;;;;;;;;;Assumption: tuple7_haseq
;;; Fact-ids: Name FStar.Pervasives.Native.tuple7_haseq; Namespace FStar.Pervasives.Native
(assert (! 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41)
(Prims.hasEq @x0)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41)
(Prims.hasEq @x1)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41)
(Prims.hasEq @x2)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41)
(Prims.hasEq @x3)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41)
(Prims.hasEq @x4)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41)
(Prims.hasEq @x5)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41)
(Prims.hasEq @x6)
)
)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(51,0-59,41)
(Prims.hasEq (FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
)
)
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
:qid assumption_FStar.Pervasives.Native.tuple7_haseq))

:named assumption_FStar.Pervasives.Native.tuple7_haseq))

; </end encoding FStar.Pervasives.Native.tuple7_haseq>

; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple7>
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'g -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_bc1e750d04f01d381d7c63e81b8697d1 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_bc1e750d04f01d381d7c63e81b8697d1
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_bc1e750d04f01d381d7c63e81b8697d1 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_bc1e750d04f01d381d7c63e81b8697d1 @x0)
Tm_type))
:qid kinding_Tm_arrow_bc1e750d04f01d381d7c63e81b8697d1))
:named kinding_Tm_arrow_bc1e750d04f01d381d7c63e81b8697d1))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_bc1e750d04f01d381d7c63e81b8697d1 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_bc1e750d04f01d381d7c63e81b8697d1 @x2)))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_bc1e750d04f01d381d7c63e81b8697d1))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_bc1e750d04f01d381d7c63e81b8697d1))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_bc1e750d04f01d381d7c63e81b8697d1
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_bc1e750d04f01d381d7c63e81b8697d1 @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
Tm_type)
(HasType @x9
(FStar.Pervasives.Native.tuple7 @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_bc1e750d04f01d381d7c63e81b8697d1.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_bc1e750d04f01d381d7c63e81b8697d1 @x1)))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_bc1e750d04f01d381d7c63e81b8697d1))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_bc1e750d04f01d381d7c63e81b8697d1))
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.uu___is_Mktuple7@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
(FStar.Pervasives.Native.uu___is_Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.uu___is_Mktuple7@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid token_correspondence_FStar.Pervasives.Native.uu___is_Mktuple7))
:named token_correspondence_FStar.Pervasives.Native.uu___is_Mktuple7))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.uu___is_Mktuple7@tok
(Tm_arrow_bc1e750d04f01d381d7c63e81b8697d1 Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.Native.uu___is_Mktuple7@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.uu___is_Mktuple7@tok))
:qid function_token_typing_FStar.Pervasives.Native.uu___is_Mktuple7))
:named function_token_typing_FStar.Pervasives.Native.uu___is_Mktuple7))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(HasType (FStar.Pervasives.Native.uu___is_Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_FStar.Pervasives.Native.uu___is_Mktuple7))
:named typing_FStar.Pervasives.Native.uu___is_Mktuple7))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Native.uu___is_Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
(BoxBool (is-FStar.Pervasives.Native.Mktuple7 @x7)))
 

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid disc_equation_FStar.Pervasives.Native.Mktuple7))
:named disc_equation_FStar.Pervasives.Native.Mktuple7))

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple7>

; <Skipped FStar.Pervasives.Native.uu___is_Mktuple7/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___1>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'g -> Prims.Tot 'a
(declare-fun Tm_arrow_cfdfdc24b7e1267c05bed07df6aea066 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_cfdfdc24b7e1267c05bed07df6aea066
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___1; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_cfdfdc24b7e1267c05bed07df6aea066
Tm_type)
:named kinding_Tm_arrow_cfdfdc24b7e1267c05bed07df6aea066))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_cfdfdc24b7e1267c05bed07df6aea066)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_cfdfdc24b7e1267c05bed07df6aea066))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_cfdfdc24b7e1267c05bed07df6aea066))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_cfdfdc24b7e1267c05bed07df6aea066))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_cfdfdc24b7e1267c05bed07df6aea066
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_cfdfdc24b7e1267c05bed07df6aea066)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
(FStar.Pervasives.Native.tuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_cfdfdc24b7e1267c05bed07df6aea066.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_cfdfdc24b7e1267c05bed07df6aea066))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_cfdfdc24b7e1267c05bed07df6aea066))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_cfdfdc24b7e1267c05bed07df6aea066))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___1@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
(FStar.Pervasives.Native.__proj__Mktuple7__item___1 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___1@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___1 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple7__item___1))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple7__item___1))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple7__item___1@tok
Tm_arrow_cfdfdc24b7e1267c05bed07df6aea066))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___1@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple7__item___1@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple7__item___1))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple7__item___1))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple7__item___1 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
@x0))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___1 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple7__item___1))
:named typing_FStar.Pervasives.Native.__proj__Mktuple7__item___1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple7__item___1 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
(FStar.Pervasives.Native.Mktuple7__1 @x7))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___1 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid proj_equation_FStar.Pervasives.Native.Mktuple7__1))
:named proj_equation_FStar.Pervasives.Native.Mktuple7__1))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___1>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___1/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___2>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'g -> Prims.Tot 'b
(declare-fun Tm_arrow_88772e9c1eff3cee09de1db3fc8087ca () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_88772e9c1eff3cee09de1db3fc8087ca
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___2; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_88772e9c1eff3cee09de1db3fc8087ca
Tm_type)
:named kinding_Tm_arrow_88772e9c1eff3cee09de1db3fc8087ca))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_88772e9c1eff3cee09de1db3fc8087ca)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_88772e9c1eff3cee09de1db3fc8087ca))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_88772e9c1eff3cee09de1db3fc8087ca))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_88772e9c1eff3cee09de1db3fc8087ca))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_88772e9c1eff3cee09de1db3fc8087ca
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_88772e9c1eff3cee09de1db3fc8087ca)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
(FStar.Pervasives.Native.tuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_88772e9c1eff3cee09de1db3fc8087ca.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_88772e9c1eff3cee09de1db3fc8087ca))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_88772e9c1eff3cee09de1db3fc8087ca))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_88772e9c1eff3cee09de1db3fc8087ca))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___2@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
(FStar.Pervasives.Native.__proj__Mktuple7__item___2 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___2@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___2 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple7__item___2))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple7__item___2))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple7__item___2@tok
Tm_arrow_88772e9c1eff3cee09de1db3fc8087ca))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___2@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple7__item___2@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple7__item___2))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple7__item___2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple7__item___2 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
@x1))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___2 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple7__item___2))
:named typing_FStar.Pervasives.Native.__proj__Mktuple7__item___2))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple7__item___2 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
(FStar.Pervasives.Native.Mktuple7__2 @x7))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___2 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid proj_equation_FStar.Pervasives.Native.Mktuple7__2))
:named proj_equation_FStar.Pervasives.Native.Mktuple7__2))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___2>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___2/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___3>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'g -> Prims.Tot 'c
(declare-fun Tm_arrow_051405f28864bdc9643ed01eb3b92100 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_051405f28864bdc9643ed01eb3b92100
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___3; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_051405f28864bdc9643ed01eb3b92100
Tm_type)
:named kinding_Tm_arrow_051405f28864bdc9643ed01eb3b92100))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_051405f28864bdc9643ed01eb3b92100)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_051405f28864bdc9643ed01eb3b92100))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_051405f28864bdc9643ed01eb3b92100))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_051405f28864bdc9643ed01eb3b92100))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_051405f28864bdc9643ed01eb3b92100
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_051405f28864bdc9643ed01eb3b92100)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
(FStar.Pervasives.Native.tuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_051405f28864bdc9643ed01eb3b92100.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_051405f28864bdc9643ed01eb3b92100))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_051405f28864bdc9643ed01eb3b92100))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_051405f28864bdc9643ed01eb3b92100))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___3@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
(FStar.Pervasives.Native.__proj__Mktuple7__item___3 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___3@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___3 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple7__item___3))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple7__item___3))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple7__item___3@tok
Tm_arrow_051405f28864bdc9643ed01eb3b92100))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___3@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple7__item___3@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple7__item___3))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple7__item___3))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple7__item___3 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
@x2))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___3 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple7__item___3))
:named typing_FStar.Pervasives.Native.__proj__Mktuple7__item___3))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple7__item___3 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
(FStar.Pervasives.Native.Mktuple7__3 @x7))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___3 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid proj_equation_FStar.Pervasives.Native.Mktuple7__3))
:named proj_equation_FStar.Pervasives.Native.Mktuple7__3))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___3>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___3/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___4>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'g -> Prims.Tot 'd
(declare-fun Tm_arrow_9a2d52aef28944ddfbe3d4af8c624d0b () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_9a2d52aef28944ddfbe3d4af8c624d0b
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___4; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_9a2d52aef28944ddfbe3d4af8c624d0b
Tm_type)
:named kinding_Tm_arrow_9a2d52aef28944ddfbe3d4af8c624d0b))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_9a2d52aef28944ddfbe3d4af8c624d0b)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_9a2d52aef28944ddfbe3d4af8c624d0b))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_9a2d52aef28944ddfbe3d4af8c624d0b))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_9a2d52aef28944ddfbe3d4af8c624d0b))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_9a2d52aef28944ddfbe3d4af8c624d0b
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_9a2d52aef28944ddfbe3d4af8c624d0b)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
(FStar.Pervasives.Native.tuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_9a2d52aef28944ddfbe3d4af8c624d0b.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_9a2d52aef28944ddfbe3d4af8c624d0b))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_9a2d52aef28944ddfbe3d4af8c624d0b))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_9a2d52aef28944ddfbe3d4af8c624d0b))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___4@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
(FStar.Pervasives.Native.__proj__Mktuple7__item___4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___4@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple7__item___4))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple7__item___4))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple7__item___4@tok
Tm_arrow_9a2d52aef28944ddfbe3d4af8c624d0b))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___4@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple7__item___4@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple7__item___4))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple7__item___4))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple7__item___4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
@x3))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple7__item___4))
:named typing_FStar.Pervasives.Native.__proj__Mktuple7__item___4))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple7__item___4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
(FStar.Pervasives.Native.Mktuple7__4 @x7))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid proj_equation_FStar.Pervasives.Native.Mktuple7__4))
:named proj_equation_FStar.Pervasives.Native.Mktuple7__4))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___4>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___4/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___5>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'g -> Prims.Tot 'e
(declare-fun Tm_arrow_959ecc63baf89362269f0a0ccd5668b0 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_959ecc63baf89362269f0a0ccd5668b0
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___5; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_959ecc63baf89362269f0a0ccd5668b0
Tm_type)
:named kinding_Tm_arrow_959ecc63baf89362269f0a0ccd5668b0))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_959ecc63baf89362269f0a0ccd5668b0)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_959ecc63baf89362269f0a0ccd5668b0))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_959ecc63baf89362269f0a0ccd5668b0))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_959ecc63baf89362269f0a0ccd5668b0))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_959ecc63baf89362269f0a0ccd5668b0
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_959ecc63baf89362269f0a0ccd5668b0)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
(FStar.Pervasives.Native.tuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_959ecc63baf89362269f0a0ccd5668b0.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_959ecc63baf89362269f0a0ccd5668b0))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_959ecc63baf89362269f0a0ccd5668b0))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_959ecc63baf89362269f0a0ccd5668b0))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___5@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
(FStar.Pervasives.Native.__proj__Mktuple7__item___5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___5@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple7__item___5))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple7__item___5))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple7__item___5@tok
Tm_arrow_959ecc63baf89362269f0a0ccd5668b0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___5@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple7__item___5@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple7__item___5))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple7__item___5))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple7__item___5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
@x4))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple7__item___5))
:named typing_FStar.Pervasives.Native.__proj__Mktuple7__item___5))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple7__item___5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
(FStar.Pervasives.Native.Mktuple7__5 @x7))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid proj_equation_FStar.Pervasives.Native.Mktuple7__5))
:named proj_equation_FStar.Pervasives.Native.Mktuple7__5))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___5>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___5/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___6>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'g -> Prims.Tot 'f
(declare-fun Tm_arrow_dcdffe9de61b4fc93e96c6fef1350cf2 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_dcdffe9de61b4fc93e96c6fef1350cf2
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___6; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_dcdffe9de61b4fc93e96c6fef1350cf2
Tm_type)
:named kinding_Tm_arrow_dcdffe9de61b4fc93e96c6fef1350cf2))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_dcdffe9de61b4fc93e96c6fef1350cf2)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_dcdffe9de61b4fc93e96c6fef1350cf2))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_dcdffe9de61b4fc93e96c6fef1350cf2))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_dcdffe9de61b4fc93e96c6fef1350cf2))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_dcdffe9de61b4fc93e96c6fef1350cf2
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_dcdffe9de61b4fc93e96c6fef1350cf2)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
(FStar.Pervasives.Native.tuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x6))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_dcdffe9de61b4fc93e96c6fef1350cf2.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_dcdffe9de61b4fc93e96c6fef1350cf2))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_dcdffe9de61b4fc93e96c6fef1350cf2))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_dcdffe9de61b4fc93e96c6fef1350cf2))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___6@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
(FStar.Pervasives.Native.__proj__Mktuple7__item___6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___6@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple7__item___6))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple7__item___6))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple7__item___6@tok
Tm_arrow_dcdffe9de61b4fc93e96c6fef1350cf2))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___6@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple7__item___6@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple7__item___6))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple7__item___6))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple7__item___6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
@x5))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple7__item___6))
:named typing_FStar.Pervasives.Native.__proj__Mktuple7__item___6))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple7__item___6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
(FStar.Pervasives.Native.Mktuple7__6 @x7))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid proj_equation_FStar.Pervasives.Native.Mktuple7__6))
:named proj_equation_FStar.Pervasives.Native.Mktuple7__6))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___6>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___6/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___7>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'g -> Prims.Tot 'g
(declare-fun Tm_arrow_85e89735c9356e795787b0e5b5a2f363 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_85e89735c9356e795787b0e5b5a2f363
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___7; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_85e89735c9356e795787b0e5b5a2f363
Tm_type)
:named kinding_Tm_arrow_85e89735c9356e795787b0e5b5a2f363))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_85e89735c9356e795787b0e5b5a2f363)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_85e89735c9356e795787b0e5b5a2f363))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_85e89735c9356e795787b0e5b5a2f363))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_85e89735c9356e795787b0e5b5a2f363))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_85e89735c9356e795787b0e5b5a2f363
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_85e89735c9356e795787b0e5b5a2f363)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
(FStar.Pervasives.Native.tuple7 @x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x7))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_85e89735c9356e795787b0e5b5a2f363.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_85e89735c9356e795787b0e5b5a2f363))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_85e89735c9356e795787b0e5b5a2f363))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_85e89735c9356e795787b0e5b5a2f363))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___7@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
(FStar.Pervasives.Native.__proj__Mktuple7__item___7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___7@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple7__item___7))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple7__item___7))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple7__item___7@tok
Tm_arrow_85e89735c9356e795787b0e5b5a2f363))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple7__item___7@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple7__item___7@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple7__item___7))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple7__item___7))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple7__item___7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
@x6))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple7__item___7))
:named typing_FStar.Pervasives.Native.__proj__Mktuple7__item___7))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple7__item___7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple7__item___7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
(FStar.Pervasives.Native.Mktuple7__7 @x7))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple7__item___7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid proj_equation_FStar.Pervasives.Native.Mktuple7__7))
:named proj_equation_FStar.Pervasives.Native.Mktuple7__7))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___7>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___7/>

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple8 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x7 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple8@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__8 (Term) Term)
;;;;;;;;;;;;;;;;_1:'a -> _2:'b -> _3:'c -> _4:'d -> _5:'e -> _6:'f -> _7:'g -> _8:'h -> Prims.Tot ('a * 'b * 'h)
(declare-fun Tm_arrow_7493b9132d0860b9d4513189a97e9cc2 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple8
(declare-fun FStar.Pervasives.Native.Mktuple8@tok () Term)

; <Start encoding FStar.Pervasives.Native.tuple8>

; <start constructor FStar.Pervasives.Native.tuple8>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= 1187
(Term_constr_id (FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)))
 

:pattern ((FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid constructor_distinct_FStar.Pervasives.Native.tuple8))
:named constructor_distinct_FStar.Pervasives.Native.tuple8))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1187)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple8))))

; </end constructor FStar.Pervasives.Native.tuple8>
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (= 1188
(Term_constr_id FStar.Pervasives.Native.tuple8@tok))
:named fresh_token_FStar.Pervasives.Native.tuple8@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple8@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple8@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))

:pattern ((FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid token_correspondence_FStar.Pervasives.Native.tuple8@tok))
:named token_correspondence_FStar.Pervasives.Native.tuple8@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.tuple8@tok))
:named pre_kinding_FStar.Pervasives.Native.tuple8@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type))
(HasType (FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid kinding_FStar.Pervasives.Native.tuple8@tok))
:named kinding_FStar.Pervasives.Native.tuple8@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple8 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
(= (FStar.Pervasives.Native.tuple8 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple8 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
:qid FStar.Pervasives.Native_pretyping_db058ca688f8c62b81e4ac913379b0df))
:named FStar.Pervasives.Native_pretyping_db058ca688f8c62b81e4ac913379b0df))

; </end encoding FStar.Pervasives.Native.tuple8>

; <Start encoding FStar.Pervasives.Native.Mktuple8>

; <start constructor FStar.Pervasives.Native.Mktuple8>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (= 1194
(Term_constr_id (FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15)))
 

:pattern ((FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
:qid constructor_distinct_FStar.Pervasives.Native.Mktuple8))
:named constructor_distinct_FStar.Pervasives.Native.Mktuple8))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (= (FStar.Pervasives.Native.Mktuple8__a (FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
@x0)
 

:pattern ((FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple8__a))
:named projection_inverse_FStar.Pervasives.Native.Mktuple8__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (= (FStar.Pervasives.Native.Mktuple8__b (FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
@x1)
 

:pattern ((FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple8__b))
:named projection_inverse_FStar.Pervasives.Native.Mktuple8__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (= (FStar.Pervasives.Native.Mktuple8__c (FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
@x2)
 

:pattern ((FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple8__c))
:named projection_inverse_FStar.Pervasives.Native.Mktuple8__c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (= (FStar.Pervasives.Native.Mktuple8__d (FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
@x3)
 

:pattern ((FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple8__d))
:named projection_inverse_FStar.Pervasives.Native.Mktuple8__d))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (= (FStar.Pervasives.Native.Mktuple8__e (FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
@x4)
 

:pattern ((FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple8__e))
:named projection_inverse_FStar.Pervasives.Native.Mktuple8__e))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (= (FStar.Pervasives.Native.Mktuple8__f (FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
@x5)
 

:pattern ((FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple8__f))
:named projection_inverse_FStar.Pervasives.Native.Mktuple8__f))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (= (FStar.Pervasives.Native.Mktuple8__g (FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
@x6)
 

:pattern ((FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple8__g))
:named projection_inverse_FStar.Pervasives.Native.Mktuple8__g))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (= (FStar.Pervasives.Native.Mktuple8__h (FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
@x7)
 

:pattern ((FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple8__h))
:named projection_inverse_FStar.Pervasives.Native.Mktuple8__h))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (= (FStar.Pervasives.Native.Mktuple8__1 (FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
@x8)
 

:pattern ((FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple8__1))
:named projection_inverse_FStar.Pervasives.Native.Mktuple8__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (= (FStar.Pervasives.Native.Mktuple8__2 (FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
@x9)
 

:pattern ((FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple8__2))
:named projection_inverse_FStar.Pervasives.Native.Mktuple8__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (= (FStar.Pervasives.Native.Mktuple8__3 (FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
@x10)
 

:pattern ((FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple8__3))
:named projection_inverse_FStar.Pervasives.Native.Mktuple8__3))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (= (FStar.Pervasives.Native.Mktuple8__4 (FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
@x11)
 

:pattern ((FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple8__4))
:named projection_inverse_FStar.Pervasives.Native.Mktuple8__4))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (= (FStar.Pervasives.Native.Mktuple8__5 (FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
@x12)
 

:pattern ((FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple8__5))
:named projection_inverse_FStar.Pervasives.Native.Mktuple8__5))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (= (FStar.Pervasives.Native.Mktuple8__6 (FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
@x13)
 

:pattern ((FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple8__6))
:named projection_inverse_FStar.Pervasives.Native.Mktuple8__6))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (= (FStar.Pervasives.Native.Mktuple8__7 (FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
@x14)
 

:pattern ((FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple8__7))
:named projection_inverse_FStar.Pervasives.Native.Mktuple8__7))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (= (FStar.Pervasives.Native.Mktuple8__8 (FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
@x15)
 

:pattern ((FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple8__8))
:named projection_inverse_FStar.Pervasives.Native.Mktuple8__8))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1194)
(= __@x0
(FStar.Pervasives.Native.Mktuple8 (FStar.Pervasives.Native.Mktuple8__a __@x0)
(FStar.Pervasives.Native.Mktuple8__b __@x0)
(FStar.Pervasives.Native.Mktuple8__c __@x0)
(FStar.Pervasives.Native.Mktuple8__d __@x0)
(FStar.Pervasives.Native.Mktuple8__e __@x0)
(FStar.Pervasives.Native.Mktuple8__f __@x0)
(FStar.Pervasives.Native.Mktuple8__g __@x0)
(FStar.Pervasives.Native.Mktuple8__h __@x0)
(FStar.Pervasives.Native.Mktuple8__1 __@x0)
(FStar.Pervasives.Native.Mktuple8__2 __@x0)
(FStar.Pervasives.Native.Mktuple8__3 __@x0)
(FStar.Pervasives.Native.Mktuple8__4 __@x0)
(FStar.Pervasives.Native.Mktuple8__5 __@x0)
(FStar.Pervasives.Native.Mktuple8__6 __@x0)
(FStar.Pervasives.Native.Mktuple8__7 __@x0)
(FStar.Pervasives.Native.Mktuple8__8 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple8>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_7493b9132d0860b9d4513189a97e9cc2
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_7493b9132d0860b9d4513189a97e9cc2
Tm_type)
:named kinding_Tm_arrow_7493b9132d0860b9d4513189a97e9cc2))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_7493b9132d0860b9d4513189a97e9cc2)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_7493b9132d0860b9d4513189a97e9cc2))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_7493b9132d0860b9d4513189a97e9cc2))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_7493b9132d0860b9d4513189a97e9cc2))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_7493b9132d0860b9d4513189a97e9cc2
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_7493b9132d0860b9d4513189a97e9cc2)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
Tm_type)
(HasType @x9
@x1)
(HasType @x10
@x2)
(HasType @x11
@x3)
(HasType @x12
@x4)
(HasType @x13
@x5)
(HasType @x14
@x6)
(HasType @x15
@x7)
(HasType @x16
@x8))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x14)
@x15)
@x16)
(FStar.Pervasives.Native.tuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x14)
@x15)
@x16))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_7493b9132d0860b9d4513189a97e9cc2.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_7493b9132d0860b9d4513189a97e9cc2))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_7493b9132d0860b9d4513189a97e9cc2))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_7493b9132d0860b9d4513189a97e9cc2))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (= 1197
(Term_constr_id FStar.Pervasives.Native.Mktuple8@tok))
:named fresh_token_FStar.Pervasives.Native.Mktuple8@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.Mktuple8@tok
Tm_arrow_7493b9132d0860b9d4513189a97e9cc2))
 

:pattern ((ApplyTT FStar.Pervasives.Native.Mktuple8@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.Mktuple8@tok))
:qid typing_tok_FStar.Pervasives.Native.Mktuple8@tok))
:named typing_tok_FStar.Pervasives.Native.Mktuple8@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.Mktuple8@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x14)
@x15)
(FStar.Pervasives.Native.Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.Mktuple8@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x14)
@x15))
:qid equality_tok_FStar.Pervasives.Native.Mktuple8@tok))
:named equality_tok_FStar.Pervasives.Native.Mktuple8@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x7
Tm_type)
(HasTypeFuel @u0
@x8
Tm_type)
(HasTypeFuel @u0
@x9
@x1)
(HasTypeFuel @u0
@x10
@x2)
(HasTypeFuel @u0
@x11
@x3)
(HasTypeFuel @u0
@x12
@x4)
(HasTypeFuel @u0
@x13
@x5)
(HasTypeFuel @u0
@x14
@x6)
(HasTypeFuel @u0
@x15
@x7)
(HasTypeFuel @u0
@x16
@x8))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16)
(FStar.Pervasives.Native.tuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16)
(FStar.Pervasives.Native.tuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid data_typing_intro_FStar.Pervasives.Native.Mktuple8@tok))
:named data_typing_intro_FStar.Pervasives.Native.Mktuple8@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term) (@x22 Term) (@x23 Term) (@x24 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16)
(FStar.Pervasives.Native.tuple8 @x17
@x18
@x19
@x20
@x21
@x22
@x23
@x24))
(and (HasTypeFuel @u0
@x24
Tm_type)
(HasTypeFuel @u0
@x16
@x24)
(HasTypeFuel @u0
@x23
Tm_type)
(HasTypeFuel @u0
@x15
@x23)
(HasTypeFuel @u0
@x22
Tm_type)
(HasTypeFuel @u0
@x14
@x22)
(HasTypeFuel @u0
@x21
Tm_type)
(HasTypeFuel @u0
@x13
@x21)
(HasTypeFuel @u0
@x20
Tm_type)
(HasTypeFuel @u0
@x12
@x20)
(HasTypeFuel @u0
@x19
Tm_type)
(HasTypeFuel @u0
@x11
@x19)
(HasTypeFuel @u0
@x18
Tm_type)
(HasTypeFuel @u0
@x10
@x18)
(HasTypeFuel @u0
@x17
Tm_type)
(HasTypeFuel @u0
@x9
@x17)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x7
Tm_type)
(HasTypeFuel @u0
@x8
Tm_type)
(HasTypeFuel @u0
@x9
@x1)
(HasTypeFuel @u0
@x10
@x2)
(HasTypeFuel @u0
@x11
@x3)
(HasTypeFuel @u0
@x12
@x4)
(HasTypeFuel @u0
@x13
@x5)
(HasTypeFuel @u0
@x14
@x6)
(HasTypeFuel @u0
@x15
@x7)
(HasTypeFuel @u0
@x16
@x8)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16)
(FStar.Pervasives.Native.tuple8 @x17
@x18
@x19
@x20
@x21
@x22
@x23
@x24)))
:qid data_elim_FStar.Pervasives.Native.Mktuple8))
:named data_elim_FStar.Pervasives.Native.Mktuple8))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term) (@x22 Term) (@x23 Term) (@x24 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16)
(FStar.Pervasives.Native.tuple8 @x17
@x18
@x19
@x20
@x21
@x22
@x23
@x24))
(and (Valid (Precedes @x9
(FStar.Pervasives.Native.Mktuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16)))
(Valid (Precedes @x10
(FStar.Pervasives.Native.Mktuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16)))
(Valid (Precedes @x11
(FStar.Pervasives.Native.Mktuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16)))
(Valid (Precedes @x12
(FStar.Pervasives.Native.Mktuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16)))
(Valid (Precedes @x13
(FStar.Pervasives.Native.Mktuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16)))
(Valid (Precedes @x14
(FStar.Pervasives.Native.Mktuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16)))
(Valid (Precedes @x15
(FStar.Pervasives.Native.Mktuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16)))
(Valid (Precedes @x16
(FStar.Pervasives.Native.Mktuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16)
(FStar.Pervasives.Native.tuple8 @x17
@x18
@x19
@x20
@x21
@x22
@x23
@x24)))
:qid subterm_ordering_FStar.Pervasives.Native.Mktuple8))
:named subterm_ordering_FStar.Pervasives.Native.Mktuple8))

; </end encoding FStar.Pervasives.Native.Mktuple8>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple8 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
(and (is-FStar.Pervasives.Native.Mktuple8 @x1)
(= @x2
(FStar.Pervasives.Native.Mktuple8__a @x1))
(= @x3
(FStar.Pervasives.Native.Mktuple8__b @x1))
(= @x4
(FStar.Pervasives.Native.Mktuple8__c @x1))
(= @x5
(FStar.Pervasives.Native.Mktuple8__d @x1))
(= @x6
(FStar.Pervasives.Native.Mktuple8__e @x1))
(= @x7
(FStar.Pervasives.Native.Mktuple8__f @x1))
(= @x8
(FStar.Pervasives.Native.Mktuple8__g @x1))
(= @x9
(FStar.Pervasives.Native.Mktuple8__h @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple8 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.tuple8))
:named fuel_guarded_inversion_FStar.Pervasives.Native.tuple8))

; </end encoding >

; <Start encoding FStar.Pervasives.Native.tuple8_haseq>
;;;;;;;;;;;;;;;;Assumption: tuple8_haseq
;;; Fact-ids: Name FStar.Pervasives.Native.tuple8_haseq; Namespace FStar.Pervasives.Native
(assert (! 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44)
(Prims.hasEq @x0)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44)
(Prims.hasEq @x1)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44)
(Prims.hasEq @x2)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44)
(Prims.hasEq @x3)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44)
(Prims.hasEq @x4)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44)
(Prims.hasEq @x5)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44)
(Prims.hasEq @x6)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44)
(Prims.hasEq @x7)
)
)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.Native.fst(62,0-71,44)
(Prims.hasEq (FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
)
)
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)))
:qid assumption_FStar.Pervasives.Native.tuple8_haseq))

:named assumption_FStar.Pervasives.Native.tuple8_haseq))

; </end encoding FStar.Pervasives.Native.tuple8_haseq>

; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple8>
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'h -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_302ec1d59a0c160d8b944503f142e361 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_302ec1d59a0c160d8b944503f142e361
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_302ec1d59a0c160d8b944503f142e361 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_302ec1d59a0c160d8b944503f142e361 @x0)
Tm_type))
:qid kinding_Tm_arrow_302ec1d59a0c160d8b944503f142e361))
:named kinding_Tm_arrow_302ec1d59a0c160d8b944503f142e361))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_302ec1d59a0c160d8b944503f142e361 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_302ec1d59a0c160d8b944503f142e361 @x2)))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_302ec1d59a0c160d8b944503f142e361))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_302ec1d59a0c160d8b944503f142e361))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_302ec1d59a0c160d8b944503f142e361
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_302ec1d59a0c160d8b944503f142e361 @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
Tm_type)
(HasType @x9
Tm_type)
(HasType @x10
(FStar.Pervasives.Native.tuple8 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_302ec1d59a0c160d8b944503f142e361.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_302ec1d59a0c160d8b944503f142e361 @x1)))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_302ec1d59a0c160d8b944503f142e361))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_302ec1d59a0c160d8b944503f142e361))
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.uu___is_Mktuple8@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
(FStar.Pervasives.Native.uu___is_Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.uu___is_Mktuple8@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid token_correspondence_FStar.Pervasives.Native.uu___is_Mktuple8))
:named token_correspondence_FStar.Pervasives.Native.uu___is_Mktuple8))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.uu___is_Mktuple8@tok
(Tm_arrow_302ec1d59a0c160d8b944503f142e361 Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.Native.uu___is_Mktuple8@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.uu___is_Mktuple8@tok))
:qid function_token_typing_FStar.Pervasives.Native.uu___is_Mktuple8))
:named function_token_typing_FStar.Pervasives.Native.uu___is_Mktuple8))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(HasType (FStar.Pervasives.Native.uu___is_Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid typing_FStar.Pervasives.Native.uu___is_Mktuple8))
:named typing_FStar.Pervasives.Native.uu___is_Mktuple8))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Mktuple8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (FStar.Pervasives.Native.uu___is_Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(BoxBool (is-FStar.Pervasives.Native.Mktuple8 @x8)))
 

:pattern ((FStar.Pervasives.Native.uu___is_Mktuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid disc_equation_FStar.Pervasives.Native.Mktuple8))
:named disc_equation_FStar.Pervasives.Native.Mktuple8))

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple8>

; <Skipped FStar.Pervasives.Native.uu___is_Mktuple8/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___1>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'h -> Prims.Tot 'a
(declare-fun Tm_arrow_300677279975362e42b142f0238e1ce1 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_300677279975362e42b142f0238e1ce1
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___1; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_300677279975362e42b142f0238e1ce1
Tm_type)
:named kinding_Tm_arrow_300677279975362e42b142f0238e1ce1))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_300677279975362e42b142f0238e1ce1)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_300677279975362e42b142f0238e1ce1))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_300677279975362e42b142f0238e1ce1))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_300677279975362e42b142f0238e1ce1))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_300677279975362e42b142f0238e1ce1
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_300677279975362e42b142f0238e1ce1)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
Tm_type)
(HasType @x9
(FStar.Pervasives.Native.tuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_300677279975362e42b142f0238e1ce1.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_300677279975362e42b142f0238e1ce1))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_300677279975362e42b142f0238e1ce1))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_300677279975362e42b142f0238e1ce1))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___1@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
(FStar.Pervasives.Native.__proj__Mktuple8__item___1 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___1@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___1 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple8__item___1))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple8__item___1))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple8__item___1@tok
Tm_arrow_300677279975362e42b142f0238e1ce1))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___1@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple8__item___1@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple8__item___1))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple8__item___1))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple8__item___1 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___1 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple8__item___1))
:named typing_FStar.Pervasives.Native.__proj__Mktuple8__item___1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___1; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple8__item___1 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(FStar.Pervasives.Native.Mktuple8__1 @x8))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___1 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid proj_equation_FStar.Pervasives.Native.Mktuple8__1))
:named proj_equation_FStar.Pervasives.Native.Mktuple8__1))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___1>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___1/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___2>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'h -> Prims.Tot 'b
(declare-fun Tm_arrow_d24e3d13d5f3ba68fc4414c96e3c8794 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_d24e3d13d5f3ba68fc4414c96e3c8794
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___2; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_d24e3d13d5f3ba68fc4414c96e3c8794
Tm_type)
:named kinding_Tm_arrow_d24e3d13d5f3ba68fc4414c96e3c8794))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_d24e3d13d5f3ba68fc4414c96e3c8794)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_d24e3d13d5f3ba68fc4414c96e3c8794))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_d24e3d13d5f3ba68fc4414c96e3c8794))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_d24e3d13d5f3ba68fc4414c96e3c8794))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d24e3d13d5f3ba68fc4414c96e3c8794
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_d24e3d13d5f3ba68fc4414c96e3c8794)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
Tm_type)
(HasType @x9
(FStar.Pervasives.Native.tuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_d24e3d13d5f3ba68fc4414c96e3c8794.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_d24e3d13d5f3ba68fc4414c96e3c8794))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_d24e3d13d5f3ba68fc4414c96e3c8794))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_d24e3d13d5f3ba68fc4414c96e3c8794))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___2@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
(FStar.Pervasives.Native.__proj__Mktuple8__item___2 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___2@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___2 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple8__item___2))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple8__item___2))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple8__item___2@tok
Tm_arrow_d24e3d13d5f3ba68fc4414c96e3c8794))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___2@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple8__item___2@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple8__item___2))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple8__item___2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple8__item___2 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x1))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___2 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple8__item___2))
:named typing_FStar.Pervasives.Native.__proj__Mktuple8__item___2))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___2; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple8__item___2 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(FStar.Pervasives.Native.Mktuple8__2 @x8))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___2 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid proj_equation_FStar.Pervasives.Native.Mktuple8__2))
:named proj_equation_FStar.Pervasives.Native.Mktuple8__2))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___2>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___2/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___3>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'h -> Prims.Tot 'c
(declare-fun Tm_arrow_d3ed25c81ffc65c9f57b03935726ef00 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_d3ed25c81ffc65c9f57b03935726ef00
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___3; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_d3ed25c81ffc65c9f57b03935726ef00
Tm_type)
:named kinding_Tm_arrow_d3ed25c81ffc65c9f57b03935726ef00))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_d3ed25c81ffc65c9f57b03935726ef00)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_d3ed25c81ffc65c9f57b03935726ef00))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_d3ed25c81ffc65c9f57b03935726ef00))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_d3ed25c81ffc65c9f57b03935726ef00))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d3ed25c81ffc65c9f57b03935726ef00
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_d3ed25c81ffc65c9f57b03935726ef00)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
Tm_type)
(HasType @x9
(FStar.Pervasives.Native.tuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_d3ed25c81ffc65c9f57b03935726ef00.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_d3ed25c81ffc65c9f57b03935726ef00))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_d3ed25c81ffc65c9f57b03935726ef00))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_d3ed25c81ffc65c9f57b03935726ef00))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___3@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
(FStar.Pervasives.Native.__proj__Mktuple8__item___3 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___3@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___3 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple8__item___3))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple8__item___3))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple8__item___3@tok
Tm_arrow_d3ed25c81ffc65c9f57b03935726ef00))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___3@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple8__item___3@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple8__item___3))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple8__item___3))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple8__item___3 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x2))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___3 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple8__item___3))
:named typing_FStar.Pervasives.Native.__proj__Mktuple8__item___3))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___3; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple8__item___3 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(FStar.Pervasives.Native.Mktuple8__3 @x8))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___3 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid proj_equation_FStar.Pervasives.Native.Mktuple8__3))
:named proj_equation_FStar.Pervasives.Native.Mktuple8__3))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___3>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___3/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___4>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'h -> Prims.Tot 'd
(declare-fun Tm_arrow_fb2b0d135fd95ad5a0c9931d87ebd9cf () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_fb2b0d135fd95ad5a0c9931d87ebd9cf
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___4; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_fb2b0d135fd95ad5a0c9931d87ebd9cf
Tm_type)
:named kinding_Tm_arrow_fb2b0d135fd95ad5a0c9931d87ebd9cf))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_fb2b0d135fd95ad5a0c9931d87ebd9cf)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_fb2b0d135fd95ad5a0c9931d87ebd9cf))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_fb2b0d135fd95ad5a0c9931d87ebd9cf))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_fb2b0d135fd95ad5a0c9931d87ebd9cf))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_fb2b0d135fd95ad5a0c9931d87ebd9cf
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_fb2b0d135fd95ad5a0c9931d87ebd9cf)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
Tm_type)
(HasType @x9
(FStar.Pervasives.Native.tuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_fb2b0d135fd95ad5a0c9931d87ebd9cf.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_fb2b0d135fd95ad5a0c9931d87ebd9cf))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_fb2b0d135fd95ad5a0c9931d87ebd9cf))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_fb2b0d135fd95ad5a0c9931d87ebd9cf))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___4@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
(FStar.Pervasives.Native.__proj__Mktuple8__item___4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___4@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple8__item___4))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple8__item___4))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple8__item___4@tok
Tm_arrow_fb2b0d135fd95ad5a0c9931d87ebd9cf))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___4@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple8__item___4@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple8__item___4))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple8__item___4))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple8__item___4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x3))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple8__item___4))
:named typing_FStar.Pervasives.Native.__proj__Mktuple8__item___4))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___4; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple8__item___4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(FStar.Pervasives.Native.Mktuple8__4 @x8))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid proj_equation_FStar.Pervasives.Native.Mktuple8__4))
:named proj_equation_FStar.Pervasives.Native.Mktuple8__4))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___4>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___4/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___5>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'h -> Prims.Tot 'e
(declare-fun Tm_arrow_02d3b5b79bf8b1df357192967171c4e9 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_02d3b5b79bf8b1df357192967171c4e9
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___5; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_02d3b5b79bf8b1df357192967171c4e9
Tm_type)
:named kinding_Tm_arrow_02d3b5b79bf8b1df357192967171c4e9))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_02d3b5b79bf8b1df357192967171c4e9)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_02d3b5b79bf8b1df357192967171c4e9))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_02d3b5b79bf8b1df357192967171c4e9))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_02d3b5b79bf8b1df357192967171c4e9))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_02d3b5b79bf8b1df357192967171c4e9
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_02d3b5b79bf8b1df357192967171c4e9)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
Tm_type)
(HasType @x9
(FStar.Pervasives.Native.tuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_02d3b5b79bf8b1df357192967171c4e9.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_02d3b5b79bf8b1df357192967171c4e9))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_02d3b5b79bf8b1df357192967171c4e9))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_02d3b5b79bf8b1df357192967171c4e9))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___5@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
(FStar.Pervasives.Native.__proj__Mktuple8__item___5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___5@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple8__item___5))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple8__item___5))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple8__item___5@tok
Tm_arrow_02d3b5b79bf8b1df357192967171c4e9))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___5@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple8__item___5@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple8__item___5))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple8__item___5))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple8__item___5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x4))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple8__item___5))
:named typing_FStar.Pervasives.Native.__proj__Mktuple8__item___5))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___5; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple8__item___5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(FStar.Pervasives.Native.Mktuple8__5 @x8))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid proj_equation_FStar.Pervasives.Native.Mktuple8__5))
:named proj_equation_FStar.Pervasives.Native.Mktuple8__5))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___5>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___5/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___6>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'h -> Prims.Tot 'f
(declare-fun Tm_arrow_59613b37f4c818dae9a7b082d5155f29 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_59613b37f4c818dae9a7b082d5155f29
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___6; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_59613b37f4c818dae9a7b082d5155f29
Tm_type)
:named kinding_Tm_arrow_59613b37f4c818dae9a7b082d5155f29))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_59613b37f4c818dae9a7b082d5155f29)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_59613b37f4c818dae9a7b082d5155f29))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_59613b37f4c818dae9a7b082d5155f29))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_59613b37f4c818dae9a7b082d5155f29))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_59613b37f4c818dae9a7b082d5155f29
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_59613b37f4c818dae9a7b082d5155f29)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
Tm_type)
(HasType @x9
(FStar.Pervasives.Native.tuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x6))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_59613b37f4c818dae9a7b082d5155f29.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_59613b37f4c818dae9a7b082d5155f29))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_59613b37f4c818dae9a7b082d5155f29))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_59613b37f4c818dae9a7b082d5155f29))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___6@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
(FStar.Pervasives.Native.__proj__Mktuple8__item___6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___6@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple8__item___6))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple8__item___6))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple8__item___6@tok
Tm_arrow_59613b37f4c818dae9a7b082d5155f29))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___6@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple8__item___6@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple8__item___6))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple8__item___6))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple8__item___6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x5))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple8__item___6))
:named typing_FStar.Pervasives.Native.__proj__Mktuple8__item___6))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___6; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple8__item___6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(FStar.Pervasives.Native.Mktuple8__6 @x8))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid proj_equation_FStar.Pervasives.Native.Mktuple8__6))
:named proj_equation_FStar.Pervasives.Native.Mktuple8__6))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___6>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___6/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___7>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'h -> Prims.Tot 'g
(declare-fun Tm_arrow_642316967e62d4894b4c5052196039ab () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_642316967e62d4894b4c5052196039ab
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___7; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_642316967e62d4894b4c5052196039ab
Tm_type)
:named kinding_Tm_arrow_642316967e62d4894b4c5052196039ab))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_642316967e62d4894b4c5052196039ab)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_642316967e62d4894b4c5052196039ab))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_642316967e62d4894b4c5052196039ab))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_642316967e62d4894b4c5052196039ab))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_642316967e62d4894b4c5052196039ab
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_642316967e62d4894b4c5052196039ab)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
Tm_type)
(HasType @x9
(FStar.Pervasives.Native.tuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x7))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_642316967e62d4894b4c5052196039ab.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_642316967e62d4894b4c5052196039ab))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_642316967e62d4894b4c5052196039ab))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_642316967e62d4894b4c5052196039ab))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___7@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
(FStar.Pervasives.Native.__proj__Mktuple8__item___7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___7@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple8__item___7))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple8__item___7))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple8__item___7@tok
Tm_arrow_642316967e62d4894b4c5052196039ab))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___7@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple8__item___7@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple8__item___7))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple8__item___7))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple8__item___7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x6))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple8__item___7))
:named typing_FStar.Pervasives.Native.__proj__Mktuple8__item___7))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___7; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple8__item___7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(FStar.Pervasives.Native.Mktuple8__7 @x8))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___7 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid proj_equation_FStar.Pervasives.Native.Mktuple8__7))
:named proj_equation_FStar.Pervasives.Native.Mktuple8__7))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___7>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___7/>

; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___8>
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:'a * 'b * 'h -> Prims.Tot 'h
(declare-fun Tm_arrow_a984cc683b69e3e0d41bb0853d6a1664 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a984cc683b69e3e0d41bb0853d6a1664
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___8; Namespace FStar.Pervasives.Native
(assert (! (HasType Tm_arrow_a984cc683b69e3e0d41bb0853d6a1664
Tm_type)
:named kinding_Tm_arrow_a984cc683b69e3e0d41bb0853d6a1664))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_a984cc683b69e3e0d41bb0853d6a1664)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_a984cc683b69e3e0d41bb0853d6a1664))
:qid FStar.Pervasives.Native_pre_typing_Tm_arrow_a984cc683b69e3e0d41bb0853d6a1664))
:named FStar.Pervasives.Native_pre_typing_Tm_arrow_a984cc683b69e3e0d41bb0853d6a1664))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a984cc683b69e3e0d41bb0853d6a1664
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_a984cc683b69e3e0d41bb0853d6a1664)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
Tm_type)
(HasType @x9
(FStar.Pervasives.Native.tuple8 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x8))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_a984cc683b69e3e0d41bb0853d6a1664.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_a984cc683b69e3e0d41bb0853d6a1664))
:qid FStar.Pervasives.Native_interpretation_Tm_arrow_a984cc683b69e3e0d41bb0853d6a1664))
:named FStar.Pervasives.Native_interpretation_Tm_arrow_a984cc683b69e3e0d41bb0853d6a1664))
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___8@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
(FStar.Pervasives.Native.__proj__Mktuple8__item___8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___8@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid token_correspondence_FStar.Pervasives.Native.__proj__Mktuple8__item___8))
:named token_correspondence_FStar.Pervasives.Native.__proj__Mktuple8__item___8))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Native.__proj__Mktuple8__item___8@tok
Tm_arrow_a984cc683b69e3e0d41bb0853d6a1664))
 

:pattern ((ApplyTT FStar.Pervasives.Native.__proj__Mktuple8__item___8@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Native.__proj__Mktuple8__item___8@tok))
:qid function_token_typing_FStar.Pervasives.Native.__proj__Mktuple8__item___8))
:named function_token_typing_FStar.Pervasives.Native.__proj__Mktuple8__item___8))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
Tm_type)
(HasType @x7
Tm_type)
(HasType @x8
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple8__item___8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x7))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple8__item___8))
:named typing_FStar.Pervasives.Native.__proj__Mktuple8__item___8))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple8__item___8; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple8__item___8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(FStar.Pervasives.Native.Mktuple8__8 @x8))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple8__item___8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid proj_equation_FStar.Pervasives.Native.Mktuple8__8))
:named proj_equation_FStar.Pervasives.Native.Mktuple8__8))

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___8>

; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___8/>

; End Externals for module FStar.Pervasives.Native

; 
(push)

; Externals for module FStar.Pervasives

; <Skipped FStar.Pervasives.DIV/>

; <Skipped />

; <Skipped FStar.Pervasives.Div/>

; <Skipped FStar.Pervasives.Dv/>

; <Skipped FStar.Pervasives.EXT/>

; <Start encoding FStar.Pervasives.st_pre_h>
(declare-fun FStar.Pervasives.st_pre_h (Term) Term)

(declare-fun FStar.Pervasives.st_pre_h@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.st_pre_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.st_pre_h@tok
@x0)
(FStar.Pervasives.st_pre_h @x0))
 

:pattern ((ApplyTT FStar.Pervasives.st_pre_h@tok
@x0))

:pattern ((FStar.Pervasives.st_pre_h @x0))
:qid token_correspondence_FStar.Pervasives.st_pre_h))
:named token_correspondence_FStar.Pervasives.st_pre_h))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.st_pre_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.st_pre_h@tok
Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
 

:pattern ((ApplyTT FStar.Pervasives.st_pre_h@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.st_pre_h@tok))
:qid function_token_typing_FStar.Pervasives.st_pre_h))
:named function_token_typing_FStar.Pervasives.st_pre_h))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.st_pre_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Pervasives.st_pre_h @x0)
Tm_type))
 

:pattern ((FStar.Pervasives.st_pre_h @x0))
:qid typing_FStar.Pervasives.st_pre_h))
:named typing_FStar.Pervasives.st_pre_h))

;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.st_pre_h
;;; Fact-ids: Name FStar.Pervasives.st_pre_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (FStar.Pervasives.st_pre_h @x0)
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
 

:pattern ((FStar.Pervasives.st_pre_h @x0))
:qid equation_FStar.Pervasives.st_pre_h))
:named equation_FStar.Pervasives.st_pre_h))

; </end encoding FStar.Pervasives.st_pre_h>

; <Start encoding FStar.Pervasives.st_post_h>
(declare-fun FStar.Pervasives.st_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_post_h@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.st_post_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.st_post_h@tok
@x0)
@x1)
(FStar.Pervasives.st_post_h @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.st_post_h@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.st_post_h @x0
@x1))
:qid token_correspondence_FStar.Pervasives.st_post_h))
:named token_correspondence_FStar.Pervasives.st_post_h))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.st_post_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.st_post_h@tok
Tm_arrow_30967c52768a603d18eb4835e5ba8f79))
 

:pattern ((ApplyTT FStar.Pervasives.st_post_h@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.st_post_h@tok))
:qid function_token_typing_FStar.Pervasives.st_post_h))
:named function_token_typing_FStar.Pervasives.st_post_h))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.st_post_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (FStar.Pervasives.st_post_h @x0
@x1)
Tm_type))
 

:pattern ((FStar.Pervasives.st_post_h @x0
@x1))
:qid typing_FStar.Pervasives.st_post_h))
:named typing_FStar.Pervasives.st_post_h))
;;;;;;;;;;;;;;;;uu___157323:a -> uu___157324:heap -> Prims.Tot Type0
(declare-fun Tm_arrow_a7f622c21c9bfd4b48ff31ec14061ca8 (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a7f622c21c9bfd4b48ff31ec14061ca8
;;; Fact-ids: Name FStar.Pervasives.st_post_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_a7f622c21c9bfd4b48ff31ec14061ca8 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_a7f622c21c9bfd4b48ff31ec14061ca8 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_a7f622c21c9bfd4b48ff31ec14061ca8))
:named kinding_Tm_arrow_a7f622c21c9bfd4b48ff31ec14061ca8))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.st_post_h; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_a7f622c21c9bfd4b48ff31ec14061ca8 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_a7f622c21c9bfd4b48ff31ec14061ca8 @x2
@x3)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_a7f622c21c9bfd4b48ff31ec14061ca8))
:named FStar.Pervasives_pre_typing_Tm_arrow_a7f622c21c9bfd4b48ff31ec14061ca8))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a7f622c21c9bfd4b48ff31ec14061ca8
;;; Fact-ids: Name FStar.Pervasives.st_post_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_a7f622c21c9bfd4b48ff31ec14061ca8 @x1
@x2))
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
@x2)
(HasType @x4
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x3)
@x4)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT @x0
@x3)
@x4))
:qid FStar.Pervasives_interpretation_Tm_arrow_a7f622c21c9bfd4b48ff31ec14061ca8.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_a7f622c21c9bfd4b48ff31ec14061ca8 @x1
@x2)))
:qid FStar.Pervasives_interpretation_Tm_arrow_a7f622c21c9bfd4b48ff31ec14061ca8))
:named FStar.Pervasives_interpretation_Tm_arrow_a7f622c21c9bfd4b48ff31ec14061ca8))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.st_post_h
;;; Fact-ids: Name FStar.Pervasives.st_post_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.st_post_h @x0
@x1)
(Tm_arrow_a7f622c21c9bfd4b48ff31ec14061ca8 @x0
@x1))
 

:pattern ((FStar.Pervasives.st_post_h @x0
@x1))
:qid equation_FStar.Pervasives.st_post_h))
:named equation_FStar.Pervasives.st_post_h))

; </end encoding FStar.Pervasives.st_post_h>

; <Start encoding FStar.Pervasives.st_wp_h>
(declare-fun FStar.Pervasives.st_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_wp_h@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.st_wp_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.st_wp_h@tok
@x0)
@x1)
(FStar.Pervasives.st_wp_h @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.st_wp_h@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.st_wp_h @x0
@x1))
:qid token_correspondence_FStar.Pervasives.st_wp_h))
:named token_correspondence_FStar.Pervasives.st_wp_h))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.st_wp_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.st_wp_h@tok
Tm_arrow_30967c52768a603d18eb4835e5ba8f79))
 

:pattern ((ApplyTT FStar.Pervasives.st_wp_h@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.st_wp_h@tok))
:qid function_token_typing_FStar.Pervasives.st_wp_h))
:named function_token_typing_FStar.Pervasives.st_wp_h))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.st_wp_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (FStar.Pervasives.st_wp_h @x0
@x1)
Tm_type))
 

:pattern ((FStar.Pervasives.st_wp_h @x0
@x1))
:qid typing_FStar.Pervasives.st_wp_h))
:named typing_FStar.Pervasives.st_wp_h))
;;;;;;;;;;;;;;;;uu___157338:FStar.Pervasives.st_post_h heap a -> Prims.Tot (FStar.Pervasives.st_pre_h heap)
(declare-fun Tm_arrow_1114487a196323b3ca7d5d0b38969957 (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_1114487a196323b3ca7d5d0b38969957
;;; Fact-ids: Name FStar.Pervasives.st_wp_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_1114487a196323b3ca7d5d0b38969957 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_1114487a196323b3ca7d5d0b38969957 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_1114487a196323b3ca7d5d0b38969957))
:named kinding_Tm_arrow_1114487a196323b3ca7d5d0b38969957))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.st_wp_h; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_1114487a196323b3ca7d5d0b38969957 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_1114487a196323b3ca7d5d0b38969957 @x2
@x3)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_1114487a196323b3ca7d5d0b38969957))
:named FStar.Pervasives_pre_typing_Tm_arrow_1114487a196323b3ca7d5d0b38969957))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_1114487a196323b3ca7d5d0b38969957
;;; Fact-ids: Name FStar.Pervasives.st_wp_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_1114487a196323b3ca7d5d0b38969957 @x1
@x2))
(forall ((@x3 Term))
 (! (implies (HasType @x3
(FStar.Pervasives.st_post_h @x2
@x1))
(HasType (ApplyTT @x0
@x3)
(FStar.Pervasives.st_pre_h @x2)))
 

:pattern ((ApplyTT @x0
@x3))
:qid FStar.Pervasives_interpretation_Tm_arrow_1114487a196323b3ca7d5d0b38969957.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_1114487a196323b3ca7d5d0b38969957 @x1
@x2)))
:qid FStar.Pervasives_interpretation_Tm_arrow_1114487a196323b3ca7d5d0b38969957))
:named FStar.Pervasives_interpretation_Tm_arrow_1114487a196323b3ca7d5d0b38969957))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.st_wp_h
;;; Fact-ids: Name FStar.Pervasives.st_wp_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.st_wp_h @x0
@x1)
(Tm_arrow_1114487a196323b3ca7d5d0b38969957 @x1
@x0))
 

:pattern ((FStar.Pervasives.st_wp_h @x0
@x1))
:qid equation_FStar.Pervasives.st_wp_h))
:named equation_FStar.Pervasives.st_wp_h))

; </end encoding FStar.Pervasives.st_wp_h>

; <Start encoding FStar.Pervasives.st_return>
(declare-fun FStar.Pervasives.st_return (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap:Type ->...
(declare-fun Tm_arrow_6063ac6933424db827f3b16039aceca7 () Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_6063ac6933424db827f3b16039aceca7
;;; Fact-ids: Name FStar.Pervasives.st_return; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_6063ac6933424db827f3b16039aceca7
Tm_type)
:named kinding_Tm_arrow_6063ac6933424db827f3b16039aceca7))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.st_return; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_6063ac6933424db827f3b16039aceca7)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_6063ac6933424db827f3b16039aceca7))
:qid FStar.Pervasives_pre_typing_Tm_arrow_6063ac6933424db827f3b16039aceca7))
:named FStar.Pervasives_pre_typing_Tm_arrow_6063ac6933424db827f3b16039aceca7))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_6063ac6933424db827f3b16039aceca7
;;; Fact-ids: Name FStar.Pervasives.st_return; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_6063ac6933424db827f3b16039aceca7)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
@x2)
(HasType @x4
(FStar.Pervasives.st_post_h @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid FStar.Pervasives_interpretation_Tm_arrow_6063ac6933424db827f3b16039aceca7.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_6063ac6933424db827f3b16039aceca7))
:qid FStar.Pervasives_interpretation_Tm_arrow_6063ac6933424db827f3b16039aceca7))
:named FStar.Pervasives_interpretation_Tm_arrow_6063ac6933424db827f3b16039aceca7))
(declare-fun FStar.Pervasives.st_return@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.st_return; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.st_return@tok
@x0)
@x1)
@x2)
@x3)
(FStar.Pervasives.st_return @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.st_return@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((FStar.Pervasives.st_return @x0
@x1
@x2
@x3))
:qid token_correspondence_FStar.Pervasives.st_return))
:named token_correspondence_FStar.Pervasives.st_return))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.st_return; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.st_return@tok
Tm_arrow_6063ac6933424db827f3b16039aceca7))
 

:pattern ((ApplyTT FStar.Pervasives.st_return@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.st_return@tok))
:qid function_token_typing_FStar.Pervasives.st_return))
:named function_token_typing_FStar.Pervasives.st_return))

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.st_return; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
@x1)
(HasType @x3
(FStar.Pervasives.st_post_h @x0
@x1)))
(HasType (FStar.Pervasives.st_return @x0
@x1
@x2
@x3)
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0)))
 

:pattern ((FStar.Pervasives.st_return @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives.st_return))
:named typing_FStar.Pervasives.st_return))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.st_return
;;; Fact-ids: Name FStar.Pervasives.st_return; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.st_return @x0
@x1
@x2
@x3)
(ApplyTT @x3
@x2))
 

:pattern ((FStar.Pervasives.st_return @x0
@x1
@x2
@x3))
:qid equation_FStar.Pervasives.st_return))
:named equation_FStar.Pervasives.st_return))

; </end encoding FStar.Pervasives.st_return>

; <Start encoding FStar.Pervasives.st_bind_wp>
;;;;;;;;;;;;;;;;uu___157388:a -> Prims.GTot (FStar.Pervasives.st_wp_h heap b)
(declare-fun Tm_arrow_d9eac583d9f115ef0dc2cf4de1079b38 (Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_d9eac583d9f115ef0dc2cf4de1079b38
;;; Fact-ids: Name FStar.Pervasives.st_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_d9eac583d9f115ef0dc2cf4de1079b38 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_d9eac583d9f115ef0dc2cf4de1079b38 @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_d9eac583d9f115ef0dc2cf4de1079b38))
:named kinding_Tm_arrow_d9eac583d9f115ef0dc2cf4de1079b38))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.st_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_d9eac583d9f115ef0dc2cf4de1079b38 @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_d9eac583d9f115ef0dc2cf4de1079b38 @x2
@x3
@x4)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_d9eac583d9f115ef0dc2cf4de1079b38))
:named FStar.Pervasives_pre_typing_Tm_arrow_d9eac583d9f115ef0dc2cf4de1079b38))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d9eac583d9f115ef0dc2cf4de1079b38
;;; Fact-ids: Name FStar.Pervasives.st_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_d9eac583d9f115ef0dc2cf4de1079b38 @x1
@x2
@x3))
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x3)
(HasType (ApplyTT @x0
@x4)
(FStar.Pervasives.st_wp_h @x2
@x1)))
 

:pattern ((ApplyTT @x0
@x4))
:qid FStar.Pervasives_interpretation_Tm_arrow_d9eac583d9f115ef0dc2cf4de1079b38.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_d9eac583d9f115ef0dc2cf4de1079b38 @x1
@x2
@x3)))
:qid FStar.Pervasives_interpretation_Tm_arrow_d9eac583d9f115ef0dc2cf4de1079b38))
:named FStar.Pervasives_interpretation_Tm_arrow_d9eac583d9f115ef0dc2cf4de1079b38))
(declare-fun FStar.Pervasives.st_bind_wp (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap:Type ->...
(declare-fun Tm_arrow_c89a507d37bce525c784ce4c49ca4e78 (Term) Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_c89a507d37bce525c784ce4c49ca4e78
;;; Fact-ids: Name FStar.Pervasives.st_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_c89a507d37bce525c784ce4c49ca4e78 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_c89a507d37bce525c784ce4c49ca4e78 @x0)
Tm_type))
:qid kinding_Tm_arrow_c89a507d37bce525c784ce4c49ca4e78))
:named kinding_Tm_arrow_c89a507d37bce525c784ce4c49ca4e78))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.st_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_c89a507d37bce525c784ce4c49ca4e78 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_c89a507d37bce525c784ce4c49ca4e78 @x2)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_c89a507d37bce525c784ce4c49ca4e78))
:named FStar.Pervasives_pre_typing_Tm_arrow_c89a507d37bce525c784ce4c49ca4e78))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c89a507d37bce525c784ce4c49ca4e78
;;; Fact-ids: Name FStar.Pervasives.st_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_c89a507d37bce525c784ce4c49ca4e78 @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
@x1)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
(FStar.Pervasives.st_wp_h @x2
@x4))
(HasType @x7
(Tm_arrow_d9eac583d9f115ef0dc2cf4de1079b38 @x5
@x2
@x4))
(HasType @x8
(FStar.Pervasives.st_post_h @x2
@x5))
(HasType @x9
@x2))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9))
:qid FStar.Pervasives_interpretation_Tm_arrow_c89a507d37bce525c784ce4c49ca4e78.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_c89a507d37bce525c784ce4c49ca4e78 @x1)))
:qid FStar.Pervasives_interpretation_Tm_arrow_c89a507d37bce525c784ce4c49ca4e78))
:named FStar.Pervasives_interpretation_Tm_arrow_c89a507d37bce525c784ce4c49ca4e78))
(declare-fun FStar.Pervasives.st_bind_wp@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.st_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.st_bind_wp@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
(FStar.Pervasives.st_bind_wp @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.st_bind_wp@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))

:pattern ((FStar.Pervasives.st_bind_wp @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid token_correspondence_FStar.Pervasives.st_bind_wp))
:named token_correspondence_FStar.Pervasives.st_bind_wp))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.st_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.st_bind_wp@tok
(Tm_arrow_c89a507d37bce525c784ce4c49ca4e78 Prims.range)))
 

:pattern ((ApplyTT FStar.Pervasives.st_bind_wp@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.st_bind_wp@tok))
:qid function_token_typing_FStar.Pervasives.st_bind_wp))
:named function_token_typing_FStar.Pervasives.st_bind_wp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.st_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.range)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(FStar.Pervasives.st_wp_h @x0
@x2))
(HasType @x5
(Tm_arrow_d9eac583d9f115ef0dc2cf4de1079b38 @x3
@x0
@x2))
(HasType @x6
(FStar.Pervasives.st_post_h @x0
@x3))
(HasType @x7
@x0))
(HasType (FStar.Pervasives.st_bind_wp @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_type))
 

:pattern ((FStar.Pervasives.st_bind_wp @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_FStar.Pervasives.st_bind_wp))
:named typing_FStar.Pervasives.st_bind_wp))


(declare-fun FStar.Pervasives_Tm_abs_baff24c8285d3e1fde12d492db37eb6f (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_FStar.Pervasives_Tm_abs_baff24c8285d3e1fde12d492db37eb6f
;;; Fact-ids: Name FStar.Pervasives.st_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (FStar.Pervasives_Tm_abs_baff24c8285d3e1fde12d492db37eb6f @x0
@x1
@x2
@x3)
(Tm_arrow_a7f622c21c9bfd4b48ff31ec14061ca8 @x2
@x3))
 

:pattern ((FStar.Pervasives_Tm_abs_baff24c8285d3e1fde12d492db37eb6f @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives_Tm_abs_baff24c8285d3e1fde12d492db37eb6f))
:named typing_FStar.Pervasives_Tm_abs_baff24c8285d3e1fde12d492db37eb6f))
;;;;;;;;;;;;;;;;interpretation_FStar.Pervasives_Tm_abs_baff24c8285d3e1fde12d492db37eb6f
;;; Fact-ids: Name FStar.Pervasives.st_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (FStar.Pervasives_Tm_abs_baff24c8285d3e1fde12d492db37eb6f @x2
@x3
@x4
@x5)
@x0)
@x1)
(ApplyTT (ApplyTT (ApplyTT @x2
@x0)
@x3)
@x1))
 

:pattern ((ApplyTT (ApplyTT (FStar.Pervasives_Tm_abs_baff24c8285d3e1fde12d492db37eb6f @x2
@x3
@x4
@x5)
@x0)
@x1))
:qid interpretation_FStar.Pervasives_Tm_abs_baff24c8285d3e1fde12d492db37eb6f))
:named interpretation_FStar.Pervasives_Tm_abs_baff24c8285d3e1fde12d492db37eb6f))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.st_bind_wp
;;; Fact-ids: Name FStar.Pervasives.st_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.st_bind_wp @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
(ApplyTT (ApplyTT @x4
(FStar.Pervasives_Tm_abs_baff24c8285d3e1fde12d492db37eb6f @x5
@x6
@x0
@x2))
@x7))
 

:pattern ((FStar.Pervasives.st_bind_wp @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid equation_FStar.Pervasives.st_bind_wp))
:named equation_FStar.Pervasives.st_bind_wp))

; </end encoding FStar.Pervasives.st_bind_wp>

; <Start encoding FStar.Pervasives.st_if_then_else>
(declare-fun FStar.Pervasives.st_if_then_else (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap:Type ->...
(declare-fun Tm_arrow_799858c6d23af8e41f168327f7df9938 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_799858c6d23af8e41f168327f7df9938
;;; Fact-ids: Name FStar.Pervasives.st_if_then_else; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_799858c6d23af8e41f168327f7df9938
Tm_type)
:named kinding_Tm_arrow_799858c6d23af8e41f168327f7df9938))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.st_if_then_else; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_799858c6d23af8e41f168327f7df9938)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_799858c6d23af8e41f168327f7df9938))
:qid FStar.Pervasives_pre_typing_Tm_arrow_799858c6d23af8e41f168327f7df9938))
:named FStar.Pervasives_pre_typing_Tm_arrow_799858c6d23af8e41f168327f7df9938))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_799858c6d23af8e41f168327f7df9938
;;; Fact-ids: Name FStar.Pervasives.st_if_then_else; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_799858c6d23af8e41f168327f7df9938)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(FStar.Pervasives.st_wp_h @x1
@x2))
(HasType @x5
(FStar.Pervasives.st_wp_h @x1
@x2))
(HasType @x6
(FStar.Pervasives.st_post_h @x1
@x2))
(HasType @x7
@x1))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))
:qid FStar.Pervasives_interpretation_Tm_arrow_799858c6d23af8e41f168327f7df9938.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_799858c6d23af8e41f168327f7df9938))
:qid FStar.Pervasives_interpretation_Tm_arrow_799858c6d23af8e41f168327f7df9938))
:named FStar.Pervasives_interpretation_Tm_arrow_799858c6d23af8e41f168327f7df9938))
(declare-fun FStar.Pervasives.st_if_then_else@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.st_if_then_else; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.st_if_then_else@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
(FStar.Pervasives.st_if_then_else @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.st_if_then_else@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))

:pattern ((FStar.Pervasives.st_if_then_else @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid token_correspondence_FStar.Pervasives.st_if_then_else))
:named token_correspondence_FStar.Pervasives.st_if_then_else))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.st_if_then_else; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.st_if_then_else@tok
Tm_arrow_799858c6d23af8e41f168327f7df9938))
 

:pattern ((ApplyTT FStar.Pervasives.st_if_then_else@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.st_if_then_else@tok))
:qid function_token_typing_FStar.Pervasives.st_if_then_else))
:named function_token_typing_FStar.Pervasives.st_if_then_else))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.st_if_then_else; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.st_wp_h @x0
@x1))
(HasType @x4
(FStar.Pervasives.st_wp_h @x0
@x1))
(HasType @x5
(FStar.Pervasives.st_post_h @x0
@x1))
(HasType @x6
@x0))
(HasType (FStar.Pervasives.st_if_then_else @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
 

:pattern ((FStar.Pervasives.st_if_then_else @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid typing_FStar.Pervasives.st_if_then_else))
:named typing_FStar.Pervasives.st_if_then_else))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.st_if_then_else
;;; Fact-ids: Name FStar.Pervasives.st_if_then_else; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (FStar.Pervasives.st_if_then_else @x0
@x1
@x2
@x3
@x4
@x5
@x6)
(Prims.l_and (Prims.l_imp @x2
(ApplyTT (ApplyTT @x3
@x5)
@x6))
(Prims.l_imp (Prims.l_not @x2)
(ApplyTT (ApplyTT @x4
@x5)
@x6))))
 

:pattern ((FStar.Pervasives.st_if_then_else @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid equation_FStar.Pervasives.st_if_then_else))
:named equation_FStar.Pervasives.st_if_then_else))

; </end encoding FStar.Pervasives.st_if_then_else>

; <Start encoding FStar.Pervasives.st_ite_wp>
(declare-fun FStar.Pervasives.st_ite_wp (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap:Type ->...
(declare-fun Tm_arrow_f095291dac14d1add0576badcd705afd () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_f095291dac14d1add0576badcd705afd
;;; Fact-ids: Name FStar.Pervasives.st_ite_wp; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_f095291dac14d1add0576badcd705afd
Tm_type)
:named kinding_Tm_arrow_f095291dac14d1add0576badcd705afd))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.st_ite_wp; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_f095291dac14d1add0576badcd705afd)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_f095291dac14d1add0576badcd705afd))
:qid FStar.Pervasives_pre_typing_Tm_arrow_f095291dac14d1add0576badcd705afd))
:named FStar.Pervasives_pre_typing_Tm_arrow_f095291dac14d1add0576badcd705afd))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_f095291dac14d1add0576badcd705afd
;;; Fact-ids: Name FStar.Pervasives.st_ite_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_f095291dac14d1add0576badcd705afd)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.st_wp_h @x1
@x2))
(HasType @x4
(FStar.Pervasives.st_post_h @x1
@x2))
(HasType @x5
@x1))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid FStar.Pervasives_interpretation_Tm_arrow_f095291dac14d1add0576badcd705afd.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_f095291dac14d1add0576badcd705afd))
:qid FStar.Pervasives_interpretation_Tm_arrow_f095291dac14d1add0576badcd705afd))
:named FStar.Pervasives_interpretation_Tm_arrow_f095291dac14d1add0576badcd705afd))
(declare-fun FStar.Pervasives.st_ite_wp@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.st_ite_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.st_ite_wp@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(FStar.Pervasives.st_ite_wp @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.st_ite_wp@tok
@x0)
@x1)
@x2)
@x3)
@x4))

:pattern ((FStar.Pervasives.st_ite_wp @x0
@x1
@x2
@x3
@x4))
:qid token_correspondence_FStar.Pervasives.st_ite_wp))
:named token_correspondence_FStar.Pervasives.st_ite_wp))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.st_ite_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.st_ite_wp@tok
Tm_arrow_f095291dac14d1add0576badcd705afd))
 

:pattern ((ApplyTT FStar.Pervasives.st_ite_wp@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.st_ite_wp@tok))
:qid function_token_typing_FStar.Pervasives.st_ite_wp))
:named function_token_typing_FStar.Pervasives.st_ite_wp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.st_ite_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.st_wp_h @x0
@x1))
(HasType @x3
(FStar.Pervasives.st_post_h @x0
@x1))
(HasType @x4
@x0))
(HasType (FStar.Pervasives.st_ite_wp @x0
@x1
@x2
@x3
@x4)
Tm_type))
 

:pattern ((FStar.Pervasives.st_ite_wp @x0
@x1
@x2
@x3
@x4))
:qid typing_FStar.Pervasives.st_ite_wp))
:named typing_FStar.Pervasives.st_ite_wp))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.st_ite_wp
;;; Fact-ids: Name FStar.Pervasives.st_ite_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Valid (FStar.Pervasives.st_ite_wp @x0
@x1
@x2
@x3
@x4))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(44,5-46,13); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(44,5-46,13)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(FStar.Pervasives.st_post_h @x0
@x1))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(45,2-45,77); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(45,2-45,77)
(forall ((@x6 Term) (@x7 Term))
 (! 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(45,57-45,76); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(45,57-45,76)
(iff 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(45,57-45,62); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(45,57-45,62)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(45,57-45,62); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(45,57-45,62)
(ApplyTT (ApplyTT @x5
@x6)
@x7)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(45,68-45,76); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(45,68-45,76)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(45,68-45,76); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(45,68-45,76)
(ApplyTT (ApplyTT @x3
@x6)
@x7)
)
)

 

:pattern ((ApplyTT (ApplyTT @x5
@x6)
@x7))
:qid equation_FStar.Pervasives.st_ite_wp.2))
)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(46,6-46,13); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(46,6-46,13)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(46,6-46,13); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(46,6-46,13)
(ApplyTT (ApplyTT @x2
@x5)
@x4)
)
)
 
;;no pats
:qid equation_FStar.Pervasives.st_ite_wp.1))
)
 

:pattern ((Valid (FStar.Pervasives.st_ite_wp @x0
@x1
@x2
@x3
@x4)))
:qid equation_FStar.Pervasives.st_ite_wp))
:named equation_FStar.Pervasives.st_ite_wp))

; </end encoding FStar.Pervasives.st_ite_wp>

; <Start encoding FStar.Pervasives.st_stronger>
(declare-fun FStar.Pervasives.st_stronger (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap:Type ->...
(declare-fun Tm_arrow_de5c5776bfc7e2ca3223ecbb07eff596 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_de5c5776bfc7e2ca3223ecbb07eff596
;;; Fact-ids: Name FStar.Pervasives.st_stronger; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_de5c5776bfc7e2ca3223ecbb07eff596
Tm_type)
:named kinding_Tm_arrow_de5c5776bfc7e2ca3223ecbb07eff596))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.st_stronger; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_de5c5776bfc7e2ca3223ecbb07eff596)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_de5c5776bfc7e2ca3223ecbb07eff596))
:qid FStar.Pervasives_pre_typing_Tm_arrow_de5c5776bfc7e2ca3223ecbb07eff596))
:named FStar.Pervasives_pre_typing_Tm_arrow_de5c5776bfc7e2ca3223ecbb07eff596))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_de5c5776bfc7e2ca3223ecbb07eff596
;;; Fact-ids: Name FStar.Pervasives.st_stronger; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_de5c5776bfc7e2ca3223ecbb07eff596)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.st_wp_h @x1
@x2))
(HasType @x4
(FStar.Pervasives.st_wp_h @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid FStar.Pervasives_interpretation_Tm_arrow_de5c5776bfc7e2ca3223ecbb07eff596.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_de5c5776bfc7e2ca3223ecbb07eff596))
:qid FStar.Pervasives_interpretation_Tm_arrow_de5c5776bfc7e2ca3223ecbb07eff596))
:named FStar.Pervasives_interpretation_Tm_arrow_de5c5776bfc7e2ca3223ecbb07eff596))
(declare-fun FStar.Pervasives.st_stronger@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.st_stronger; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.st_stronger@tok
@x0)
@x1)
@x2)
@x3)
(FStar.Pervasives.st_stronger @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.st_stronger@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((FStar.Pervasives.st_stronger @x0
@x1
@x2
@x3))
:qid token_correspondence_FStar.Pervasives.st_stronger))
:named token_correspondence_FStar.Pervasives.st_stronger))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.st_stronger; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.st_stronger@tok
Tm_arrow_de5c5776bfc7e2ca3223ecbb07eff596))
 

:pattern ((ApplyTT FStar.Pervasives.st_stronger@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.st_stronger@tok))
:qid function_token_typing_FStar.Pervasives.st_stronger))
:named function_token_typing_FStar.Pervasives.st_stronger))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.st_stronger; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.st_wp_h @x0
@x1))
(HasType @x3
(FStar.Pervasives.st_wp_h @x0
@x1)))
(HasType (FStar.Pervasives.st_stronger @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((FStar.Pervasives.st_stronger @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives.st_stronger))
:named typing_FStar.Pervasives.st_stronger))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.st_stronger
;;; Fact-ids: Name FStar.Pervasives.st_stronger; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (FStar.Pervasives.st_stronger @x0
@x1
@x2
@x3))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(49,5-49,64); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(49,5-49,64)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
(FStar.Pervasives.st_post_h @x0
@x1))
(HasType @x5
@x0)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(49,44-49,51); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(49,44-49,51)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(49,44-49,51); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(49,44-49,51)
(ApplyTT (ApplyTT @x2
@x4)
@x5)
)
)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(49,56-49,63); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(49,56-49,63)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(49,56-49,63); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(49,56-49,63)
(ApplyTT (ApplyTT @x3
@x4)
@x5)
)
)
 
;;no pats
:qid equation_FStar.Pervasives.st_stronger.1))
)
 

:pattern ((Valid (FStar.Pervasives.st_stronger @x0
@x1
@x2
@x3)))
:qid equation_FStar.Pervasives.st_stronger))
:named equation_FStar.Pervasives.st_stronger))

; </end encoding FStar.Pervasives.st_stronger>

; <Start encoding FStar.Pervasives.st_close_wp>

(declare-fun FStar.Pervasives.st_close_wp (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap:Type ->...
(declare-fun Tm_arrow_f4e848361540684584eda5b7f0d8fa3a () Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_f4e848361540684584eda5b7f0d8fa3a
;;; Fact-ids: Name FStar.Pervasives.st_close_wp; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_f4e848361540684584eda5b7f0d8fa3a
Tm_type)
:named kinding_Tm_arrow_f4e848361540684584eda5b7f0d8fa3a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.st_close_wp; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_f4e848361540684584eda5b7f0d8fa3a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_f4e848361540684584eda5b7f0d8fa3a))
:qid FStar.Pervasives_pre_typing_Tm_arrow_f4e848361540684584eda5b7f0d8fa3a))
:named FStar.Pervasives_pre_typing_Tm_arrow_f4e848361540684584eda5b7f0d8fa3a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_f4e848361540684584eda5b7f0d8fa3a
;;; Fact-ids: Name FStar.Pervasives.st_close_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_f4e848361540684584eda5b7f0d8fa3a)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(Tm_arrow_d9eac583d9f115ef0dc2cf4de1079b38 @x2
@x1
@x3))
(HasType @x5
(FStar.Pervasives.st_post_h @x1
@x2))
(HasType @x6
@x1))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))
:qid FStar.Pervasives_interpretation_Tm_arrow_f4e848361540684584eda5b7f0d8fa3a.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_f4e848361540684584eda5b7f0d8fa3a))
:qid FStar.Pervasives_interpretation_Tm_arrow_f4e848361540684584eda5b7f0d8fa3a))
:named FStar.Pervasives_interpretation_Tm_arrow_f4e848361540684584eda5b7f0d8fa3a))
(declare-fun FStar.Pervasives.st_close_wp@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.st_close_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.st_close_wp@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
(FStar.Pervasives.st_close_wp @x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.st_close_wp@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5))

:pattern ((FStar.Pervasives.st_close_wp @x0
@x1
@x2
@x3
@x4
@x5))
:qid token_correspondence_FStar.Pervasives.st_close_wp))
:named token_correspondence_FStar.Pervasives.st_close_wp))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.st_close_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.st_close_wp@tok
Tm_arrow_f4e848361540684584eda5b7f0d8fa3a))
 

:pattern ((ApplyTT FStar.Pervasives.st_close_wp@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.st_close_wp@tok))
:qid function_token_typing_FStar.Pervasives.st_close_wp))
:named function_token_typing_FStar.Pervasives.st_close_wp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.st_close_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(Tm_arrow_d9eac583d9f115ef0dc2cf4de1079b38 @x1
@x0
@x2))
(HasType @x4
(FStar.Pervasives.st_post_h @x0
@x1))
(HasType @x5
@x0))
(HasType (FStar.Pervasives.st_close_wp @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
 

:pattern ((FStar.Pervasives.st_close_wp @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_FStar.Pervasives.st_close_wp))
:named typing_FStar.Pervasives.st_close_wp))

;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.st_close_wp
;;; Fact-ids: Name FStar.Pervasives.st_close_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Valid (FStar.Pervasives.st_close_wp @x0
@x1
@x2
@x3
@x4
@x5))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(54,5-54,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(54,5-54,29)
(forall ((@x6 Term))
 (! (implies (HasType @x6
@x2)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(54,20-54,28); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(54,20-54,28)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(54,20-54,28); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(54,20-54,28)
(ApplyTT (ApplyTT (ApplyTT @x3
@x6)
@x4)
@x5)
)
)
 
;;no pats
:qid equation_FStar.Pervasives.st_close_wp.1))
)
 

:pattern ((Valid (FStar.Pervasives.st_close_wp @x0
@x1
@x2
@x3
@x4
@x5)))
:qid equation_FStar.Pervasives.st_close_wp))
:named equation_FStar.Pervasives.st_close_wp))

; </end encoding FStar.Pervasives.st_close_wp>

; <Start encoding FStar.Pervasives.st_assert_p>
(declare-fun FStar.Pervasives.st_assert_p (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap:Type ->...
(declare-fun Tm_arrow_4839bd7b54a7de1bf76b3b2aafb32c9d () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_4839bd7b54a7de1bf76b3b2aafb32c9d
;;; Fact-ids: Name FStar.Pervasives.st_assert_p; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_4839bd7b54a7de1bf76b3b2aafb32c9d
Tm_type)
:named kinding_Tm_arrow_4839bd7b54a7de1bf76b3b2aafb32c9d))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.st_assert_p; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_4839bd7b54a7de1bf76b3b2aafb32c9d)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_4839bd7b54a7de1bf76b3b2aafb32c9d))
:qid FStar.Pervasives_pre_typing_Tm_arrow_4839bd7b54a7de1bf76b3b2aafb32c9d))
:named FStar.Pervasives_pre_typing_Tm_arrow_4839bd7b54a7de1bf76b3b2aafb32c9d))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_4839bd7b54a7de1bf76b3b2aafb32c9d
;;; Fact-ids: Name FStar.Pervasives.st_assert_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_4839bd7b54a7de1bf76b3b2aafb32c9d)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(FStar.Pervasives.st_wp_h @x1
@x2))
(HasType @x5
(FStar.Pervasives.st_post_h @x1
@x2))
(HasType @x6
@x1))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))
:qid FStar.Pervasives_interpretation_Tm_arrow_4839bd7b54a7de1bf76b3b2aafb32c9d.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_4839bd7b54a7de1bf76b3b2aafb32c9d))
:qid FStar.Pervasives_interpretation_Tm_arrow_4839bd7b54a7de1bf76b3b2aafb32c9d))
:named FStar.Pervasives_interpretation_Tm_arrow_4839bd7b54a7de1bf76b3b2aafb32c9d))
(declare-fun FStar.Pervasives.st_assert_p@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.st_assert_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.st_assert_p@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
(FStar.Pervasives.st_assert_p @x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.st_assert_p@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5))

:pattern ((FStar.Pervasives.st_assert_p @x0
@x1
@x2
@x3
@x4
@x5))
:qid token_correspondence_FStar.Pervasives.st_assert_p))
:named token_correspondence_FStar.Pervasives.st_assert_p))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.st_assert_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.st_assert_p@tok
Tm_arrow_4839bd7b54a7de1bf76b3b2aafb32c9d))
 

:pattern ((ApplyTT FStar.Pervasives.st_assert_p@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.st_assert_p@tok))
:qid function_token_typing_FStar.Pervasives.st_assert_p))
:named function_token_typing_FStar.Pervasives.st_assert_p))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.st_assert_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.st_wp_h @x0
@x1))
(HasType @x4
(FStar.Pervasives.st_post_h @x0
@x1))
(HasType @x5
@x0))
(HasType (FStar.Pervasives.st_assert_p @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
 

:pattern ((FStar.Pervasives.st_assert_p @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_FStar.Pervasives.st_assert_p))
:named typing_FStar.Pervasives.st_assert_p))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.st_assert_p
;;; Fact-ids: Name FStar.Pervasives.st_assert_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Valid (FStar.Pervasives.st_assert_p @x0
@x1
@x2
@x3
@x4
@x5))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(58,5-58,16); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(58,5-58,16)
(and 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(55,50-55,51); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(58,5-58,6)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(55,50-55,51); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(58,5-58,6)
@x2
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(58,10-58,16); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(58,10-58,16)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(58,10-58,16); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(58,10-58,16)
(ApplyTT (ApplyTT @x3
@x4)
@x5)
)
)
)
 

:pattern ((Valid (FStar.Pervasives.st_assert_p @x0
@x1
@x2
@x3
@x4
@x5)))
:qid equation_FStar.Pervasives.st_assert_p))
:named equation_FStar.Pervasives.st_assert_p))

; </end encoding FStar.Pervasives.st_assert_p>

; <Start encoding FStar.Pervasives.st_assume_p>
(declare-fun FStar.Pervasives.st_assume_p (Term Term Term Term Term Term) Term)

(declare-fun FStar.Pervasives.st_assume_p@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.st_assume_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.st_assume_p@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
(FStar.Pervasives.st_assume_p @x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.st_assume_p@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5))

:pattern ((FStar.Pervasives.st_assume_p @x0
@x1
@x2
@x3
@x4
@x5))
:qid token_correspondence_FStar.Pervasives.st_assume_p))
:named token_correspondence_FStar.Pervasives.st_assume_p))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.st_assume_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.st_assume_p@tok
Tm_arrow_4839bd7b54a7de1bf76b3b2aafb32c9d))
 

:pattern ((ApplyTT FStar.Pervasives.st_assume_p@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.st_assume_p@tok))
:qid function_token_typing_FStar.Pervasives.st_assume_p))
:named function_token_typing_FStar.Pervasives.st_assume_p))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.st_assume_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.st_wp_h @x0
@x1))
(HasType @x4
(FStar.Pervasives.st_post_h @x0
@x1))
(HasType @x5
@x0))
(HasType (FStar.Pervasives.st_assume_p @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
 

:pattern ((FStar.Pervasives.st_assume_p @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_FStar.Pervasives.st_assume_p))
:named typing_FStar.Pervasives.st_assume_p))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.st_assume_p
;;; Fact-ids: Name FStar.Pervasives.st_assume_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Valid (FStar.Pervasives.st_assume_p @x0
@x1
@x2
@x3
@x4
@x5))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(62,5-62,17); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(62,5-62,17)
(implies 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(59,50-59,51); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(62,5-62,6)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(59,50-59,51); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(62,5-62,6)
@x2
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(62,11-62,17); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(62,11-62,17)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(62,11-62,17); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(62,11-62,17)
(ApplyTT (ApplyTT @x3
@x4)
@x5)
)
)
)
 

:pattern ((Valid (FStar.Pervasives.st_assume_p @x0
@x1
@x2
@x3
@x4
@x5)))
:qid equation_FStar.Pervasives.st_assume_p))
:named equation_FStar.Pervasives.st_assume_p))

; </end encoding FStar.Pervasives.st_assume_p>

; <Start encoding FStar.Pervasives.st_null_wp>
(declare-fun FStar.Pervasives.st_null_wp (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap:Type -> a:Type -> p:FStar.Pervasives.st_post_h heap a -> h:heap -> Prims.Tot Type0
(declare-fun Tm_arrow_66b5e7d9200d55a0133601a40e1f38d9 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_66b5e7d9200d55a0133601a40e1f38d9
;;; Fact-ids: Name FStar.Pervasives.st_null_wp; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_66b5e7d9200d55a0133601a40e1f38d9
Tm_type)
:named kinding_Tm_arrow_66b5e7d9200d55a0133601a40e1f38d9))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.st_null_wp; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_66b5e7d9200d55a0133601a40e1f38d9)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_66b5e7d9200d55a0133601a40e1f38d9))
:qid FStar.Pervasives_pre_typing_Tm_arrow_66b5e7d9200d55a0133601a40e1f38d9))
:named FStar.Pervasives_pre_typing_Tm_arrow_66b5e7d9200d55a0133601a40e1f38d9))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_66b5e7d9200d55a0133601a40e1f38d9
;;; Fact-ids: Name FStar.Pervasives.st_null_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_66b5e7d9200d55a0133601a40e1f38d9)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.st_post_h @x1
@x2))
(HasType @x4
@x1))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid FStar.Pervasives_interpretation_Tm_arrow_66b5e7d9200d55a0133601a40e1f38d9.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_66b5e7d9200d55a0133601a40e1f38d9))
:qid FStar.Pervasives_interpretation_Tm_arrow_66b5e7d9200d55a0133601a40e1f38d9))
:named FStar.Pervasives_interpretation_Tm_arrow_66b5e7d9200d55a0133601a40e1f38d9))
(declare-fun FStar.Pervasives.st_null_wp@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.st_null_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.st_null_wp@tok
@x0)
@x1)
@x2)
@x3)
(FStar.Pervasives.st_null_wp @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.st_null_wp@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((FStar.Pervasives.st_null_wp @x0
@x1
@x2
@x3))
:qid token_correspondence_FStar.Pervasives.st_null_wp))
:named token_correspondence_FStar.Pervasives.st_null_wp))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.st_null_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.st_null_wp@tok
Tm_arrow_66b5e7d9200d55a0133601a40e1f38d9))
 

:pattern ((ApplyTT FStar.Pervasives.st_null_wp@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.st_null_wp@tok))
:qid function_token_typing_FStar.Pervasives.st_null_wp))
:named function_token_typing_FStar.Pervasives.st_null_wp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.st_null_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.st_post_h @x0
@x1))
(HasType @x3
@x0))
(HasType (FStar.Pervasives.st_null_wp @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((FStar.Pervasives.st_null_wp @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives.st_null_wp))
:named typing_FStar.Pervasives.st_null_wp))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.st_null_wp
;;; Fact-ids: Name FStar.Pervasives.st_null_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (FStar.Pervasives.st_null_wp @x0
@x1
@x2
@x3))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(65,5-65,35); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(65,5-65,35)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
@x1)
(HasType @x5
@x0))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(65,29-65,34); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(65,29-65,34)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(65,29-65,34); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(65,29-65,34)
(ApplyTT (ApplyTT @x2
@x4)
@x5)
)
)
 
;;no pats
:qid equation_FStar.Pervasives.st_null_wp.1))
)
 

:pattern ((Valid (FStar.Pervasives.st_null_wp @x0
@x1
@x2
@x3)))
:qid equation_FStar.Pervasives.st_null_wp))
:named equation_FStar.Pervasives.st_null_wp))

; </end encoding FStar.Pervasives.st_null_wp>

; <Start encoding FStar.Pervasives.st_trivial>
(declare-fun FStar.Pervasives.st_trivial (Term Term Term) Term)
;;;;;;;;;;;;;;;;heap:Type -> a:Type -> wp:FStar.Pervasives.st_wp_h heap a -> Prims.Tot Type0
(declare-fun Tm_arrow_c6fb7e3c8be108e13132f4faaed45766 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c6fb7e3c8be108e13132f4faaed45766
;;; Fact-ids: Name FStar.Pervasives.st_trivial; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_c6fb7e3c8be108e13132f4faaed45766
Tm_type)
:named kinding_Tm_arrow_c6fb7e3c8be108e13132f4faaed45766))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.st_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_c6fb7e3c8be108e13132f4faaed45766)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_c6fb7e3c8be108e13132f4faaed45766))
:qid FStar.Pervasives_pre_typing_Tm_arrow_c6fb7e3c8be108e13132f4faaed45766))
:named FStar.Pervasives_pre_typing_Tm_arrow_c6fb7e3c8be108e13132f4faaed45766))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c6fb7e3c8be108e13132f4faaed45766
;;; Fact-ids: Name FStar.Pervasives.st_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_c6fb7e3c8be108e13132f4faaed45766)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.st_wp_h @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid FStar.Pervasives_interpretation_Tm_arrow_c6fb7e3c8be108e13132f4faaed45766.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_c6fb7e3c8be108e13132f4faaed45766))
:qid FStar.Pervasives_interpretation_Tm_arrow_c6fb7e3c8be108e13132f4faaed45766))
:named FStar.Pervasives_interpretation_Tm_arrow_c6fb7e3c8be108e13132f4faaed45766))
(declare-fun FStar.Pervasives.st_trivial@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.st_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.st_trivial@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.st_trivial @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.st_trivial@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.st_trivial @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.st_trivial))
:named token_correspondence_FStar.Pervasives.st_trivial))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.st_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.st_trivial@tok
Tm_arrow_c6fb7e3c8be108e13132f4faaed45766))
 

:pattern ((ApplyTT FStar.Pervasives.st_trivial@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.st_trivial@tok))
:qid function_token_typing_FStar.Pervasives.st_trivial))
:named function_token_typing_FStar.Pervasives.st_trivial))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.st_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.st_wp_h @x0
@x1)))
(HasType (FStar.Pervasives.st_trivial @x0
@x1
@x2)
Tm_type))
 

:pattern ((FStar.Pervasives.st_trivial @x0
@x1
@x2))
:qid typing_FStar.Pervasives.st_trivial))
:named typing_FStar.Pervasives.st_trivial))

(declare-fun FStar.Pervasives_Tm_abs_d1f5240b29e3bc3325d3a9f817e18eef (Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_FStar.Pervasives_Tm_abs_d1f5240b29e3bc3325d3a9f817e18eef
;;; Fact-ids: Name FStar.Pervasives.st_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (FStar.Pervasives_Tm_abs_d1f5240b29e3bc3325d3a9f817e18eef @x0
@x1
@x2)
(Tm_arrow_a7f622c21c9bfd4b48ff31ec14061ca8 @x1
@x2))
 

:pattern ((FStar.Pervasives_Tm_abs_d1f5240b29e3bc3325d3a9f817e18eef @x0
@x1
@x2))
:qid typing_FStar.Pervasives_Tm_abs_d1f5240b29e3bc3325d3a9f817e18eef))
:named typing_FStar.Pervasives_Tm_abs_d1f5240b29e3bc3325d3a9f817e18eef))
;;;;;;;;;;;;;;;;interpretation_FStar.Pervasives_Tm_abs_d1f5240b29e3bc3325d3a9f817e18eef
;;; Fact-ids: Name FStar.Pervasives.st_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (FStar.Pervasives_Tm_abs_d1f5240b29e3bc3325d3a9f817e18eef @x2
@x3
@x4)
@x0)
@x1)
@x2)
 

:pattern ((ApplyTT (ApplyTT (FStar.Pervasives_Tm_abs_d1f5240b29e3bc3325d3a9f817e18eef @x2
@x3
@x4)
@x0)
@x1))
:qid interpretation_FStar.Pervasives_Tm_abs_d1f5240b29e3bc3325d3a9f817e18eef))
:named interpretation_FStar.Pervasives_Tm_abs_d1f5240b29e3bc3325d3a9f817e18eef))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.st_trivial
;;; Fact-ids: Name FStar.Pervasives.st_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (FStar.Pervasives.st_trivial @x0
@x1
@x2))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(68,5-68,42); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(68,5-68,42)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x0)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(68,17-68,41); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(68,17-68,41)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(68,17-68,41); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(68,17-68,41)
(ApplyTT (ApplyTT @x2
(FStar.Pervasives_Tm_abs_d1f5240b29e3bc3325d3a9f817e18eef Prims.l_True
@x0
@x1))
@x3)
)
)
 
;;no pats
:qid equation_FStar.Pervasives.st_trivial.1))
)
 

:pattern ((Valid (FStar.Pervasives.st_trivial @x0
@x1
@x2)))
:qid equation_FStar.Pervasives.st_trivial))
:named equation_FStar.Pervasives.st_trivial))

; </end encoding FStar.Pervasives.st_trivial>

; <Skipped FStar.Pervasives.STATE_h/>

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.result (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.result@x0 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.result@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.V (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_v (Term) Term)
;;;;;;;;;;;;;;;;v:a -> Prims.Tot (FStar.Pervasives.result a)
(declare-fun Tm_arrow_e797b13f3527682c5e8e530b8c8c696d () Term)
;;;;;;;;;;;;;;;;data constructor proxy: V
(declare-fun FStar.Pervasives.V@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.E (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_e (Term) Term)
;;;;;;;;;;;;;;;;e:Prims.exn -> Prims.Tot (FStar.Pervasives.result a)
(declare-fun Tm_arrow_739df426cfefbd9297407e8f408e091d (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: E
(declare-fun FStar.Pervasives.E@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Err (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_msg (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Err
(declare-fun FStar.Pervasives.Err@tok () Term)

; <Start encoding FStar.Pervasives.result>

; <start constructor FStar.Pervasives.result>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= 1680
(Term_constr_id (FStar.Pervasives.result @x0)))
 

:pattern ((FStar.Pervasives.result @x0))
:qid constructor_distinct_FStar.Pervasives.result))
:named constructor_distinct_FStar.Pervasives.result))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1680)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.result @x0))
 
;;no pats
:qid is-FStar.Pervasives.result))))

; </end constructor FStar.Pervasives.result>
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (= 1681
(Term_constr_id FStar.Pervasives.result@tok))
:named fresh_token_FStar.Pervasives.result@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.result@tok
@x0)
(FStar.Pervasives.result @x0))
 

:pattern ((ApplyTT FStar.Pervasives.result@tok
@x0))

:pattern ((FStar.Pervasives.result @x0))
:qid token_correspondence_FStar.Pervasives.result@tok))
:named token_correspondence_FStar.Pervasives.result@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.result@tok))
:named pre_kinding_FStar.Pervasives.result@tok))
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Pervasives.result @x0)
Tm_type))
 

:pattern ((FStar.Pervasives.result @x0))
:qid kinding_FStar.Pervasives.result@tok))
:named kinding_FStar.Pervasives.result@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.result @x2))
(= (FStar.Pervasives.result @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.result @x2)))
:qid FStar.Pervasives_pretyping_f012bfbe57874e314f153effb10f002f))
:named FStar.Pervasives_pretyping_f012bfbe57874e314f153effb10f002f))

; </end encoding FStar.Pervasives.result>

; <Start encoding FStar.Pervasives.V>

; <start constructor FStar.Pervasives.V>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= 1687
(Term_constr_id (FStar.Pervasives.V @x0
@x1)))
 

:pattern ((FStar.Pervasives.V @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.V))
:named constructor_distinct_FStar.Pervasives.V))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.V_a (FStar.Pervasives.V @x0
@x1))
@x0)
 

:pattern ((FStar.Pervasives.V @x0
@x1))
:qid projection_inverse_FStar.Pervasives.V_a))
:named projection_inverse_FStar.Pervasives.V_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.V_v (FStar.Pervasives.V @x0
@x1))
@x1)
 

:pattern ((FStar.Pervasives.V @x0
@x1))
:qid projection_inverse_FStar.Pervasives.V_v))
:named projection_inverse_FStar.Pervasives.V_v))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.V ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1687)
(= __@x0
(FStar.Pervasives.V (FStar.Pervasives.V_a __@x0)
(FStar.Pervasives.V_v __@x0)))))

; </end constructor FStar.Pervasives.V>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_e797b13f3527682c5e8e530b8c8c696d
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_e797b13f3527682c5e8e530b8c8c696d
Tm_type)
:named kinding_Tm_arrow_e797b13f3527682c5e8e530b8c8c696d))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_e797b13f3527682c5e8e530b8c8c696d)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_e797b13f3527682c5e8e530b8c8c696d))
:qid FStar.Pervasives_pre_typing_Tm_arrow_e797b13f3527682c5e8e530b8c8c696d))
:named FStar.Pervasives_pre_typing_Tm_arrow_e797b13f3527682c5e8e530b8c8c696d))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_e797b13f3527682c5e8e530b8c8c696d
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_e797b13f3527682c5e8e530b8c8c696d)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(FStar.Pervasives.result @x1)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid FStar.Pervasives_interpretation_Tm_arrow_e797b13f3527682c5e8e530b8c8c696d.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_e797b13f3527682c5e8e530b8c8c696d))
:qid FStar.Pervasives_interpretation_Tm_arrow_e797b13f3527682c5e8e530b8c8c696d))
:named FStar.Pervasives_interpretation_Tm_arrow_e797b13f3527682c5e8e530b8c8c696d))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (= 1690
(Term_constr_id FStar.Pervasives.V@tok))
:named fresh_token_FStar.Pervasives.V@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.V@tok
Tm_arrow_e797b13f3527682c5e8e530b8c8c696d))
 

:pattern ((ApplyTT FStar.Pervasives.V@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.V@tok))
:qid typing_tok_FStar.Pervasives.V@tok))
:named typing_tok_FStar.Pervasives.V@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.V@tok
@x0)
@x1)
(FStar.Pervasives.V @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.V@tok
@x0)
@x1))
:qid equality_tok_FStar.Pervasives.V@tok))
:named equality_tok_FStar.Pervasives.V@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1))
(HasTypeFuel @u0
(FStar.Pervasives.V @x1
@x2)
(FStar.Pervasives.result @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.V @x1
@x2)
(FStar.Pervasives.result @x1)))
:qid data_typing_intro_FStar.Pervasives.V@tok))
:named data_typing_intro_FStar.Pervasives.V@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.V @x1
@x2)
(FStar.Pervasives.result @x3))
(and (HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x2
@x3)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.V @x1
@x2)
(FStar.Pervasives.result @x3)))
:qid data_elim_FStar.Pervasives.V))
:named data_elim_FStar.Pervasives.V))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.V @x1
@x2)
(FStar.Pervasives.result @x3))
(Valid (Precedes @x2
(FStar.Pervasives.V @x1
@x2))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.V @x1
@x2)
(FStar.Pervasives.result @x3)))
:qid subterm_ordering_FStar.Pervasives.V))
:named subterm_ordering_FStar.Pervasives.V))

; </end encoding FStar.Pervasives.V>

; <Start encoding FStar.Pervasives.E>

; <start constructor FStar.Pervasives.E>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= 1692
(Term_constr_id (FStar.Pervasives.E @x0
@x1)))
 

:pattern ((FStar.Pervasives.E @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.E))
:named constructor_distinct_FStar.Pervasives.E))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.E_a (FStar.Pervasives.E @x0
@x1))
@x0)
 

:pattern ((FStar.Pervasives.E @x0
@x1))
:qid projection_inverse_FStar.Pervasives.E_a))
:named projection_inverse_FStar.Pervasives.E_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.E_e (FStar.Pervasives.E @x0
@x1))
@x1)
 

:pattern ((FStar.Pervasives.E @x0
@x1))
:qid projection_inverse_FStar.Pervasives.E_e))
:named projection_inverse_FStar.Pervasives.E_e))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.E ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1692)
(= __@x0
(FStar.Pervasives.E (FStar.Pervasives.E_a __@x0)
(FStar.Pervasives.E_e __@x0)))))

; </end constructor FStar.Pervasives.E>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_739df426cfefbd9297407e8f408e091d
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_739df426cfefbd9297407e8f408e091d @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_739df426cfefbd9297407e8f408e091d @x0)
Tm_type))
:qid kinding_Tm_arrow_739df426cfefbd9297407e8f408e091d))
:named kinding_Tm_arrow_739df426cfefbd9297407e8f408e091d))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_739df426cfefbd9297407e8f408e091d @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_739df426cfefbd9297407e8f408e091d @x2)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_739df426cfefbd9297407e8f408e091d))
:named FStar.Pervasives_pre_typing_Tm_arrow_739df426cfefbd9297407e8f408e091d))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_739df426cfefbd9297407e8f408e091d
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_739df426cfefbd9297407e8f408e091d @x1))
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
(FStar.Pervasives.result @x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid FStar.Pervasives_interpretation_Tm_arrow_739df426cfefbd9297407e8f408e091d.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_739df426cfefbd9297407e8f408e091d @x1)))
:qid FStar.Pervasives_interpretation_Tm_arrow_739df426cfefbd9297407e8f408e091d))
:named FStar.Pervasives_interpretation_Tm_arrow_739df426cfefbd9297407e8f408e091d))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (= 1695
(Term_constr_id FStar.Pervasives.E@tok))
:named fresh_token_FStar.Pervasives.E@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.E@tok
(Tm_arrow_739df426cfefbd9297407e8f408e091d Prims.exn)))
 

:pattern ((ApplyTT FStar.Pervasives.E@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.E@tok))
:qid typing_tok_FStar.Pervasives.E@tok))
:named typing_tok_FStar.Pervasives.E@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.E@tok
@x0)
@x1)
(FStar.Pervasives.E @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.E@tok
@x0)
@x1))
:qid equality_tok_FStar.Pervasives.E@tok))
:named equality_tok_FStar.Pervasives.E@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Prims.exn))
(HasTypeFuel @u0
(FStar.Pervasives.E @x1
@x2)
(FStar.Pervasives.result @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.E @x1
@x2)
(FStar.Pervasives.result @x1)))
:qid data_typing_intro_FStar.Pervasives.E@tok))
:named data_typing_intro_FStar.Pervasives.E@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.E @x1
@x2)
(FStar.Pervasives.result @x3))
(and (HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Prims.exn)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.E @x1
@x2)
(FStar.Pervasives.result @x3)))
:qid data_elim_FStar.Pervasives.E))
:named data_elim_FStar.Pervasives.E))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.E @x1
@x2)
(FStar.Pervasives.result @x3))
(Valid (Precedes @x2
(FStar.Pervasives.E @x1
@x2))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.E @x1
@x2)
(FStar.Pervasives.result @x3)))
:qid subterm_ordering_FStar.Pervasives.E))
:named subterm_ordering_FStar.Pervasives.E))

; </end encoding FStar.Pervasives.E>

; <Start encoding FStar.Pervasives.Err>

; <start constructor FStar.Pervasives.Err>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= 1697
(Term_constr_id (FStar.Pervasives.Err @x0
@x1)))
 

:pattern ((FStar.Pervasives.Err @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.Err))
:named constructor_distinct_FStar.Pervasives.Err))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Err_a (FStar.Pervasives.Err @x0
@x1))
@x0)
 

:pattern ((FStar.Pervasives.Err @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Err_a))
:named projection_inverse_FStar.Pervasives.Err_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Err_msg (FStar.Pervasives.Err @x0
@x1))
@x1)
 

:pattern ((FStar.Pervasives.Err @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Err_msg))
:named projection_inverse_FStar.Pervasives.Err_msg))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Err ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1697)
(= __@x0
(FStar.Pervasives.Err (FStar.Pervasives.Err_a __@x0)
(FStar.Pervasives.Err_msg __@x0)))))

; </end constructor FStar.Pervasives.Err>

;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (= 1699
(Term_constr_id FStar.Pervasives.Err@tok))
:named fresh_token_FStar.Pervasives.Err@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Err@tok
(Tm_arrow_739df426cfefbd9297407e8f408e091d Prims.string)))
 

:pattern ((ApplyTT FStar.Pervasives.Err@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Err@tok))
:qid typing_tok_FStar.Pervasives.Err@tok))
:named typing_tok_FStar.Pervasives.Err@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.Err@tok
@x0)
@x1)
(FStar.Pervasives.Err @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.Err@tok
@x0)
@x1))
:qid equality_tok_FStar.Pervasives.Err@tok))
:named equality_tok_FStar.Pervasives.Err@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Prims.string))
(HasTypeFuel @u0
(FStar.Pervasives.Err @x1
@x2)
(FStar.Pervasives.result @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Err @x1
@x2)
(FStar.Pervasives.result @x1)))
:qid data_typing_intro_FStar.Pervasives.Err@tok))
:named data_typing_intro_FStar.Pervasives.Err@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Err @x1
@x2)
(FStar.Pervasives.result @x3))
(and (HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Prims.string)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Err @x1
@x2)
(FStar.Pervasives.result @x3)))
:qid data_elim_FStar.Pervasives.Err))
:named data_elim_FStar.Pervasives.Err))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Err @x1
@x2)
(FStar.Pervasives.result @x3))
(Valid (Precedes @x2
(FStar.Pervasives.Err @x1
@x2))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Err @x1
@x2)
(FStar.Pervasives.result @x3)))
:qid subterm_ordering_FStar.Pervasives.Err))
:named subterm_ordering_FStar.Pervasives.Err))

; </end encoding FStar.Pervasives.Err>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.result; Namespace FStar.Pervasives; Name FStar.Pervasives.V; Namespace FStar.Pervasives; Name FStar.Pervasives.E; Namespace FStar.Pervasives; Name FStar.Pervasives.Err; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.result @x2))
(or (and (is-FStar.Pervasives.V @x1)
(= @x2
(FStar.Pervasives.V_a @x1)))
(and (is-FStar.Pervasives.E @x1)
(= @x2
(FStar.Pervasives.E_a @x1)))
(and (is-FStar.Pervasives.Err @x1)
(= @x2
(FStar.Pervasives.Err_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.result @x2)))
:qid fuel_guarded_inversion_FStar.Pervasives.result))
:named fuel_guarded_inversion_FStar.Pervasives.result))

; </end encoding >

; <Start encoding FStar.Pervasives.uu___is_V>
(declare-fun FStar.Pervasives.uu___is_V (Term Term) Term)
;;;;;;;;;;;;;;;;projectee:FStar.Pervasives.result a -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_e62fd03c6d75c90fe0c21b54135b4ded (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_e62fd03c6d75c90fe0c21b54135b4ded
;;; Fact-ids: Name FStar.Pervasives.uu___is_V; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_e62fd03c6d75c90fe0c21b54135b4ded @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_e62fd03c6d75c90fe0c21b54135b4ded @x0)
Tm_type))
:qid kinding_Tm_arrow_e62fd03c6d75c90fe0c21b54135b4ded))
:named kinding_Tm_arrow_e62fd03c6d75c90fe0c21b54135b4ded))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.uu___is_V; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_e62fd03c6d75c90fe0c21b54135b4ded @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_e62fd03c6d75c90fe0c21b54135b4ded @x2)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_e62fd03c6d75c90fe0c21b54135b4ded))
:named FStar.Pervasives_pre_typing_Tm_arrow_e62fd03c6d75c90fe0c21b54135b4ded))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_e62fd03c6d75c90fe0c21b54135b4ded
;;; Fact-ids: Name FStar.Pervasives.uu___is_V; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_e62fd03c6d75c90fe0c21b54135b4ded @x1))
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.result @x2)))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x1))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid FStar.Pervasives_interpretation_Tm_arrow_e62fd03c6d75c90fe0c21b54135b4ded.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_e62fd03c6d75c90fe0c21b54135b4ded @x1)))
:qid FStar.Pervasives_interpretation_Tm_arrow_e62fd03c6d75c90fe0c21b54135b4ded))
:named FStar.Pervasives_interpretation_Tm_arrow_e62fd03c6d75c90fe0c21b54135b4ded))
(declare-fun FStar.Pervasives.uu___is_V@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.uu___is_V; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.uu___is_V@tok
@x0)
@x1)
(FStar.Pervasives.uu___is_V @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.uu___is_V@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.uu___is_V @x0
@x1))
:qid token_correspondence_FStar.Pervasives.uu___is_V))
:named token_correspondence_FStar.Pervasives.uu___is_V))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_V; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.uu___is_V@tok
(Tm_arrow_e62fd03c6d75c90fe0c21b54135b4ded Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.uu___is_V@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.uu___is_V@tok))
:qid function_token_typing_FStar.Pervasives.uu___is_V))
:named function_token_typing_FStar.Pervasives.uu___is_V))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_V; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.result @x0)))
(HasType (FStar.Pervasives.uu___is_V @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.uu___is_V @x0
@x1))
:qid typing_FStar.Pervasives.uu___is_V))
:named typing_FStar.Pervasives.uu___is_V))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.uu___is_V; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.uu___is_V @x0
@x1)
(BoxBool (is-FStar.Pervasives.V @x1)))
 

:pattern ((FStar.Pervasives.uu___is_V @x0
@x1))
:qid disc_equation_FStar.Pervasives.V))
:named disc_equation_FStar.Pervasives.V))

; </end encoding FStar.Pervasives.uu___is_V>

; <Skipped FStar.Pervasives.uu___is_V/>

; <Start encoding FStar.Pervasives.__proj__V__item__v>
(declare-fun FStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.__proj__V__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (FStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d @x0)
Tm_type)
 

:pattern ((HasType (FStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d @x0)
Tm_type))
:qid refinement_kinding_FStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d))
:named refinement_kinding_FStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: Name FStar.Pervasives.__proj__V__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (exists ((@x1 Term))
 (! (and (HasType @x1
(FStar.Pervasives.result @x0))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(86,4-86,5); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(86,4-86,5)
(BoxBool_proj_0 (FStar.Pervasives.uu___is_V @x0
@x1))
)
 
;;no pats
:qid ref_valid_FStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d.1))
(Valid (FStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d @x0)))
 

:pattern ((Valid (FStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d @x0)))
:qid ref_valid_FStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d))
:named ref_valid_FStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d))
;;;;;;;;;;;;;;;;(uu___157871:FStar.Pervasives.result a{ Prims.b2t (V? uu___157871) })
;;; Fact-ids: Name FStar.Pervasives.__proj__V__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(FStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d @x2))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.result @x2))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(86,4-86,5); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(86,4-86,5)
(BoxBool_proj_0 (FStar.Pervasives.uu___is_V @x2
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d @x2)))
:qid refinement_interpretation_FStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d))
:named refinement_interpretation_FStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d))
;;;;;;;;;;;;;;;;haseq for FStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d
;;; Fact-ids: Name FStar.Pervasives.__proj__V__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (FStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d @x0)))
(Valid (Prims.hasEq (FStar.Pervasives.result @x0))))
 

:pattern ((Valid (Prims.hasEq (FStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d @x0))))
:qid haseqFStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d))
:named haseqFStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d))
(declare-fun FStar.Pervasives.__proj__V__item__v (Term Term) Term)
;;;;;;;;;;;;;;;;projectee:(uu___157885:FStar.Pervasives.result a{ Prims.b2t (V? uu___157885) }) -> Prims.Tot a
(declare-fun Tm_arrow_bf84b86e4714dba88d5fa227c56fabbb () Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_bf84b86e4714dba88d5fa227c56fabbb
;;; Fact-ids: Name FStar.Pervasives.__proj__V__item__v; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_bf84b86e4714dba88d5fa227c56fabbb
Tm_type)
:named kinding_Tm_arrow_bf84b86e4714dba88d5fa227c56fabbb))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.__proj__V__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_bf84b86e4714dba88d5fa227c56fabbb)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_bf84b86e4714dba88d5fa227c56fabbb))
:qid FStar.Pervasives_pre_typing_Tm_arrow_bf84b86e4714dba88d5fa227c56fabbb))
:named FStar.Pervasives_pre_typing_Tm_arrow_bf84b86e4714dba88d5fa227c56fabbb))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_bf84b86e4714dba88d5fa227c56fabbb
;;; Fact-ids: Name FStar.Pervasives.__proj__V__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_bf84b86e4714dba88d5fa227c56fabbb)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d @x1)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x1))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid FStar.Pervasives_interpretation_Tm_arrow_bf84b86e4714dba88d5fa227c56fabbb.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_bf84b86e4714dba88d5fa227c56fabbb))
:qid FStar.Pervasives_interpretation_Tm_arrow_bf84b86e4714dba88d5fa227c56fabbb))
:named FStar.Pervasives_interpretation_Tm_arrow_bf84b86e4714dba88d5fa227c56fabbb))
(declare-fun FStar.Pervasives.__proj__V__item__v@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.__proj__V__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.__proj__V__item__v@tok
@x0)
@x1)
(FStar.Pervasives.__proj__V__item__v @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.__proj__V__item__v@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.__proj__V__item__v @x0
@x1))
:qid token_correspondence_FStar.Pervasives.__proj__V__item__v))
:named token_correspondence_FStar.Pervasives.__proj__V__item__v))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.__proj__V__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.__proj__V__item__v@tok
Tm_arrow_bf84b86e4714dba88d5fa227c56fabbb))
 

:pattern ((ApplyTT FStar.Pervasives.__proj__V__item__v@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.__proj__V__item__v@tok))
:qid function_token_typing_FStar.Pervasives.__proj__V__item__v))
:named function_token_typing_FStar.Pervasives.__proj__V__item__v))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.__proj__V__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives_Tm_refine_9db520b26a7f39c5a01493a3f375290d @x0)))
(HasType (FStar.Pervasives.__proj__V__item__v @x0
@x1)
@x0))
 

:pattern ((FStar.Pervasives.__proj__V__item__v @x0
@x1))
:qid typing_FStar.Pervasives.__proj__V__item__v))
:named typing_FStar.Pervasives.__proj__V__item__v))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.__proj__V__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.__proj__V__item__v @x0
@x1)
(FStar.Pervasives.V_v @x1))
 

:pattern ((FStar.Pervasives.__proj__V__item__v @x0
@x1))
:qid proj_equation_FStar.Pervasives.V_v))
:named proj_equation_FStar.Pervasives.V_v))

; </end encoding FStar.Pervasives.__proj__V__item__v>

; <Skipped FStar.Pervasives.__proj__V__item__v/>

; <Start encoding FStar.Pervasives.uu___is_E>
(declare-fun FStar.Pervasives.uu___is_E (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_E@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.uu___is_E; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.uu___is_E@tok
@x0)
@x1)
(FStar.Pervasives.uu___is_E @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.uu___is_E@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.uu___is_E @x0
@x1))
:qid token_correspondence_FStar.Pervasives.uu___is_E))
:named token_correspondence_FStar.Pervasives.uu___is_E))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_E; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.uu___is_E@tok
(Tm_arrow_e62fd03c6d75c90fe0c21b54135b4ded Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.uu___is_E@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.uu___is_E@tok))
:qid function_token_typing_FStar.Pervasives.uu___is_E))
:named function_token_typing_FStar.Pervasives.uu___is_E))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_E; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.result @x0)))
(HasType (FStar.Pervasives.uu___is_E @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.uu___is_E @x0
@x1))
:qid typing_FStar.Pervasives.uu___is_E))
:named typing_FStar.Pervasives.uu___is_E))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.uu___is_E; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.uu___is_E @x0
@x1)
(BoxBool (is-FStar.Pervasives.E @x1)))
 

:pattern ((FStar.Pervasives.uu___is_E @x0
@x1))
:qid disc_equation_FStar.Pervasives.E))
:named disc_equation_FStar.Pervasives.E))

; </end encoding FStar.Pervasives.uu___is_E>

; <Skipped FStar.Pervasives.uu___is_E/>

; <Start encoding FStar.Pervasives.__proj__E__item__e>
(declare-fun FStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.__proj__E__item__e; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (FStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 @x0)
Tm_type)
 

:pattern ((HasType (FStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 @x0)
Tm_type))
:qid refinement_kinding_FStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5))
:named refinement_kinding_FStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: Name FStar.Pervasives.__proj__E__item__e; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (exists ((@x1 Term))
 (! (and (HasType @x1
(FStar.Pervasives.result @x0))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(87,4-87,5); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(87,4-87,5)
(BoxBool_proj_0 (FStar.Pervasives.uu___is_E @x0
@x1))
)
 
;;no pats
:qid ref_valid_FStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5.1))
(Valid (FStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 @x0)))
 

:pattern ((Valid (FStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 @x0)))
:qid ref_valid_FStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5))
:named ref_valid_FStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5))
;;;;;;;;;;;;;;;;(uu___157905:FStar.Pervasives.result a{ Prims.b2t (E? uu___157905) })
;;; Fact-ids: Name FStar.Pervasives.__proj__E__item__e; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(FStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 @x2))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.result @x2))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(87,4-87,5); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(87,4-87,5)
(BoxBool_proj_0 (FStar.Pervasives.uu___is_E @x2
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 @x2)))
:qid refinement_interpretation_FStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5))
:named refinement_interpretation_FStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5))
;;;;;;;;;;;;;;;;haseq for FStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5
;;; Fact-ids: Name FStar.Pervasives.__proj__E__item__e; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (FStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 @x0)))
(Valid (Prims.hasEq (FStar.Pervasives.result @x0))))
 

:pattern ((Valid (Prims.hasEq (FStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 @x0))))
:qid haseqFStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5))
:named haseqFStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5))
(declare-fun FStar.Pervasives.__proj__E__item__e (Term Term) Term)
;;;;;;;;;;;;;;;;projectee:(uu___157919:FStar.Pervasives.result a{ Prims.b2t (E? uu___157919) }) ->...
(declare-fun Tm_arrow_28bfbd2790e868cd7c317313e9ee5c1a (Term) Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_28bfbd2790e868cd7c317313e9ee5c1a
;;; Fact-ids: Name FStar.Pervasives.__proj__E__item__e; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_28bfbd2790e868cd7c317313e9ee5c1a @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_28bfbd2790e868cd7c317313e9ee5c1a @x0)
Tm_type))
:qid kinding_Tm_arrow_28bfbd2790e868cd7c317313e9ee5c1a))
:named kinding_Tm_arrow_28bfbd2790e868cd7c317313e9ee5c1a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.__proj__E__item__e; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_28bfbd2790e868cd7c317313e9ee5c1a @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_28bfbd2790e868cd7c317313e9ee5c1a @x2)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_28bfbd2790e868cd7c317313e9ee5c1a))
:named FStar.Pervasives_pre_typing_Tm_arrow_28bfbd2790e868cd7c317313e9ee5c1a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_28bfbd2790e868cd7c317313e9ee5c1a
;;; Fact-ids: Name FStar.Pervasives.__proj__E__item__e; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_28bfbd2790e868cd7c317313e9ee5c1a @x1))
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 @x2)))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x1))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid FStar.Pervasives_interpretation_Tm_arrow_28bfbd2790e868cd7c317313e9ee5c1a.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_28bfbd2790e868cd7c317313e9ee5c1a @x1)))
:qid FStar.Pervasives_interpretation_Tm_arrow_28bfbd2790e868cd7c317313e9ee5c1a))
:named FStar.Pervasives_interpretation_Tm_arrow_28bfbd2790e868cd7c317313e9ee5c1a))
(declare-fun FStar.Pervasives.__proj__E__item__e@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.__proj__E__item__e; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.__proj__E__item__e@tok
@x0)
@x1)
(FStar.Pervasives.__proj__E__item__e @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.__proj__E__item__e@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.__proj__E__item__e @x0
@x1))
:qid token_correspondence_FStar.Pervasives.__proj__E__item__e))
:named token_correspondence_FStar.Pervasives.__proj__E__item__e))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.__proj__E__item__e; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.__proj__E__item__e@tok
(Tm_arrow_28bfbd2790e868cd7c317313e9ee5c1a Prims.exn)))
 

:pattern ((ApplyTT FStar.Pervasives.__proj__E__item__e@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.__proj__E__item__e@tok))
:qid function_token_typing_FStar.Pervasives.__proj__E__item__e))
:named function_token_typing_FStar.Pervasives.__proj__E__item__e))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.__proj__E__item__e; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives_Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 @x0)))
(HasType (FStar.Pervasives.__proj__E__item__e @x0
@x1)
Prims.exn))
 

:pattern ((FStar.Pervasives.__proj__E__item__e @x0
@x1))
:qid typing_FStar.Pervasives.__proj__E__item__e))
:named typing_FStar.Pervasives.__proj__E__item__e))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.__proj__E__item__e; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.__proj__E__item__e @x0
@x1)
(FStar.Pervasives.E_e @x1))
 

:pattern ((FStar.Pervasives.__proj__E__item__e @x0
@x1))
:qid proj_equation_FStar.Pervasives.E_e))
:named proj_equation_FStar.Pervasives.E_e))

; </end encoding FStar.Pervasives.__proj__E__item__e>

; <Skipped FStar.Pervasives.__proj__E__item__e/>

; <Start encoding FStar.Pervasives.uu___is_Err>
(declare-fun FStar.Pervasives.uu___is_Err (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Err@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.uu___is_Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.uu___is_Err@tok
@x0)
@x1)
(FStar.Pervasives.uu___is_Err @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.uu___is_Err@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.uu___is_Err @x0
@x1))
:qid token_correspondence_FStar.Pervasives.uu___is_Err))
:named token_correspondence_FStar.Pervasives.uu___is_Err))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.uu___is_Err@tok
(Tm_arrow_e62fd03c6d75c90fe0c21b54135b4ded Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.uu___is_Err@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.uu___is_Err@tok))
:qid function_token_typing_FStar.Pervasives.uu___is_Err))
:named function_token_typing_FStar.Pervasives.uu___is_Err))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.result @x0)))
(HasType (FStar.Pervasives.uu___is_Err @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.uu___is_Err @x0
@x1))
:qid typing_FStar.Pervasives.uu___is_Err))
:named typing_FStar.Pervasives.uu___is_Err))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.uu___is_Err; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.uu___is_Err @x0
@x1)
(BoxBool (is-FStar.Pervasives.Err @x1)))
 

:pattern ((FStar.Pervasives.uu___is_Err @x0
@x1))
:qid disc_equation_FStar.Pervasives.Err))
:named disc_equation_FStar.Pervasives.Err))

; </end encoding FStar.Pervasives.uu___is_Err>

; <Skipped FStar.Pervasives.uu___is_Err/>

; <Start encoding FStar.Pervasives.__proj__Err__item__msg>
(declare-fun FStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.__proj__Err__item__msg; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (FStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f @x0)
Tm_type)
 

:pattern ((HasType (FStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f @x0)
Tm_type))
:qid refinement_kinding_FStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f))
:named refinement_kinding_FStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: Name FStar.Pervasives.__proj__Err__item__msg; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (exists ((@x1 Term))
 (! (and (HasType @x1
(FStar.Pervasives.result @x0))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(88,4-88,7); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(88,4-88,7)
(BoxBool_proj_0 (FStar.Pervasives.uu___is_Err @x0
@x1))
)
 
;;no pats
:qid ref_valid_FStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f.1))
(Valid (FStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f @x0)))
 

:pattern ((Valid (FStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f @x0)))
:qid ref_valid_FStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f))
:named ref_valid_FStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f))
;;;;;;;;;;;;;;;;(uu___157939:FStar.Pervasives.result a{ Prims.b2t (Err? uu___157939) })
;;; Fact-ids: Name FStar.Pervasives.__proj__Err__item__msg; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(FStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f @x2))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.result @x2))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(88,4-88,7); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(88,4-88,7)
(BoxBool_proj_0 (FStar.Pervasives.uu___is_Err @x2
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f @x2)))
:qid refinement_interpretation_FStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f))
:named refinement_interpretation_FStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f))
;;;;;;;;;;;;;;;;haseq for FStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f
;;; Fact-ids: Name FStar.Pervasives.__proj__Err__item__msg; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (FStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f @x0)))
(Valid (Prims.hasEq (FStar.Pervasives.result @x0))))
 

:pattern ((Valid (Prims.hasEq (FStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f @x0))))
:qid haseqFStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f))
:named haseqFStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f))
(declare-fun FStar.Pervasives.__proj__Err__item__msg (Term Term) Term)
;;;;;;;;;;;;;;;;projectee:(uu___157953:FStar.Pervasives.result a{ Prims.b2t (Err? uu___157953) }) ->...
(declare-fun Tm_arrow_8024419d86cafa6a8f5a740b84a7c291 (Term) Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_8024419d86cafa6a8f5a740b84a7c291
;;; Fact-ids: Name FStar.Pervasives.__proj__Err__item__msg; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_8024419d86cafa6a8f5a740b84a7c291 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_8024419d86cafa6a8f5a740b84a7c291 @x0)
Tm_type))
:qid kinding_Tm_arrow_8024419d86cafa6a8f5a740b84a7c291))
:named kinding_Tm_arrow_8024419d86cafa6a8f5a740b84a7c291))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.__proj__Err__item__msg; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_8024419d86cafa6a8f5a740b84a7c291 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_8024419d86cafa6a8f5a740b84a7c291 @x2)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_8024419d86cafa6a8f5a740b84a7c291))
:named FStar.Pervasives_pre_typing_Tm_arrow_8024419d86cafa6a8f5a740b84a7c291))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_8024419d86cafa6a8f5a740b84a7c291
;;; Fact-ids: Name FStar.Pervasives.__proj__Err__item__msg; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_8024419d86cafa6a8f5a740b84a7c291 @x1))
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f @x2)))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x1))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid FStar.Pervasives_interpretation_Tm_arrow_8024419d86cafa6a8f5a740b84a7c291.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_8024419d86cafa6a8f5a740b84a7c291 @x1)))
:qid FStar.Pervasives_interpretation_Tm_arrow_8024419d86cafa6a8f5a740b84a7c291))
:named FStar.Pervasives_interpretation_Tm_arrow_8024419d86cafa6a8f5a740b84a7c291))
(declare-fun FStar.Pervasives.__proj__Err__item__msg@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.__proj__Err__item__msg; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.__proj__Err__item__msg@tok
@x0)
@x1)
(FStar.Pervasives.__proj__Err__item__msg @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.__proj__Err__item__msg@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.__proj__Err__item__msg @x0
@x1))
:qid token_correspondence_FStar.Pervasives.__proj__Err__item__msg))
:named token_correspondence_FStar.Pervasives.__proj__Err__item__msg))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Err__item__msg; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.__proj__Err__item__msg@tok
(Tm_arrow_8024419d86cafa6a8f5a740b84a7c291 Prims.string)))
 

:pattern ((ApplyTT FStar.Pervasives.__proj__Err__item__msg@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.__proj__Err__item__msg@tok))
:qid function_token_typing_FStar.Pervasives.__proj__Err__item__msg))
:named function_token_typing_FStar.Pervasives.__proj__Err__item__msg))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Err__item__msg; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives_Tm_refine_22fb403854eba07427f92e79848f9d9f @x0)))
(HasType (FStar.Pervasives.__proj__Err__item__msg @x0
@x1)
Prims.string))
 

:pattern ((FStar.Pervasives.__proj__Err__item__msg @x0
@x1))
:qid typing_FStar.Pervasives.__proj__Err__item__msg))
:named typing_FStar.Pervasives.__proj__Err__item__msg))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.__proj__Err__item__msg; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.__proj__Err__item__msg @x0
@x1)
(FStar.Pervasives.Err_msg @x1))
 

:pattern ((FStar.Pervasives.__proj__Err__item__msg @x0
@x1))
:qid proj_equation_FStar.Pervasives.Err_msg))
:named proj_equation_FStar.Pervasives.Err_msg))

; </end encoding FStar.Pervasives.__proj__Err__item__msg>

; <Skipped FStar.Pervasives.__proj__Err__item__msg/>

; <Start encoding FStar.Pervasives.ex_pre>
(declare-fun FStar.Pervasives.ex_pre () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.ex_pre; Namespace FStar.Pervasives
(assert (! (HasType FStar.Pervasives.ex_pre
Tm_type)
:named function_token_typing_FStar.Pervasives.ex_pre))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.ex_pre; Namespace FStar.Pervasives
(assert (! (HasType FStar.Pervasives.ex_pre
Tm_type)
:named typing_FStar.Pervasives.ex_pre))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.ex_pre
;;; Fact-ids: Name FStar.Pervasives.ex_pre; Namespace FStar.Pervasives
(assert (! (= FStar.Pervasives.ex_pre
Tm_type)
:named equation_FStar.Pervasives.ex_pre))

; </end encoding FStar.Pervasives.ex_pre>

; <Start encoding FStar.Pervasives.ex_post>
(declare-fun FStar.Pervasives.ex_post (Term) Term)

(declare-fun FStar.Pervasives.ex_post@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.ex_post; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.ex_post@tok
@x0)
(FStar.Pervasives.ex_post @x0))
 

:pattern ((ApplyTT FStar.Pervasives.ex_post@tok
@x0))

:pattern ((FStar.Pervasives.ex_post @x0))
:qid token_correspondence_FStar.Pervasives.ex_post))
:named token_correspondence_FStar.Pervasives.ex_post))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.ex_post; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.ex_post@tok
Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
 

:pattern ((ApplyTT FStar.Pervasives.ex_post@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.ex_post@tok))
:qid function_token_typing_FStar.Pervasives.ex_post))
:named function_token_typing_FStar.Pervasives.ex_post))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.ex_post; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Pervasives.ex_post @x0)
Tm_type))
 

:pattern ((FStar.Pervasives.ex_post @x0))
:qid typing_FStar.Pervasives.ex_post))
:named typing_FStar.Pervasives.ex_post))
;;;;;;;;;;;;;;;;uu___157961:FStar.Pervasives.result a -> Prims.Tot Type0
(declare-fun Tm_arrow_93430ecdc6b299fe940e8255e1864551 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_93430ecdc6b299fe940e8255e1864551
;;; Fact-ids: Name FStar.Pervasives.ex_post; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_93430ecdc6b299fe940e8255e1864551 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_93430ecdc6b299fe940e8255e1864551 @x0)
Tm_type))
:qid kinding_Tm_arrow_93430ecdc6b299fe940e8255e1864551))
:named kinding_Tm_arrow_93430ecdc6b299fe940e8255e1864551))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.ex_post; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_93430ecdc6b299fe940e8255e1864551 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_93430ecdc6b299fe940e8255e1864551 @x2)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_93430ecdc6b299fe940e8255e1864551))
:named FStar.Pervasives_pre_typing_Tm_arrow_93430ecdc6b299fe940e8255e1864551))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_93430ecdc6b299fe940e8255e1864551
;;; Fact-ids: Name FStar.Pervasives.ex_post; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_93430ecdc6b299fe940e8255e1864551 @x1))
(forall ((@x2 Term))
 (! (implies (HasType @x2
(FStar.Pervasives.result @x1))
(HasType (ApplyTT @x0
@x2)
Tm_type))
 

:pattern ((ApplyTT @x0
@x2))
:qid FStar.Pervasives_interpretation_Tm_arrow_93430ecdc6b299fe940e8255e1864551.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_93430ecdc6b299fe940e8255e1864551 @x1)))
:qid FStar.Pervasives_interpretation_Tm_arrow_93430ecdc6b299fe940e8255e1864551))
:named FStar.Pervasives_interpretation_Tm_arrow_93430ecdc6b299fe940e8255e1864551))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.ex_post
;;; Fact-ids: Name FStar.Pervasives.ex_post; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (FStar.Pervasives.ex_post @x0)
(Tm_arrow_93430ecdc6b299fe940e8255e1864551 @x0))
 

:pattern ((FStar.Pervasives.ex_post @x0))
:qid equation_FStar.Pervasives.ex_post))
:named equation_FStar.Pervasives.ex_post))

; </end encoding FStar.Pervasives.ex_post>

; <Start encoding FStar.Pervasives.ex_wp>
(declare-fun FStar.Pervasives.ex_wp (Term) Term)

(declare-fun FStar.Pervasives.ex_wp@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.ex_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.ex_wp@tok
@x0)
(FStar.Pervasives.ex_wp @x0))
 

:pattern ((ApplyTT FStar.Pervasives.ex_wp@tok
@x0))

:pattern ((FStar.Pervasives.ex_wp @x0))
:qid token_correspondence_FStar.Pervasives.ex_wp))
:named token_correspondence_FStar.Pervasives.ex_wp))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.ex_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.ex_wp@tok
Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
 

:pattern ((ApplyTT FStar.Pervasives.ex_wp@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.ex_wp@tok))
:qid function_token_typing_FStar.Pervasives.ex_wp))
:named function_token_typing_FStar.Pervasives.ex_wp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.ex_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Pervasives.ex_wp @x0)
Tm_type))
 

:pattern ((FStar.Pervasives.ex_wp @x0))
:qid typing_FStar.Pervasives.ex_wp))
:named typing_FStar.Pervasives.ex_wp))
;;;;;;;;;;;;;;;;uu___157969:FStar.Pervasives.ex_post a -> Prims.GTot FStar.Pervasives.ex_pre
(declare-fun Tm_arrow_87ef52d5a8e7306848436909b0c69460 (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_87ef52d5a8e7306848436909b0c69460
;;; Fact-ids: Name FStar.Pervasives.ex_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_87ef52d5a8e7306848436909b0c69460 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_87ef52d5a8e7306848436909b0c69460 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_87ef52d5a8e7306848436909b0c69460))
:named kinding_Tm_arrow_87ef52d5a8e7306848436909b0c69460))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.ex_wp; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_87ef52d5a8e7306848436909b0c69460 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_87ef52d5a8e7306848436909b0c69460 @x2
@x3)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_87ef52d5a8e7306848436909b0c69460))
:named FStar.Pervasives_pre_typing_Tm_arrow_87ef52d5a8e7306848436909b0c69460))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_87ef52d5a8e7306848436909b0c69460
;;; Fact-ids: Name FStar.Pervasives.ex_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_87ef52d5a8e7306848436909b0c69460 @x1
@x2))
(forall ((@x3 Term))
 (! (implies (HasType @x3
(FStar.Pervasives.ex_post @x2))
(HasType (ApplyTT @x0
@x3)
@x1))
 

:pattern ((ApplyTT @x0
@x3))
:qid FStar.Pervasives_interpretation_Tm_arrow_87ef52d5a8e7306848436909b0c69460.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_87ef52d5a8e7306848436909b0c69460 @x1
@x2)))
:qid FStar.Pervasives_interpretation_Tm_arrow_87ef52d5a8e7306848436909b0c69460))
:named FStar.Pervasives_interpretation_Tm_arrow_87ef52d5a8e7306848436909b0c69460))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.ex_wp
;;; Fact-ids: Name FStar.Pervasives.ex_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (FStar.Pervasives.ex_wp @x0)
(Tm_arrow_87ef52d5a8e7306848436909b0c69460 FStar.Pervasives.ex_pre
@x0))
 

:pattern ((FStar.Pervasives.ex_wp @x0))
:qid equation_FStar.Pervasives.ex_wp))
:named equation_FStar.Pervasives.ex_wp))

; </end encoding FStar.Pervasives.ex_wp>

; <Start encoding FStar.Pervasives.ex_return>
(declare-fun FStar.Pervasives.ex_return (Term Term Term) Term)
;;;;;;;;;;;;;;;;a:Type -> x:a -> p:FStar.Pervasives.ex_post a -> Prims.Tot Type0
(declare-fun Tm_arrow_4eb2e0118149efb6019111cf994e0f6b () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_4eb2e0118149efb6019111cf994e0f6b
;;; Fact-ids: Name FStar.Pervasives.ex_return; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_4eb2e0118149efb6019111cf994e0f6b
Tm_type)
:named kinding_Tm_arrow_4eb2e0118149efb6019111cf994e0f6b))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.ex_return; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_4eb2e0118149efb6019111cf994e0f6b)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_4eb2e0118149efb6019111cf994e0f6b))
:qid FStar.Pervasives_pre_typing_Tm_arrow_4eb2e0118149efb6019111cf994e0f6b))
:named FStar.Pervasives_pre_typing_Tm_arrow_4eb2e0118149efb6019111cf994e0f6b))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_4eb2e0118149efb6019111cf994e0f6b
;;; Fact-ids: Name FStar.Pervasives.ex_return; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_4eb2e0118149efb6019111cf994e0f6b)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
@x1)
(HasType @x3
(FStar.Pervasives.ex_post @x1)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid FStar.Pervasives_interpretation_Tm_arrow_4eb2e0118149efb6019111cf994e0f6b.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_4eb2e0118149efb6019111cf994e0f6b))
:qid FStar.Pervasives_interpretation_Tm_arrow_4eb2e0118149efb6019111cf994e0f6b))
:named FStar.Pervasives_interpretation_Tm_arrow_4eb2e0118149efb6019111cf994e0f6b))
(declare-fun FStar.Pervasives.ex_return@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.ex_return; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.ex_return@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.ex_return @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.ex_return@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.ex_return @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.ex_return))
:named token_correspondence_FStar.Pervasives.ex_return))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.ex_return; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.ex_return@tok
Tm_arrow_4eb2e0118149efb6019111cf994e0f6b))
 

:pattern ((ApplyTT FStar.Pervasives.ex_return@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.ex_return@tok))
:qid function_token_typing_FStar.Pervasives.ex_return))
:named function_token_typing_FStar.Pervasives.ex_return))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.ex_return; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
(FStar.Pervasives.ex_post @x0)))
(HasType (FStar.Pervasives.ex_return @x0
@x1
@x2)
Tm_type))
 

:pattern ((FStar.Pervasives.ex_return @x0
@x1
@x2))
:qid typing_FStar.Pervasives.ex_return))
:named typing_FStar.Pervasives.ex_return))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.ex_return
;;; Fact-ids: Name FStar.Pervasives.ex_return; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.ex_return @x0
@x1
@x2)
(ApplyTT @x2
(FStar.Pervasives.V @x0
@x1)))
 

:pattern ((FStar.Pervasives.ex_return @x0
@x1
@x2))
:qid equation_FStar.Pervasives.ex_return))
:named equation_FStar.Pervasives.ex_return))

; </end encoding FStar.Pervasives.ex_return>

; <Start encoding FStar.Pervasives.ex_bind_wp>
;;;;;;;;;;;;;;;;uu___158004:a -> Prims.GTot (FStar.Pervasives.ex_wp b)
(declare-fun Tm_arrow_d794a58e52e51e13e3b9afe660625c54 (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_d794a58e52e51e13e3b9afe660625c54
;;; Fact-ids: Name FStar.Pervasives.ex_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_d794a58e52e51e13e3b9afe660625c54 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_d794a58e52e51e13e3b9afe660625c54 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_d794a58e52e51e13e3b9afe660625c54))
:named kinding_Tm_arrow_d794a58e52e51e13e3b9afe660625c54))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.ex_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_d794a58e52e51e13e3b9afe660625c54 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_d794a58e52e51e13e3b9afe660625c54 @x2
@x3)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_d794a58e52e51e13e3b9afe660625c54))
:named FStar.Pervasives_pre_typing_Tm_arrow_d794a58e52e51e13e3b9afe660625c54))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d794a58e52e51e13e3b9afe660625c54
;;; Fact-ids: Name FStar.Pervasives.ex_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_d794a58e52e51e13e3b9afe660625c54 @x1
@x2))
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(FStar.Pervasives.ex_wp @x1)))
 

:pattern ((ApplyTT @x0
@x3))
:qid FStar.Pervasives_interpretation_Tm_arrow_d794a58e52e51e13e3b9afe660625c54.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_d794a58e52e51e13e3b9afe660625c54 @x1
@x2)))
:qid FStar.Pervasives_interpretation_Tm_arrow_d794a58e52e51e13e3b9afe660625c54))
:named FStar.Pervasives_interpretation_Tm_arrow_d794a58e52e51e13e3b9afe660625c54))
(declare-fun FStar.Pervasives.ex_bind_wp (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;r1:Prims.range ->...
(declare-fun Tm_arrow_dd2de7e516014096b8b41947307b7781 (Term) Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_dd2de7e516014096b8b41947307b7781
;;; Fact-ids: Name FStar.Pervasives.ex_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_dd2de7e516014096b8b41947307b7781 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_dd2de7e516014096b8b41947307b7781 @x0)
Tm_type))
:qid kinding_Tm_arrow_dd2de7e516014096b8b41947307b7781))
:named kinding_Tm_arrow_dd2de7e516014096b8b41947307b7781))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.ex_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_dd2de7e516014096b8b41947307b7781 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_dd2de7e516014096b8b41947307b7781 @x2)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_dd2de7e516014096b8b41947307b7781))
:named FStar.Pervasives_pre_typing_Tm_arrow_dd2de7e516014096b8b41947307b7781))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_dd2de7e516014096b8b41947307b7781
;;; Fact-ids: Name FStar.Pervasives.ex_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_dd2de7e516014096b8b41947307b7781 @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x2
@x1)
(HasType @x3
Tm_type)
(HasType @x4
Tm_type)
(HasType @x5
(FStar.Pervasives.ex_wp @x3))
(HasType @x6
(Tm_arrow_d794a58e52e51e13e3b9afe660625c54 @x4
@x3))
(HasType @x7
(FStar.Pervasives.ex_post @x4)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))
:qid FStar.Pervasives_interpretation_Tm_arrow_dd2de7e516014096b8b41947307b7781.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_dd2de7e516014096b8b41947307b7781 @x1)))
:qid FStar.Pervasives_interpretation_Tm_arrow_dd2de7e516014096b8b41947307b7781))
:named FStar.Pervasives_interpretation_Tm_arrow_dd2de7e516014096b8b41947307b7781))
(declare-fun FStar.Pervasives.ex_bind_wp@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.ex_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.ex_bind_wp@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
(FStar.Pervasives.ex_bind_wp @x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.ex_bind_wp@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5))

:pattern ((FStar.Pervasives.ex_bind_wp @x0
@x1
@x2
@x3
@x4
@x5))
:qid token_correspondence_FStar.Pervasives.ex_bind_wp))
:named token_correspondence_FStar.Pervasives.ex_bind_wp))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.ex_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.ex_bind_wp@tok
(Tm_arrow_dd2de7e516014096b8b41947307b7781 Prims.range)))
 

:pattern ((ApplyTT FStar.Pervasives.ex_bind_wp@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.ex_bind_wp@tok))
:qid function_token_typing_FStar.Pervasives.ex_bind_wp))
:named function_token_typing_FStar.Pervasives.ex_bind_wp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.ex_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Prims.range)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.ex_wp @x1))
(HasType @x4
(Tm_arrow_d794a58e52e51e13e3b9afe660625c54 @x2
@x1))
(HasType @x5
(FStar.Pervasives.ex_post @x2)))
(HasType (FStar.Pervasives.ex_bind_wp @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
 

:pattern ((FStar.Pervasives.ex_bind_wp @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_FStar.Pervasives.ex_bind_wp))
:named typing_FStar.Pervasives.ex_bind_wp))


(declare-fun FStar.Pervasives_Tm_abs_64bf5d0b7ac86badad6aa1507a13a6d0 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_FStar.Pervasives_Tm_abs_64bf5d0b7ac86badad6aa1507a13a6d0
;;; Fact-ids: Name FStar.Pervasives.ex_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (FStar.Pervasives_Tm_abs_64bf5d0b7ac86badad6aa1507a13a6d0 @x0
@x1
@x2
@x3)
(Tm_arrow_93430ecdc6b299fe940e8255e1864551 @x3))
 

:pattern ((FStar.Pervasives_Tm_abs_64bf5d0b7ac86badad6aa1507a13a6d0 @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives_Tm_abs_64bf5d0b7ac86badad6aa1507a13a6d0))
:named typing_FStar.Pervasives_Tm_abs_64bf5d0b7ac86badad6aa1507a13a6d0))
;;;;;;;;;;;;;;;;interpretation_FStar.Pervasives_Tm_abs_64bf5d0b7ac86badad6aa1507a13a6d0
;;; Fact-ids: Name FStar.Pervasives.ex_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (FStar.Pervasives_Tm_abs_64bf5d0b7ac86badad6aa1507a13a6d0 @x1
@x2
@x3
@x4)
@x0)
(Prims.l_and (Prims.l_imp (Prims.b2t (FStar.Pervasives.uu___is_V @x4
@x0))
(ApplyTT (ApplyTT @x1
(FStar.Pervasives.__proj__V__item__v @x4
@x0))
@x2))
(Prims.l_imp (Prims.b2t (FStar.Pervasives.uu___is_E @x4
@x0))
(ApplyTT @x2
(FStar.Pervasives.E @x3
(FStar.Pervasives.__proj__E__item__e @x4
@x0))))))
 

:pattern ((ApplyTT (FStar.Pervasives_Tm_abs_64bf5d0b7ac86badad6aa1507a13a6d0 @x1
@x2
@x3
@x4)
@x0))
:qid interpretation_FStar.Pervasives_Tm_abs_64bf5d0b7ac86badad6aa1507a13a6d0))
:named interpretation_FStar.Pervasives_Tm_abs_64bf5d0b7ac86badad6aa1507a13a6d0))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.ex_bind_wp
;;; Fact-ids: Name FStar.Pervasives.ex_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Valid (FStar.Pervasives.ex_bind_wp @x0
@x1
@x2
@x3
@x4
@x5))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(99,2-102,37); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(99,2-102,37)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(FStar.Pervasives.ex_post @x2))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(100,5-100,73); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(100,5-100,73)
(forall ((@x7 Term))
 (! 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(100,58-100,72); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(100,58-100,72)
(iff 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(100,58-100,62); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(100,58-100,62)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(100,58-100,62); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(100,58-100,62)
(ApplyTT @x6
@x7)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(100,68-100,72); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(100,68-100,72)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(100,68-100,72); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(100,68-100,72)
(ApplyTT @x5
@x7)
)
)

 

:pattern ((ApplyTT @x6
@x7))
:qid equation_FStar.Pervasives.ex_bind_wp.2))
)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(101,9-102,37); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(101,9-102,37)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(101,9-102,37); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(101,9-102,37)
(ApplyTT @x3
(FStar.Pervasives_Tm_abs_64bf5d0b7ac86badad6aa1507a13a6d0 @x4
@x6
@x2
@x1))
)
)
 
;;no pats
:qid equation_FStar.Pervasives.ex_bind_wp.1))
)
 

:pattern ((Valid (FStar.Pervasives.ex_bind_wp @x0
@x1
@x2
@x3
@x4
@x5)))
:qid equation_FStar.Pervasives.ex_bind_wp))
:named equation_FStar.Pervasives.ex_bind_wp))

; </end encoding FStar.Pervasives.ex_bind_wp>

; <Start encoding FStar.Pervasives.ex_ite_wp>
(declare-fun FStar.Pervasives.ex_ite_wp (Term Term Term) Term)
;;;;;;;;;;;;;;;;a:Type -> wp:FStar.Pervasives.ex_wp a -> post:FStar.Pervasives.ex_post a -> Prims.Tot Type0
(declare-fun Tm_arrow_e4b34067e043e0a0cc2e764f3e22d0d4 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_e4b34067e043e0a0cc2e764f3e22d0d4
;;; Fact-ids: Name FStar.Pervasives.ex_ite_wp; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_e4b34067e043e0a0cc2e764f3e22d0d4
Tm_type)
:named kinding_Tm_arrow_e4b34067e043e0a0cc2e764f3e22d0d4))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.ex_ite_wp; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_e4b34067e043e0a0cc2e764f3e22d0d4)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_e4b34067e043e0a0cc2e764f3e22d0d4))
:qid FStar.Pervasives_pre_typing_Tm_arrow_e4b34067e043e0a0cc2e764f3e22d0d4))
:named FStar.Pervasives_pre_typing_Tm_arrow_e4b34067e043e0a0cc2e764f3e22d0d4))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_e4b34067e043e0a0cc2e764f3e22d0d4
;;; Fact-ids: Name FStar.Pervasives.ex_ite_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_e4b34067e043e0a0cc2e764f3e22d0d4)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.ex_wp @x1))
(HasType @x3
(FStar.Pervasives.ex_post @x1)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid FStar.Pervasives_interpretation_Tm_arrow_e4b34067e043e0a0cc2e764f3e22d0d4.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_e4b34067e043e0a0cc2e764f3e22d0d4))
:qid FStar.Pervasives_interpretation_Tm_arrow_e4b34067e043e0a0cc2e764f3e22d0d4))
:named FStar.Pervasives_interpretation_Tm_arrow_e4b34067e043e0a0cc2e764f3e22d0d4))
(declare-fun FStar.Pervasives.ex_ite_wp@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.ex_ite_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.ex_ite_wp@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.ex_ite_wp @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.ex_ite_wp@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.ex_ite_wp @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.ex_ite_wp))
:named token_correspondence_FStar.Pervasives.ex_ite_wp))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.ex_ite_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.ex_ite_wp@tok
Tm_arrow_e4b34067e043e0a0cc2e764f3e22d0d4))
 

:pattern ((ApplyTT FStar.Pervasives.ex_ite_wp@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.ex_ite_wp@tok))
:qid function_token_typing_FStar.Pervasives.ex_ite_wp))
:named function_token_typing_FStar.Pervasives.ex_ite_wp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.ex_ite_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.ex_wp @x0))
(HasType @x2
(FStar.Pervasives.ex_post @x0)))
(HasType (FStar.Pervasives.ex_ite_wp @x0
@x1
@x2)
Tm_type))
 

:pattern ((FStar.Pervasives.ex_ite_wp @x0
@x1
@x2))
:qid typing_FStar.Pervasives.ex_ite_wp))
:named typing_FStar.Pervasives.ex_ite_wp))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.ex_ite_wp
;;; Fact-ids: Name FStar.Pervasives.ex_ite_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (FStar.Pervasives.ex_ite_wp @x0
@x1
@x2))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(105,2-107,13); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(105,2-107,13)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(FStar.Pervasives.ex_post @x0))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(106,5-106,76); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(106,5-106,76)
(forall ((@x4 Term))
 (! 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(106,58-106,75); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(106,58-106,75)
(iff 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(106,58-106,62); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(106,58-106,62)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(106,58-106,62); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(106,58-106,62)
(ApplyTT @x3
@x4)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(106,68-106,75); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(106,68-106,75)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(106,68-106,75); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(106,68-106,75)
(ApplyTT @x2
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid equation_FStar.Pervasives.ex_ite_wp.2))
)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(107,9-107,13); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(107,9-107,13)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(107,9-107,13); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(107,9-107,13)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid equation_FStar.Pervasives.ex_ite_wp.1))
)
 

:pattern ((Valid (FStar.Pervasives.ex_ite_wp @x0
@x1
@x2)))
:qid equation_FStar.Pervasives.ex_ite_wp))
:named equation_FStar.Pervasives.ex_ite_wp))

; </end encoding FStar.Pervasives.ex_ite_wp>

; <Start encoding FStar.Pervasives.ex_if_then_else>
(declare-fun FStar.Pervasives.ex_if_then_else (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;a:Type ->...
(declare-fun Tm_arrow_d23f0941b866ab0a25dc2bbc0381aa88 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_d23f0941b866ab0a25dc2bbc0381aa88
;;; Fact-ids: Name FStar.Pervasives.ex_if_then_else; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_d23f0941b866ab0a25dc2bbc0381aa88
Tm_type)
:named kinding_Tm_arrow_d23f0941b866ab0a25dc2bbc0381aa88))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.ex_if_then_else; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_d23f0941b866ab0a25dc2bbc0381aa88)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_d23f0941b866ab0a25dc2bbc0381aa88))
:qid FStar.Pervasives_pre_typing_Tm_arrow_d23f0941b866ab0a25dc2bbc0381aa88))
:named FStar.Pervasives_pre_typing_Tm_arrow_d23f0941b866ab0a25dc2bbc0381aa88))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d23f0941b866ab0a25dc2bbc0381aa88
;;; Fact-ids: Name FStar.Pervasives.ex_if_then_else; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_d23f0941b866ab0a25dc2bbc0381aa88)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.ex_wp @x1))
(HasType @x4
(FStar.Pervasives.ex_wp @x1))
(HasType @x5
(FStar.Pervasives.ex_post @x1)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid FStar.Pervasives_interpretation_Tm_arrow_d23f0941b866ab0a25dc2bbc0381aa88.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_d23f0941b866ab0a25dc2bbc0381aa88))
:qid FStar.Pervasives_interpretation_Tm_arrow_d23f0941b866ab0a25dc2bbc0381aa88))
:named FStar.Pervasives_interpretation_Tm_arrow_d23f0941b866ab0a25dc2bbc0381aa88))
(declare-fun FStar.Pervasives.ex_if_then_else@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.ex_if_then_else; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.ex_if_then_else@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(FStar.Pervasives.ex_if_then_else @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.ex_if_then_else@tok
@x0)
@x1)
@x2)
@x3)
@x4))

:pattern ((FStar.Pervasives.ex_if_then_else @x0
@x1
@x2
@x3
@x4))
:qid token_correspondence_FStar.Pervasives.ex_if_then_else))
:named token_correspondence_FStar.Pervasives.ex_if_then_else))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.ex_if_then_else; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.ex_if_then_else@tok
Tm_arrow_d23f0941b866ab0a25dc2bbc0381aa88))
 

:pattern ((ApplyTT FStar.Pervasives.ex_if_then_else@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.ex_if_then_else@tok))
:qid function_token_typing_FStar.Pervasives.ex_if_then_else))
:named function_token_typing_FStar.Pervasives.ex_if_then_else))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.ex_if_then_else; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.ex_wp @x0))
(HasType @x3
(FStar.Pervasives.ex_wp @x0))
(HasType @x4
(FStar.Pervasives.ex_post @x0)))
(HasType (FStar.Pervasives.ex_if_then_else @x0
@x1
@x2
@x3
@x4)
Tm_type))
 

:pattern ((FStar.Pervasives.ex_if_then_else @x0
@x1
@x2
@x3
@x4))
:qid typing_FStar.Pervasives.ex_if_then_else))
:named typing_FStar.Pervasives.ex_if_then_else))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.ex_if_then_else
;;; Fact-ids: Name FStar.Pervasives.ex_if_then_else; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Pervasives.ex_if_then_else @x0
@x1
@x2
@x3
@x4)
(Prims.l_and (Prims.l_imp @x1
(ApplyTT @x2
@x4))
(Prims.l_imp (Prims.l_not @x1)
(ApplyTT @x3
@x4))))
 

:pattern ((FStar.Pervasives.ex_if_then_else @x0
@x1
@x2
@x3
@x4))
:qid equation_FStar.Pervasives.ex_if_then_else))
:named equation_FStar.Pervasives.ex_if_then_else))

; </end encoding FStar.Pervasives.ex_if_then_else>

; <Start encoding FStar.Pervasives.ex_stronger>
(declare-fun FStar.Pervasives.ex_stronger (Term Term Term) Term)
;;;;;;;;;;;;;;;;a:Type -> wp1:FStar.Pervasives.ex_wp a -> wp2:FStar.Pervasives.ex_wp a -> Prims.Tot Type0
(declare-fun Tm_arrow_109c632bc36901fde564cdf93d8f4358 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_109c632bc36901fde564cdf93d8f4358
;;; Fact-ids: Name FStar.Pervasives.ex_stronger; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_109c632bc36901fde564cdf93d8f4358
Tm_type)
:named kinding_Tm_arrow_109c632bc36901fde564cdf93d8f4358))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.ex_stronger; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_109c632bc36901fde564cdf93d8f4358)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_109c632bc36901fde564cdf93d8f4358))
:qid FStar.Pervasives_pre_typing_Tm_arrow_109c632bc36901fde564cdf93d8f4358))
:named FStar.Pervasives_pre_typing_Tm_arrow_109c632bc36901fde564cdf93d8f4358))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_109c632bc36901fde564cdf93d8f4358
;;; Fact-ids: Name FStar.Pervasives.ex_stronger; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_109c632bc36901fde564cdf93d8f4358)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.ex_wp @x1))
(HasType @x3
(FStar.Pervasives.ex_wp @x1)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid FStar.Pervasives_interpretation_Tm_arrow_109c632bc36901fde564cdf93d8f4358.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_109c632bc36901fde564cdf93d8f4358))
:qid FStar.Pervasives_interpretation_Tm_arrow_109c632bc36901fde564cdf93d8f4358))
:named FStar.Pervasives_interpretation_Tm_arrow_109c632bc36901fde564cdf93d8f4358))
(declare-fun FStar.Pervasives.ex_stronger@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.ex_stronger; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.ex_stronger@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.ex_stronger @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.ex_stronger@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.ex_stronger @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.ex_stronger))
:named token_correspondence_FStar.Pervasives.ex_stronger))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.ex_stronger; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.ex_stronger@tok
Tm_arrow_109c632bc36901fde564cdf93d8f4358))
 

:pattern ((ApplyTT FStar.Pervasives.ex_stronger@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.ex_stronger@tok))
:qid function_token_typing_FStar.Pervasives.ex_stronger))
:named function_token_typing_FStar.Pervasives.ex_stronger))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.ex_stronger; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.ex_wp @x0))
(HasType @x2
(FStar.Pervasives.ex_wp @x0)))
(HasType (FStar.Pervasives.ex_stronger @x0
@x1
@x2)
Tm_type))
 

:pattern ((FStar.Pervasives.ex_stronger @x0
@x1
@x2))
:qid typing_FStar.Pervasives.ex_stronger))
:named typing_FStar.Pervasives.ex_stronger))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.ex_stronger
;;; Fact-ids: Name FStar.Pervasives.ex_stronger; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (FStar.Pervasives.ex_stronger @x0
@x1
@x2))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(114,8-114,47); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(114,8-114,47)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(FStar.Pervasives.ex_post @x0))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(114,31-114,36); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(114,31-114,36)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(114,31-114,36); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(114,31-114,36)
(ApplyTT @x1
@x3)
)
)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(114,41-114,46); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(114,41-114,46)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(114,41-114,46); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(114,41-114,46)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid equation_FStar.Pervasives.ex_stronger.1))
)
 

:pattern ((Valid (FStar.Pervasives.ex_stronger @x0
@x1
@x2)))
:qid equation_FStar.Pervasives.ex_stronger))
:named equation_FStar.Pervasives.ex_stronger))

; </end encoding FStar.Pervasives.ex_stronger>

; <Start encoding FStar.Pervasives.ex_close_wp>

(declare-fun FStar.Pervasives.ex_close_wp (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;a:Type ->...
(declare-fun Tm_arrow_d2210cf1284bb188ba152d41bee65593 () Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_d2210cf1284bb188ba152d41bee65593
;;; Fact-ids: Name FStar.Pervasives.ex_close_wp; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_d2210cf1284bb188ba152d41bee65593
Tm_type)
:named kinding_Tm_arrow_d2210cf1284bb188ba152d41bee65593))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.ex_close_wp; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_d2210cf1284bb188ba152d41bee65593)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_d2210cf1284bb188ba152d41bee65593))
:qid FStar.Pervasives_pre_typing_Tm_arrow_d2210cf1284bb188ba152d41bee65593))
:named FStar.Pervasives_pre_typing_Tm_arrow_d2210cf1284bb188ba152d41bee65593))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d2210cf1284bb188ba152d41bee65593
;;; Fact-ids: Name FStar.Pervasives.ex_close_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_d2210cf1284bb188ba152d41bee65593)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(Tm_arrow_d794a58e52e51e13e3b9afe660625c54 @x1
@x2))
(HasType @x4
(FStar.Pervasives.ex_post @x1)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid FStar.Pervasives_interpretation_Tm_arrow_d2210cf1284bb188ba152d41bee65593.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_d2210cf1284bb188ba152d41bee65593))
:qid FStar.Pervasives_interpretation_Tm_arrow_d2210cf1284bb188ba152d41bee65593))
:named FStar.Pervasives_interpretation_Tm_arrow_d2210cf1284bb188ba152d41bee65593))
(declare-fun FStar.Pervasives.ex_close_wp@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.ex_close_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.ex_close_wp@tok
@x0)
@x1)
@x2)
@x3)
(FStar.Pervasives.ex_close_wp @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.ex_close_wp@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((FStar.Pervasives.ex_close_wp @x0
@x1
@x2
@x3))
:qid token_correspondence_FStar.Pervasives.ex_close_wp))
:named token_correspondence_FStar.Pervasives.ex_close_wp))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.ex_close_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.ex_close_wp@tok
Tm_arrow_d2210cf1284bb188ba152d41bee65593))
 

:pattern ((ApplyTT FStar.Pervasives.ex_close_wp@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.ex_close_wp@tok))
:qid function_token_typing_FStar.Pervasives.ex_close_wp))
:named function_token_typing_FStar.Pervasives.ex_close_wp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.ex_close_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_d794a58e52e51e13e3b9afe660625c54 @x0
@x1))
(HasType @x3
(FStar.Pervasives.ex_post @x0)))
(HasType (FStar.Pervasives.ex_close_wp @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((FStar.Pervasives.ex_close_wp @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives.ex_close_wp))
:named typing_FStar.Pervasives.ex_close_wp))

;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.ex_close_wp
;;; Fact-ids: Name FStar.Pervasives.ex_close_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (FStar.Pervasives.ex_close_wp @x0
@x1
@x2
@x3))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(116,84-116,106); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(116,84-116,106)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x1)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(116,99-116,105); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(116,99-116,105)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(116,99-116,105); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(116,99-116,105)
(ApplyTT (ApplyTT @x2
@x4)
@x3)
)
)
 
;;no pats
:qid equation_FStar.Pervasives.ex_close_wp.1))
)
 

:pattern ((Valid (FStar.Pervasives.ex_close_wp @x0
@x1
@x2
@x3)))
:qid equation_FStar.Pervasives.ex_close_wp))
:named equation_FStar.Pervasives.ex_close_wp))

; </end encoding FStar.Pervasives.ex_close_wp>

; <Start encoding FStar.Pervasives.ex_assert_p>
(declare-fun FStar.Pervasives.ex_assert_p (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;a:Type -> q:Type0 -> wp:FStar.Pervasives.ex_wp a -> p:FStar.Pervasives.ex_post a -> Prims.Tot Type0
(declare-fun Tm_arrow_57f935efb5a0df7efcd36bf89602533a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_57f935efb5a0df7efcd36bf89602533a
;;; Fact-ids: Name FStar.Pervasives.ex_assert_p; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_57f935efb5a0df7efcd36bf89602533a
Tm_type)
:named kinding_Tm_arrow_57f935efb5a0df7efcd36bf89602533a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.ex_assert_p; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_57f935efb5a0df7efcd36bf89602533a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_57f935efb5a0df7efcd36bf89602533a))
:qid FStar.Pervasives_pre_typing_Tm_arrow_57f935efb5a0df7efcd36bf89602533a))
:named FStar.Pervasives_pre_typing_Tm_arrow_57f935efb5a0df7efcd36bf89602533a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_57f935efb5a0df7efcd36bf89602533a
;;; Fact-ids: Name FStar.Pervasives.ex_assert_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_57f935efb5a0df7efcd36bf89602533a)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.ex_wp @x1))
(HasType @x4
(FStar.Pervasives.ex_post @x1)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid FStar.Pervasives_interpretation_Tm_arrow_57f935efb5a0df7efcd36bf89602533a.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_57f935efb5a0df7efcd36bf89602533a))
:qid FStar.Pervasives_interpretation_Tm_arrow_57f935efb5a0df7efcd36bf89602533a))
:named FStar.Pervasives_interpretation_Tm_arrow_57f935efb5a0df7efcd36bf89602533a))
(declare-fun FStar.Pervasives.ex_assert_p@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.ex_assert_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.ex_assert_p@tok
@x0)
@x1)
@x2)
@x3)
(FStar.Pervasives.ex_assert_p @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.ex_assert_p@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((FStar.Pervasives.ex_assert_p @x0
@x1
@x2
@x3))
:qid token_correspondence_FStar.Pervasives.ex_assert_p))
:named token_correspondence_FStar.Pervasives.ex_assert_p))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.ex_assert_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.ex_assert_p@tok
Tm_arrow_57f935efb5a0df7efcd36bf89602533a))
 

:pattern ((ApplyTT FStar.Pervasives.ex_assert_p@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.ex_assert_p@tok))
:qid function_token_typing_FStar.Pervasives.ex_assert_p))
:named function_token_typing_FStar.Pervasives.ex_assert_p))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.ex_assert_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.ex_wp @x0))
(HasType @x3
(FStar.Pervasives.ex_post @x0)))
(HasType (FStar.Pervasives.ex_assert_p @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((FStar.Pervasives.ex_assert_p @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives.ex_assert_p))
:named typing_FStar.Pervasives.ex_assert_p))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.ex_assert_p
;;; Fact-ids: Name FStar.Pervasives.ex_assert_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (FStar.Pervasives.ex_assert_p @x0
@x1
@x2
@x3))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(117,70-117,81); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(117,70-117,81)
(and 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(117,33-117,34); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(117,71-117,72)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(117,33-117,34); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(117,71-117,72)
@x1
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(117,76-117,80); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(117,76-117,80)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(117,76-117,80); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(117,76-117,80)
(ApplyTT @x2
@x3)
)
)
)
 

:pattern ((Valid (FStar.Pervasives.ex_assert_p @x0
@x1
@x2
@x3)))
:qid equation_FStar.Pervasives.ex_assert_p))
:named equation_FStar.Pervasives.ex_assert_p))

; </end encoding FStar.Pervasives.ex_assert_p>

; <Start encoding FStar.Pervasives.ex_assume_p>
(declare-fun FStar.Pervasives.ex_assume_p (Term Term Term Term) Term)

(declare-fun FStar.Pervasives.ex_assume_p@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.ex_assume_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.ex_assume_p@tok
@x0)
@x1)
@x2)
@x3)
(FStar.Pervasives.ex_assume_p @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.ex_assume_p@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((FStar.Pervasives.ex_assume_p @x0
@x1
@x2
@x3))
:qid token_correspondence_FStar.Pervasives.ex_assume_p))
:named token_correspondence_FStar.Pervasives.ex_assume_p))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.ex_assume_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.ex_assume_p@tok
Tm_arrow_57f935efb5a0df7efcd36bf89602533a))
 

:pattern ((ApplyTT FStar.Pervasives.ex_assume_p@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.ex_assume_p@tok))
:qid function_token_typing_FStar.Pervasives.ex_assume_p))
:named function_token_typing_FStar.Pervasives.ex_assume_p))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.ex_assume_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.ex_wp @x0))
(HasType @x3
(FStar.Pervasives.ex_post @x0)))
(HasType (FStar.Pervasives.ex_assume_p @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((FStar.Pervasives.ex_assume_p @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives.ex_assume_p))
:named typing_FStar.Pervasives.ex_assume_p))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.ex_assume_p
;;; Fact-ids: Name FStar.Pervasives.ex_assume_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (FStar.Pervasives.ex_assume_p @x0
@x1
@x2
@x3))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(118,70-118,82); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(118,70-118,82)
(implies 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(118,33-118,34); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(118,71-118,72)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(118,33-118,34); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(118,71-118,72)
@x1
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(118,77-118,81); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(118,77-118,81)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(118,77-118,81); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(118,77-118,81)
(ApplyTT @x2
@x3)
)
)
)
 

:pattern ((Valid (FStar.Pervasives.ex_assume_p @x0
@x1
@x2
@x3)))
:qid equation_FStar.Pervasives.ex_assume_p))
:named equation_FStar.Pervasives.ex_assume_p))

; </end encoding FStar.Pervasives.ex_assume_p>

; <Start encoding FStar.Pervasives.ex_null_wp>
(declare-fun FStar.Pervasives.ex_null_wp (Term Term) Term)
;;;;;;;;;;;;;;;;a:Type -> p:FStar.Pervasives.ex_post a -> Prims.Tot Type0
(declare-fun Tm_arrow_ad0a39a261b2733da0e06fb11dbfcde6 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_ad0a39a261b2733da0e06fb11dbfcde6
;;; Fact-ids: Name FStar.Pervasives.ex_null_wp; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_ad0a39a261b2733da0e06fb11dbfcde6
Tm_type)
:named kinding_Tm_arrow_ad0a39a261b2733da0e06fb11dbfcde6))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.ex_null_wp; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_ad0a39a261b2733da0e06fb11dbfcde6)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_ad0a39a261b2733da0e06fb11dbfcde6))
:qid FStar.Pervasives_pre_typing_Tm_arrow_ad0a39a261b2733da0e06fb11dbfcde6))
:named FStar.Pervasives_pre_typing_Tm_arrow_ad0a39a261b2733da0e06fb11dbfcde6))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_ad0a39a261b2733da0e06fb11dbfcde6
;;; Fact-ids: Name FStar.Pervasives.ex_null_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_ad0a39a261b2733da0e06fb11dbfcde6)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.ex_post @x1)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid FStar.Pervasives_interpretation_Tm_arrow_ad0a39a261b2733da0e06fb11dbfcde6.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_ad0a39a261b2733da0e06fb11dbfcde6))
:qid FStar.Pervasives_interpretation_Tm_arrow_ad0a39a261b2733da0e06fb11dbfcde6))
:named FStar.Pervasives_interpretation_Tm_arrow_ad0a39a261b2733da0e06fb11dbfcde6))
(declare-fun FStar.Pervasives.ex_null_wp@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.ex_null_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.ex_null_wp@tok
@x0)
@x1)
(FStar.Pervasives.ex_null_wp @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.ex_null_wp@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.ex_null_wp @x0
@x1))
:qid token_correspondence_FStar.Pervasives.ex_null_wp))
:named token_correspondence_FStar.Pervasives.ex_null_wp))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.ex_null_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.ex_null_wp@tok
Tm_arrow_ad0a39a261b2733da0e06fb11dbfcde6))
 

:pattern ((ApplyTT FStar.Pervasives.ex_null_wp@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.ex_null_wp@tok))
:qid function_token_typing_FStar.Pervasives.ex_null_wp))
:named function_token_typing_FStar.Pervasives.ex_null_wp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.ex_null_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.ex_post @x0)))
(HasType (FStar.Pervasives.ex_null_wp @x0
@x1)
Tm_type))
 

:pattern ((FStar.Pervasives.ex_null_wp @x0
@x1))
:qid typing_FStar.Pervasives.ex_null_wp))
:named typing_FStar.Pervasives.ex_null_wp))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.ex_null_wp
;;; Fact-ids: Name FStar.Pervasives.ex_null_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (FStar.Pervasives.ex_null_wp @x0
@x1))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(119,47-119,73); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(119,47-119,73)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(FStar.Pervasives.result @x0))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(119,69-119,72); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(119,69-119,72)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(119,69-119,72); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(119,69-119,72)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid equation_FStar.Pervasives.ex_null_wp.1))
)
 

:pattern ((Valid (FStar.Pervasives.ex_null_wp @x0
@x1)))
:qid equation_FStar.Pervasives.ex_null_wp))
:named equation_FStar.Pervasives.ex_null_wp))

; </end encoding FStar.Pervasives.ex_null_wp>

; <Start encoding FStar.Pervasives.ex_trivial>
(declare-fun FStar.Pervasives.ex_trivial (Term Term) Term)
;;;;;;;;;;;;;;;;a:Type -> wp:FStar.Pervasives.ex_wp a -> Prims.GTot FStar.Pervasives.ex_pre
(declare-fun Tm_arrow_5221ddbf8295a5d706d58e293ca3b4fe (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_5221ddbf8295a5d706d58e293ca3b4fe
;;; Fact-ids: Name FStar.Pervasives.ex_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_5221ddbf8295a5d706d58e293ca3b4fe @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_5221ddbf8295a5d706d58e293ca3b4fe @x0)
Tm_type))
:qid kinding_Tm_arrow_5221ddbf8295a5d706d58e293ca3b4fe))
:named kinding_Tm_arrow_5221ddbf8295a5d706d58e293ca3b4fe))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.ex_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_5221ddbf8295a5d706d58e293ca3b4fe @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_5221ddbf8295a5d706d58e293ca3b4fe @x2)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_5221ddbf8295a5d706d58e293ca3b4fe))
:named FStar.Pervasives_pre_typing_Tm_arrow_5221ddbf8295a5d706d58e293ca3b4fe))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_5221ddbf8295a5d706d58e293ca3b4fe
;;; Fact-ids: Name FStar.Pervasives.ex_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_5221ddbf8295a5d706d58e293ca3b4fe @x1))
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.ex_wp @x2)))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x1))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid FStar.Pervasives_interpretation_Tm_arrow_5221ddbf8295a5d706d58e293ca3b4fe.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_5221ddbf8295a5d706d58e293ca3b4fe @x1)))
:qid FStar.Pervasives_interpretation_Tm_arrow_5221ddbf8295a5d706d58e293ca3b4fe))
:named FStar.Pervasives_interpretation_Tm_arrow_5221ddbf8295a5d706d58e293ca3b4fe))
(declare-fun FStar.Pervasives.ex_trivial@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.ex_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.ex_trivial@tok
@x0)
@x1)
(FStar.Pervasives.ex_trivial @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.ex_trivial@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.ex_trivial @x0
@x1))
:qid token_correspondence_FStar.Pervasives.ex_trivial))
:named token_correspondence_FStar.Pervasives.ex_trivial))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.ex_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.ex_trivial@tok
(Tm_arrow_5221ddbf8295a5d706d58e293ca3b4fe FStar.Pervasives.ex_pre)))
 

:pattern ((ApplyTT FStar.Pervasives.ex_trivial@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.ex_trivial@tok))
:qid function_token_typing_FStar.Pervasives.ex_trivial))
:named function_token_typing_FStar.Pervasives.ex_trivial))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.ex_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.ex_wp @x0)))
(HasType (FStar.Pervasives.ex_trivial @x0
@x1)
FStar.Pervasives.ex_pre))
 

:pattern ((FStar.Pervasives.ex_trivial @x0
@x1))
:qid typing_FStar.Pervasives.ex_trivial))
:named typing_FStar.Pervasives.ex_trivial))

(declare-fun FStar.Pervasives_Tm_abs_1fbc8d1a7c1b52cadebe562e9f77a362 (Term Term) Term)
;;;;;;;;;;;;;;;;typing_FStar.Pervasives_Tm_abs_1fbc8d1a7c1b52cadebe562e9f77a362
;;; Fact-ids: Name FStar.Pervasives.ex_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (FStar.Pervasives_Tm_abs_1fbc8d1a7c1b52cadebe562e9f77a362 @x0
@x1)
(Tm_arrow_93430ecdc6b299fe940e8255e1864551 @x1))
 

:pattern ((FStar.Pervasives_Tm_abs_1fbc8d1a7c1b52cadebe562e9f77a362 @x0
@x1))
:qid typing_FStar.Pervasives_Tm_abs_1fbc8d1a7c1b52cadebe562e9f77a362))
:named typing_FStar.Pervasives_Tm_abs_1fbc8d1a7c1b52cadebe562e9f77a362))
;;;;;;;;;;;;;;;;interpretation_FStar.Pervasives_Tm_abs_1fbc8d1a7c1b52cadebe562e9f77a362
;;; Fact-ids: Name FStar.Pervasives.ex_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (FStar.Pervasives_Tm_abs_1fbc8d1a7c1b52cadebe562e9f77a362 @x1
@x2)
@x0)
@x1)
 

:pattern ((ApplyTT (FStar.Pervasives_Tm_abs_1fbc8d1a7c1b52cadebe562e9f77a362 @x1
@x2)
@x0))
:qid interpretation_FStar.Pervasives_Tm_abs_1fbc8d1a7c1b52cadebe562e9f77a362))
:named interpretation_FStar.Pervasives_Tm_abs_1fbc8d1a7c1b52cadebe562e9f77a362))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.ex_trivial
;;; Fact-ids: Name FStar.Pervasives.ex_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.ex_trivial @x0
@x1)
(ApplyTT @x1
(FStar.Pervasives_Tm_abs_1fbc8d1a7c1b52cadebe562e9f77a362 Prims.l_True
@x0)))
 

:pattern ((FStar.Pervasives.ex_trivial @x0
@x1))
:qid equation_FStar.Pervasives.ex_trivial))
:named equation_FStar.Pervasives.ex_trivial))

; </end encoding FStar.Pervasives.ex_trivial>

; <Skipped FStar.Pervasives.EXN/>

; <Skipped FStar.Pervasives.Exn/>

; <Start encoding FStar.Pervasives.lift_div_exn>
(declare-fun FStar.Pervasives.lift_div_exn (Term Term Term) Term)
;;;;;;;;;;;;;;;;a:Type -> wp:Prims.pure_wp a -> p:FStar.Pervasives.ex_post a -> Prims.GTot Prims.pure_pre
(declare-fun Tm_arrow_9d7b0e2d115bb41f98da64d5384f7531 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_9d7b0e2d115bb41f98da64d5384f7531
;;; Fact-ids: Name FStar.Pervasives.lift_div_exn; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_9d7b0e2d115bb41f98da64d5384f7531 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_9d7b0e2d115bb41f98da64d5384f7531 @x0)
Tm_type))
:qid kinding_Tm_arrow_9d7b0e2d115bb41f98da64d5384f7531))
:named kinding_Tm_arrow_9d7b0e2d115bb41f98da64d5384f7531))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.lift_div_exn; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_9d7b0e2d115bb41f98da64d5384f7531 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_9d7b0e2d115bb41f98da64d5384f7531 @x2)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_9d7b0e2d115bb41f98da64d5384f7531))
:named FStar.Pervasives_pre_typing_Tm_arrow_9d7b0e2d115bb41f98da64d5384f7531))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_9d7b0e2d115bb41f98da64d5384f7531
;;; Fact-ids: Name FStar.Pervasives.lift_div_exn; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_9d7b0e2d115bb41f98da64d5384f7531 @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
(Prims.pure_wp @x2))
(HasType @x4
(FStar.Pervasives.ex_post @x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4))
:qid FStar.Pervasives_interpretation_Tm_arrow_9d7b0e2d115bb41f98da64d5384f7531.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_9d7b0e2d115bb41f98da64d5384f7531 @x1)))
:qid FStar.Pervasives_interpretation_Tm_arrow_9d7b0e2d115bb41f98da64d5384f7531))
:named FStar.Pervasives_interpretation_Tm_arrow_9d7b0e2d115bb41f98da64d5384f7531))
(declare-fun FStar.Pervasives.lift_div_exn@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.lift_div_exn; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.lift_div_exn@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.lift_div_exn @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.lift_div_exn@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.lift_div_exn @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.lift_div_exn))
:named token_correspondence_FStar.Pervasives.lift_div_exn))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.lift_div_exn; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.lift_div_exn@tok
(Tm_arrow_9d7b0e2d115bb41f98da64d5384f7531 Prims.pure_pre)))
 

:pattern ((ApplyTT FStar.Pervasives.lift_div_exn@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.lift_div_exn@tok))
:qid function_token_typing_FStar.Pervasives.lift_div_exn))
:named function_token_typing_FStar.Pervasives.lift_div_exn))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.lift_div_exn; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.pure_wp @x0))
(HasType @x2
(FStar.Pervasives.ex_post @x0)))
(HasType (FStar.Pervasives.lift_div_exn @x0
@x1
@x2)
Prims.pure_pre))
 

:pattern ((FStar.Pervasives.lift_div_exn @x0
@x1
@x2))
:qid typing_FStar.Pervasives.lift_div_exn))
:named typing_FStar.Pervasives.lift_div_exn))

(declare-fun FStar.Pervasives_Tm_abs_61fd1f24b69a591c882f29af9a1cf6ae (Term Term) Term)
;;;;;;;;;;;;;;;;typing_FStar.Pervasives_Tm_abs_61fd1f24b69a591c882f29af9a1cf6ae
;;; Fact-ids: Name FStar.Pervasives.lift_div_exn; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (FStar.Pervasives_Tm_abs_61fd1f24b69a591c882f29af9a1cf6ae @x0
@x1)
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
 

:pattern ((FStar.Pervasives_Tm_abs_61fd1f24b69a591c882f29af9a1cf6ae @x0
@x1))
:qid typing_FStar.Pervasives_Tm_abs_61fd1f24b69a591c882f29af9a1cf6ae))
:named typing_FStar.Pervasives_Tm_abs_61fd1f24b69a591c882f29af9a1cf6ae))
;;;;;;;;;;;;;;;;interpretation_FStar.Pervasives_Tm_abs_61fd1f24b69a591c882f29af9a1cf6ae
;;; Fact-ids: Name FStar.Pervasives.lift_div_exn; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (FStar.Pervasives_Tm_abs_61fd1f24b69a591c882f29af9a1cf6ae @x1
@x2)
@x0)
(ApplyTT @x1
(FStar.Pervasives.V @x2
@x0)))
 

:pattern ((ApplyTT (FStar.Pervasives_Tm_abs_61fd1f24b69a591c882f29af9a1cf6ae @x1
@x2)
@x0))
:qid interpretation_FStar.Pervasives_Tm_abs_61fd1f24b69a591c882f29af9a1cf6ae))
:named interpretation_FStar.Pervasives_Tm_abs_61fd1f24b69a591c882f29af9a1cf6ae))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.lift_div_exn
;;; Fact-ids: Name FStar.Pervasives.lift_div_exn; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.lift_div_exn @x0
@x1
@x2)
(ApplyTT @x1
(FStar.Pervasives_Tm_abs_61fd1f24b69a591c882f29af9a1cf6ae @x2
@x0)))
 

:pattern ((FStar.Pervasives.lift_div_exn @x0
@x1
@x2))
:qid equation_FStar.Pervasives.lift_div_exn))
:named equation_FStar.Pervasives.lift_div_exn))

; </end encoding FStar.Pervasives.lift_div_exn>

; <Skipped />

; <Skipped FStar.Pervasives.Ex/>

; <Start encoding FStar.Pervasives.all_pre_h>
(declare-fun FStar.Pervasives.all_pre_h (Term) Term)

(declare-fun FStar.Pervasives.all_pre_h@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.all_pre_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.all_pre_h@tok
@x0)
(FStar.Pervasives.all_pre_h @x0))
 

:pattern ((ApplyTT FStar.Pervasives.all_pre_h@tok
@x0))

:pattern ((FStar.Pervasives.all_pre_h @x0))
:qid token_correspondence_FStar.Pervasives.all_pre_h))
:named token_correspondence_FStar.Pervasives.all_pre_h))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.all_pre_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.all_pre_h@tok
Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
 

:pattern ((ApplyTT FStar.Pervasives.all_pre_h@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.all_pre_h@tok))
:qid function_token_typing_FStar.Pervasives.all_pre_h))
:named function_token_typing_FStar.Pervasives.all_pre_h))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.all_pre_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Pervasives.all_pre_h @x0)
Tm_type))
 

:pattern ((FStar.Pervasives.all_pre_h @x0))
:qid typing_FStar.Pervasives.all_pre_h))
:named typing_FStar.Pervasives.all_pre_h))

;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.all_pre_h
;;; Fact-ids: Name FStar.Pervasives.all_pre_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (FStar.Pervasives.all_pre_h @x0)
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
 

:pattern ((FStar.Pervasives.all_pre_h @x0))
:qid equation_FStar.Pervasives.all_pre_h))
:named equation_FStar.Pervasives.all_pre_h))

; </end encoding FStar.Pervasives.all_pre_h>

; <Start encoding FStar.Pervasives.all_post_h>
(declare-fun FStar.Pervasives.all_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.all_post_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.all_post_h@tok
@x0)
@x1)
(FStar.Pervasives.all_post_h @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.all_post_h@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.all_post_h @x0
@x1))
:qid token_correspondence_FStar.Pervasives.all_post_h))
:named token_correspondence_FStar.Pervasives.all_post_h))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.all_post_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.all_post_h@tok
Tm_arrow_30967c52768a603d18eb4835e5ba8f79))
 

:pattern ((ApplyTT FStar.Pervasives.all_post_h@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.all_post_h@tok))
:qid function_token_typing_FStar.Pervasives.all_post_h))
:named function_token_typing_FStar.Pervasives.all_post_h))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.all_post_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (FStar.Pervasives.all_post_h @x0
@x1)
Tm_type))
 

:pattern ((FStar.Pervasives.all_post_h @x0
@x1))
:qid typing_FStar.Pervasives.all_post_h))
:named typing_FStar.Pervasives.all_post_h))
;;;;;;;;;;;;;;;;uu___158351:FStar.Pervasives.result a -> uu___158352:h -> Prims.Tot Type0
(declare-fun Tm_arrow_a4b330751b796dddf098398d5d89287f (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a4b330751b796dddf098398d5d89287f
;;; Fact-ids: Name FStar.Pervasives.all_post_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_a4b330751b796dddf098398d5d89287f @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_a4b330751b796dddf098398d5d89287f @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_a4b330751b796dddf098398d5d89287f))
:named kinding_Tm_arrow_a4b330751b796dddf098398d5d89287f))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.all_post_h; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_a4b330751b796dddf098398d5d89287f @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_a4b330751b796dddf098398d5d89287f @x2
@x3)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_a4b330751b796dddf098398d5d89287f))
:named FStar.Pervasives_pre_typing_Tm_arrow_a4b330751b796dddf098398d5d89287f))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a4b330751b796dddf098398d5d89287f
;;; Fact-ids: Name FStar.Pervasives.all_post_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_a4b330751b796dddf098398d5d89287f @x1
@x2))
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
(FStar.Pervasives.result @x2))
(HasType @x4
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x3)
@x4)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT @x0
@x3)
@x4))
:qid FStar.Pervasives_interpretation_Tm_arrow_a4b330751b796dddf098398d5d89287f.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_a4b330751b796dddf098398d5d89287f @x1
@x2)))
:qid FStar.Pervasives_interpretation_Tm_arrow_a4b330751b796dddf098398d5d89287f))
:named FStar.Pervasives_interpretation_Tm_arrow_a4b330751b796dddf098398d5d89287f))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.all_post_h
;;; Fact-ids: Name FStar.Pervasives.all_post_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.all_post_h @x0
@x1)
(Tm_arrow_a4b330751b796dddf098398d5d89287f @x0
@x1))
 

:pattern ((FStar.Pervasives.all_post_h @x0
@x1))
:qid equation_FStar.Pervasives.all_post_h))
:named equation_FStar.Pervasives.all_post_h))

; </end encoding FStar.Pervasives.all_post_h>

; <Start encoding FStar.Pervasives.all_wp_h>
(declare-fun FStar.Pervasives.all_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_wp_h@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.all_wp_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.all_wp_h@tok
@x0)
@x1)
(FStar.Pervasives.all_wp_h @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.all_wp_h@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.all_wp_h @x0
@x1))
:qid token_correspondence_FStar.Pervasives.all_wp_h))
:named token_correspondence_FStar.Pervasives.all_wp_h))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.all_wp_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.all_wp_h@tok
Tm_arrow_30967c52768a603d18eb4835e5ba8f79))
 

:pattern ((ApplyTT FStar.Pervasives.all_wp_h@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.all_wp_h@tok))
:qid function_token_typing_FStar.Pervasives.all_wp_h))
:named function_token_typing_FStar.Pervasives.all_wp_h))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.all_wp_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (FStar.Pervasives.all_wp_h @x0
@x1)
Tm_type))
 

:pattern ((FStar.Pervasives.all_wp_h @x0
@x1))
:qid typing_FStar.Pervasives.all_wp_h))
:named typing_FStar.Pervasives.all_wp_h))
;;;;;;;;;;;;;;;;uu___158366:FStar.Pervasives.all_post_h h a -> Prims.Tot (FStar.Pervasives.all_pre_h h)
(declare-fun Tm_arrow_95c0b403ba19b1a7c1f8c73440744c07 (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_95c0b403ba19b1a7c1f8c73440744c07
;;; Fact-ids: Name FStar.Pervasives.all_wp_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_95c0b403ba19b1a7c1f8c73440744c07 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_95c0b403ba19b1a7c1f8c73440744c07 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_95c0b403ba19b1a7c1f8c73440744c07))
:named kinding_Tm_arrow_95c0b403ba19b1a7c1f8c73440744c07))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.all_wp_h; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_95c0b403ba19b1a7c1f8c73440744c07 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_95c0b403ba19b1a7c1f8c73440744c07 @x2
@x3)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_95c0b403ba19b1a7c1f8c73440744c07))
:named FStar.Pervasives_pre_typing_Tm_arrow_95c0b403ba19b1a7c1f8c73440744c07))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_95c0b403ba19b1a7c1f8c73440744c07
;;; Fact-ids: Name FStar.Pervasives.all_wp_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_95c0b403ba19b1a7c1f8c73440744c07 @x1
@x2))
(forall ((@x3 Term))
 (! (implies (HasType @x3
(FStar.Pervasives.all_post_h @x2
@x1))
(HasType (ApplyTT @x0
@x3)
(FStar.Pervasives.all_pre_h @x2)))
 

:pattern ((ApplyTT @x0
@x3))
:qid FStar.Pervasives_interpretation_Tm_arrow_95c0b403ba19b1a7c1f8c73440744c07.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_95c0b403ba19b1a7c1f8c73440744c07 @x1
@x2)))
:qid FStar.Pervasives_interpretation_Tm_arrow_95c0b403ba19b1a7c1f8c73440744c07))
:named FStar.Pervasives_interpretation_Tm_arrow_95c0b403ba19b1a7c1f8c73440744c07))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.all_wp_h
;;; Fact-ids: Name FStar.Pervasives.all_wp_h; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.all_wp_h @x0
@x1)
(Tm_arrow_95c0b403ba19b1a7c1f8c73440744c07 @x1
@x0))
 

:pattern ((FStar.Pervasives.all_wp_h @x0
@x1))
:qid equation_FStar.Pervasives.all_wp_h))
:named equation_FStar.Pervasives.all_wp_h))

; </end encoding FStar.Pervasives.all_wp_h>

; <Start encoding FStar.Pervasives.all_ite_wp>
(declare-fun FStar.Pervasives.all_ite_wp (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap:Type ->...
(declare-fun Tm_arrow_1713847be73b859f1542e0991abb1e36 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_1713847be73b859f1542e0991abb1e36
;;; Fact-ids: Name FStar.Pervasives.all_ite_wp; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_1713847be73b859f1542e0991abb1e36
Tm_type)
:named kinding_Tm_arrow_1713847be73b859f1542e0991abb1e36))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.all_ite_wp; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_1713847be73b859f1542e0991abb1e36)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_1713847be73b859f1542e0991abb1e36))
:qid FStar.Pervasives_pre_typing_Tm_arrow_1713847be73b859f1542e0991abb1e36))
:named FStar.Pervasives_pre_typing_Tm_arrow_1713847be73b859f1542e0991abb1e36))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_1713847be73b859f1542e0991abb1e36
;;; Fact-ids: Name FStar.Pervasives.all_ite_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_1713847be73b859f1542e0991abb1e36)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.all_wp_h @x1
@x2))
(HasType @x4
(FStar.Pervasives.all_post_h @x1
@x2))
(HasType @x5
@x1))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid FStar.Pervasives_interpretation_Tm_arrow_1713847be73b859f1542e0991abb1e36.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_1713847be73b859f1542e0991abb1e36))
:qid FStar.Pervasives_interpretation_Tm_arrow_1713847be73b859f1542e0991abb1e36))
:named FStar.Pervasives_interpretation_Tm_arrow_1713847be73b859f1542e0991abb1e36))
(declare-fun FStar.Pervasives.all_ite_wp@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.all_ite_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.all_ite_wp@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(FStar.Pervasives.all_ite_wp @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.all_ite_wp@tok
@x0)
@x1)
@x2)
@x3)
@x4))

:pattern ((FStar.Pervasives.all_ite_wp @x0
@x1
@x2
@x3
@x4))
:qid token_correspondence_FStar.Pervasives.all_ite_wp))
:named token_correspondence_FStar.Pervasives.all_ite_wp))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.all_ite_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.all_ite_wp@tok
Tm_arrow_1713847be73b859f1542e0991abb1e36))
 

:pattern ((ApplyTT FStar.Pervasives.all_ite_wp@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.all_ite_wp@tok))
:qid function_token_typing_FStar.Pervasives.all_ite_wp))
:named function_token_typing_FStar.Pervasives.all_ite_wp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.all_ite_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.all_wp_h @x0
@x1))
(HasType @x3
(FStar.Pervasives.all_post_h @x0
@x1))
(HasType @x4
@x0))
(HasType (FStar.Pervasives.all_ite_wp @x0
@x1
@x2
@x3
@x4)
Tm_type))
 

:pattern ((FStar.Pervasives.all_ite_wp @x0
@x1
@x2
@x3
@x4))
:qid typing_FStar.Pervasives.all_ite_wp))
:named typing_FStar.Pervasives.all_ite_wp))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.all_ite_wp
;;; Fact-ids: Name FStar.Pervasives.all_ite_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Valid (FStar.Pervasives.all_ite_wp @x0
@x1
@x2
@x3
@x4))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(151,4-153,18); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(151,4-153,18)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(FStar.Pervasives.all_post_h @x0
@x1))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(152,7-152,89); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(152,7-152,89)
(forall ((@x6 Term) (@x7 Term))
 (! 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(152,69-152,88); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(152,69-152,88)
(iff 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(152,69-152,74); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(152,69-152,74)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(152,69-152,74); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(152,69-152,74)
(ApplyTT (ApplyTT @x5
@x6)
@x7)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(152,80-152,88); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(152,80-152,88)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(152,80-152,88); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(152,80-152,88)
(ApplyTT (ApplyTT @x3
@x6)
@x7)
)
)

 

:pattern ((ApplyTT (ApplyTT @x5
@x6)
@x7))
:qid equation_FStar.Pervasives.all_ite_wp.2))
)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(153,11-153,18); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(153,11-153,18)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(153,11-153,18); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(153,11-153,18)
(ApplyTT (ApplyTT @x2
@x5)
@x4)
)
)
 
;;no pats
:qid equation_FStar.Pervasives.all_ite_wp.1))
)
 

:pattern ((Valid (FStar.Pervasives.all_ite_wp @x0
@x1
@x2
@x3
@x4)))
:qid equation_FStar.Pervasives.all_ite_wp))
:named equation_FStar.Pervasives.all_ite_wp))

; </end encoding FStar.Pervasives.all_ite_wp>

; <Start encoding FStar.Pervasives.all_return>
(declare-fun FStar.Pervasives.all_return (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap:Type ->...
(declare-fun Tm_arrow_0e6d251c588f9978af686db9af4ba547 () Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_0e6d251c588f9978af686db9af4ba547
;;; Fact-ids: Name FStar.Pervasives.all_return; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_0e6d251c588f9978af686db9af4ba547
Tm_type)
:named kinding_Tm_arrow_0e6d251c588f9978af686db9af4ba547))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.all_return; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_0e6d251c588f9978af686db9af4ba547)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_0e6d251c588f9978af686db9af4ba547))
:qid FStar.Pervasives_pre_typing_Tm_arrow_0e6d251c588f9978af686db9af4ba547))
:named FStar.Pervasives_pre_typing_Tm_arrow_0e6d251c588f9978af686db9af4ba547))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_0e6d251c588f9978af686db9af4ba547
;;; Fact-ids: Name FStar.Pervasives.all_return; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_0e6d251c588f9978af686db9af4ba547)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
@x2)
(HasType @x4
(FStar.Pervasives.all_post_h @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid FStar.Pervasives_interpretation_Tm_arrow_0e6d251c588f9978af686db9af4ba547.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_0e6d251c588f9978af686db9af4ba547))
:qid FStar.Pervasives_interpretation_Tm_arrow_0e6d251c588f9978af686db9af4ba547))
:named FStar.Pervasives_interpretation_Tm_arrow_0e6d251c588f9978af686db9af4ba547))
(declare-fun FStar.Pervasives.all_return@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.all_return; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.all_return@tok
@x0)
@x1)
@x2)
@x3)
(FStar.Pervasives.all_return @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.all_return@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((FStar.Pervasives.all_return @x0
@x1
@x2
@x3))
:qid token_correspondence_FStar.Pervasives.all_return))
:named token_correspondence_FStar.Pervasives.all_return))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.all_return; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.all_return@tok
Tm_arrow_0e6d251c588f9978af686db9af4ba547))
 

:pattern ((ApplyTT FStar.Pervasives.all_return@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.all_return@tok))
:qid function_token_typing_FStar.Pervasives.all_return))
:named function_token_typing_FStar.Pervasives.all_return))

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.all_return; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
@x1)
(HasType @x3
(FStar.Pervasives.all_post_h @x0
@x1)))
(HasType (FStar.Pervasives.all_return @x0
@x1
@x2
@x3)
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0)))
 

:pattern ((FStar.Pervasives.all_return @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives.all_return))
:named typing_FStar.Pervasives.all_return))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.all_return
;;; Fact-ids: Name FStar.Pervasives.all_return; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.all_return @x0
@x1
@x2
@x3)
(ApplyTT @x3
(FStar.Pervasives.V @x1
@x2)))
 

:pattern ((FStar.Pervasives.all_return @x0
@x1
@x2
@x3))
:qid equation_FStar.Pervasives.all_return))
:named equation_FStar.Pervasives.all_return))

; </end encoding FStar.Pervasives.all_return>

; <Start encoding FStar.Pervasives.all_bind_wp>
;;;;;;;;;;;;;;;;uu___158467:a -> Prims.GTot (FStar.Pervasives.all_wp_h heap b)
(declare-fun Tm_arrow_12929d79484018a159cc54c10d62f794 (Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_12929d79484018a159cc54c10d62f794
;;; Fact-ids: Name FStar.Pervasives.all_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_12929d79484018a159cc54c10d62f794 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_12929d79484018a159cc54c10d62f794 @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_12929d79484018a159cc54c10d62f794))
:named kinding_Tm_arrow_12929d79484018a159cc54c10d62f794))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.all_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_12929d79484018a159cc54c10d62f794 @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_12929d79484018a159cc54c10d62f794 @x2
@x3
@x4)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_12929d79484018a159cc54c10d62f794))
:named FStar.Pervasives_pre_typing_Tm_arrow_12929d79484018a159cc54c10d62f794))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_12929d79484018a159cc54c10d62f794
;;; Fact-ids: Name FStar.Pervasives.all_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_12929d79484018a159cc54c10d62f794 @x1
@x2
@x3))
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x3)
(HasType (ApplyTT @x0
@x4)
(FStar.Pervasives.all_wp_h @x2
@x1)))
 

:pattern ((ApplyTT @x0
@x4))
:qid FStar.Pervasives_interpretation_Tm_arrow_12929d79484018a159cc54c10d62f794.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_12929d79484018a159cc54c10d62f794 @x1
@x2
@x3)))
:qid FStar.Pervasives_interpretation_Tm_arrow_12929d79484018a159cc54c10d62f794))
:named FStar.Pervasives_interpretation_Tm_arrow_12929d79484018a159cc54c10d62f794))
(declare-fun FStar.Pervasives.all_bind_wp (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap:Type ->...
(declare-fun Tm_arrow_646607d9b79b27cb700948778ab8dc33 (Term) Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_646607d9b79b27cb700948778ab8dc33
;;; Fact-ids: Name FStar.Pervasives.all_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_646607d9b79b27cb700948778ab8dc33 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_646607d9b79b27cb700948778ab8dc33 @x0)
Tm_type))
:qid kinding_Tm_arrow_646607d9b79b27cb700948778ab8dc33))
:named kinding_Tm_arrow_646607d9b79b27cb700948778ab8dc33))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.all_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_646607d9b79b27cb700948778ab8dc33 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_646607d9b79b27cb700948778ab8dc33 @x2)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_646607d9b79b27cb700948778ab8dc33))
:named FStar.Pervasives_pre_typing_Tm_arrow_646607d9b79b27cb700948778ab8dc33))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_646607d9b79b27cb700948778ab8dc33
;;; Fact-ids: Name FStar.Pervasives.all_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_646607d9b79b27cb700948778ab8dc33 @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
@x1)
(HasType @x4
Tm_type)
(HasType @x5
Tm_type)
(HasType @x6
(FStar.Pervasives.all_wp_h @x2
@x4))
(HasType @x7
(Tm_arrow_12929d79484018a159cc54c10d62f794 @x5
@x2
@x4))
(HasType @x8
(FStar.Pervasives.all_post_h @x2
@x5))
(HasType @x9
@x2))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9))
:qid FStar.Pervasives_interpretation_Tm_arrow_646607d9b79b27cb700948778ab8dc33.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_646607d9b79b27cb700948778ab8dc33 @x1)))
:qid FStar.Pervasives_interpretation_Tm_arrow_646607d9b79b27cb700948778ab8dc33))
:named FStar.Pervasives_interpretation_Tm_arrow_646607d9b79b27cb700948778ab8dc33))
(declare-fun FStar.Pervasives.all_bind_wp@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.all_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.all_bind_wp@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
(FStar.Pervasives.all_bind_wp @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.all_bind_wp@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))

:pattern ((FStar.Pervasives.all_bind_wp @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid token_correspondence_FStar.Pervasives.all_bind_wp))
:named token_correspondence_FStar.Pervasives.all_bind_wp))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.all_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.all_bind_wp@tok
(Tm_arrow_646607d9b79b27cb700948778ab8dc33 Prims.range)))
 

:pattern ((ApplyTT FStar.Pervasives.all_bind_wp@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.all_bind_wp@tok))
:qid function_token_typing_FStar.Pervasives.all_bind_wp))
:named function_token_typing_FStar.Pervasives.all_bind_wp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.all_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.range)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(FStar.Pervasives.all_wp_h @x0
@x2))
(HasType @x5
(Tm_arrow_12929d79484018a159cc54c10d62f794 @x3
@x0
@x2))
(HasType @x6
(FStar.Pervasives.all_post_h @x0
@x3))
(HasType @x7
@x0))
(HasType (FStar.Pervasives.all_bind_wp @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_type))
 

:pattern ((FStar.Pervasives.all_bind_wp @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_FStar.Pervasives.all_bind_wp))
:named typing_FStar.Pervasives.all_bind_wp))


(declare-fun FStar.Pervasives_Tm_abs_4f43c341fa8cbfd3df64083726cf3bd8 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_FStar.Pervasives_Tm_abs_4f43c341fa8cbfd3df64083726cf3bd8
;;; Fact-ids: Name FStar.Pervasives.all_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (FStar.Pervasives_Tm_abs_4f43c341fa8cbfd3df64083726cf3bd8 @x0
@x1
@x2
@x3
@x4)
(Tm_arrow_a4b330751b796dddf098398d5d89287f @x3
@x4))
 

:pattern ((FStar.Pervasives_Tm_abs_4f43c341fa8cbfd3df64083726cf3bd8 @x0
@x1
@x2
@x3
@x4))
:qid typing_FStar.Pervasives_Tm_abs_4f43c341fa8cbfd3df64083726cf3bd8))
:named typing_FStar.Pervasives_Tm_abs_4f43c341fa8cbfd3df64083726cf3bd8))
;;;;;;;;;;;;;;;;interpretation_FStar.Pervasives_Tm_abs_4f43c341fa8cbfd3df64083726cf3bd8
;;; Fact-ids: Name FStar.Pervasives.all_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (ApplyTT (FStar.Pervasives_Tm_abs_4f43c341fa8cbfd3df64083726cf3bd8 @x2
@x3
@x4
@x5
@x6)
@x0)
@x1)
(let ((@lb7 @x0))
(ite (is-FStar.Pervasives.V @lb7)
(ApplyTT (ApplyTT (ApplyTT @x2
(FStar.Pervasives.V_v @lb7))
@x3)
@x1)
(ite (is-FStar.Pervasives.E @lb7)
(ApplyTT (ApplyTT @x3
(FStar.Pervasives.E @x4
(FStar.Pervasives.E_e @lb7)))
@x1)
(ite (is-FStar.Pervasives.Err @lb7)
(ApplyTT (ApplyTT @x3
(FStar.Pervasives.Err @x4
(FStar.Pervasives.Err_msg @lb7)))
@x1)
Tm_unit)))))
 

:pattern ((ApplyTT (ApplyTT (FStar.Pervasives_Tm_abs_4f43c341fa8cbfd3df64083726cf3bd8 @x2
@x3
@x4
@x5
@x6)
@x0)
@x1))
:qid interpretation_FStar.Pervasives_Tm_abs_4f43c341fa8cbfd3df64083726cf3bd8))
:named interpretation_FStar.Pervasives_Tm_abs_4f43c341fa8cbfd3df64083726cf3bd8))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.all_bind_wp
;;; Fact-ids: Name FStar.Pervasives.all_bind_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.all_bind_wp @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
(ApplyTT (ApplyTT @x4
(FStar.Pervasives_Tm_abs_4f43c341fa8cbfd3df64083726cf3bd8 @x5
@x6
@x3
@x0
@x2))
@x7))
 

:pattern ((FStar.Pervasives.all_bind_wp @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid equation_FStar.Pervasives.all_bind_wp))
:named equation_FStar.Pervasives.all_bind_wp))

; </end encoding FStar.Pervasives.all_bind_wp>

; <Start encoding FStar.Pervasives.all_if_then_else>
(declare-fun FStar.Pervasives.all_if_then_else (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap:Type ->...
(declare-fun Tm_arrow_390fd4f2e72f12a7456bb5ce6e6b16a5 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_390fd4f2e72f12a7456bb5ce6e6b16a5
;;; Fact-ids: Name FStar.Pervasives.all_if_then_else; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_390fd4f2e72f12a7456bb5ce6e6b16a5
Tm_type)
:named kinding_Tm_arrow_390fd4f2e72f12a7456bb5ce6e6b16a5))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.all_if_then_else; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_390fd4f2e72f12a7456bb5ce6e6b16a5)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_390fd4f2e72f12a7456bb5ce6e6b16a5))
:qid FStar.Pervasives_pre_typing_Tm_arrow_390fd4f2e72f12a7456bb5ce6e6b16a5))
:named FStar.Pervasives_pre_typing_Tm_arrow_390fd4f2e72f12a7456bb5ce6e6b16a5))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_390fd4f2e72f12a7456bb5ce6e6b16a5
;;; Fact-ids: Name FStar.Pervasives.all_if_then_else; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_390fd4f2e72f12a7456bb5ce6e6b16a5)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(FStar.Pervasives.all_wp_h @x1
@x2))
(HasType @x5
(FStar.Pervasives.all_wp_h @x1
@x2))
(HasType @x6
(FStar.Pervasives.all_post_h @x1
@x2))
(HasType @x7
@x1))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))
:qid FStar.Pervasives_interpretation_Tm_arrow_390fd4f2e72f12a7456bb5ce6e6b16a5.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_390fd4f2e72f12a7456bb5ce6e6b16a5))
:qid FStar.Pervasives_interpretation_Tm_arrow_390fd4f2e72f12a7456bb5ce6e6b16a5))
:named FStar.Pervasives_interpretation_Tm_arrow_390fd4f2e72f12a7456bb5ce6e6b16a5))
(declare-fun FStar.Pervasives.all_if_then_else@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.all_if_then_else; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.all_if_then_else@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
(FStar.Pervasives.all_if_then_else @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.all_if_then_else@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))

:pattern ((FStar.Pervasives.all_if_then_else @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid token_correspondence_FStar.Pervasives.all_if_then_else))
:named token_correspondence_FStar.Pervasives.all_if_then_else))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.all_if_then_else; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.all_if_then_else@tok
Tm_arrow_390fd4f2e72f12a7456bb5ce6e6b16a5))
 

:pattern ((ApplyTT FStar.Pervasives.all_if_then_else@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.all_if_then_else@tok))
:qid function_token_typing_FStar.Pervasives.all_if_then_else))
:named function_token_typing_FStar.Pervasives.all_if_then_else))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.all_if_then_else; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.all_wp_h @x0
@x1))
(HasType @x4
(FStar.Pervasives.all_wp_h @x0
@x1))
(HasType @x5
(FStar.Pervasives.all_post_h @x0
@x1))
(HasType @x6
@x0))
(HasType (FStar.Pervasives.all_if_then_else @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
 

:pattern ((FStar.Pervasives.all_if_then_else @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid typing_FStar.Pervasives.all_if_then_else))
:named typing_FStar.Pervasives.all_if_then_else))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.all_if_then_else
;;; Fact-ids: Name FStar.Pervasives.all_if_then_else; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (FStar.Pervasives.all_if_then_else @x0
@x1
@x2
@x3
@x4
@x5
@x6)
(Prims.l_and (Prims.l_imp @x2
(ApplyTT (ApplyTT @x3
@x5)
@x6))
(Prims.l_imp (Prims.l_not @x2)
(ApplyTT (ApplyTT @x4
@x5)
@x6))))
 

:pattern ((FStar.Pervasives.all_if_then_else @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid equation_FStar.Pervasives.all_if_then_else))
:named equation_FStar.Pervasives.all_if_then_else))

; </end encoding FStar.Pervasives.all_if_then_else>

; <Start encoding FStar.Pervasives.all_stronger>
(declare-fun FStar.Pervasives.all_stronger (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap:Type ->...
(declare-fun Tm_arrow_e71b3724a77f5c45f50c08e532fc3350 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_e71b3724a77f5c45f50c08e532fc3350
;;; Fact-ids: Name FStar.Pervasives.all_stronger; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_e71b3724a77f5c45f50c08e532fc3350
Tm_type)
:named kinding_Tm_arrow_e71b3724a77f5c45f50c08e532fc3350))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.all_stronger; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_e71b3724a77f5c45f50c08e532fc3350)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_e71b3724a77f5c45f50c08e532fc3350))
:qid FStar.Pervasives_pre_typing_Tm_arrow_e71b3724a77f5c45f50c08e532fc3350))
:named FStar.Pervasives_pre_typing_Tm_arrow_e71b3724a77f5c45f50c08e532fc3350))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_e71b3724a77f5c45f50c08e532fc3350
;;; Fact-ids: Name FStar.Pervasives.all_stronger; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_e71b3724a77f5c45f50c08e532fc3350)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.all_wp_h @x1
@x2))
(HasType @x4
(FStar.Pervasives.all_wp_h @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid FStar.Pervasives_interpretation_Tm_arrow_e71b3724a77f5c45f50c08e532fc3350.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_e71b3724a77f5c45f50c08e532fc3350))
:qid FStar.Pervasives_interpretation_Tm_arrow_e71b3724a77f5c45f50c08e532fc3350))
:named FStar.Pervasives_interpretation_Tm_arrow_e71b3724a77f5c45f50c08e532fc3350))
(declare-fun FStar.Pervasives.all_stronger@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.all_stronger; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.all_stronger@tok
@x0)
@x1)
@x2)
@x3)
(FStar.Pervasives.all_stronger @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.all_stronger@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((FStar.Pervasives.all_stronger @x0
@x1
@x2
@x3))
:qid token_correspondence_FStar.Pervasives.all_stronger))
:named token_correspondence_FStar.Pervasives.all_stronger))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.all_stronger; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.all_stronger@tok
Tm_arrow_e71b3724a77f5c45f50c08e532fc3350))
 

:pattern ((ApplyTT FStar.Pervasives.all_stronger@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.all_stronger@tok))
:qid function_token_typing_FStar.Pervasives.all_stronger))
:named function_token_typing_FStar.Pervasives.all_stronger))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.all_stronger; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.all_wp_h @x0
@x1))
(HasType @x3
(FStar.Pervasives.all_wp_h @x0
@x1)))
(HasType (FStar.Pervasives.all_stronger @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((FStar.Pervasives.all_stronger @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives.all_stronger))
:named typing_FStar.Pervasives.all_stronger))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.all_stronger
;;; Fact-ids: Name FStar.Pervasives.all_stronger; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (FStar.Pervasives.all_stronger @x0
@x1
@x2
@x3))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(172,4-172,64); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(172,4-172,64)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
(FStar.Pervasives.all_post_h @x0
@x1))
(HasType @x5
@x0)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(172,44-172,51); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(172,44-172,51)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(172,44-172,51); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(172,44-172,51)
(ApplyTT (ApplyTT @x2
@x4)
@x5)
)
)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(172,56-172,63); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(172,56-172,63)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(172,56-172,63); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(172,56-172,63)
(ApplyTT (ApplyTT @x3
@x4)
@x5)
)
)
 
;;no pats
:qid equation_FStar.Pervasives.all_stronger.1))
)
 

:pattern ((Valid (FStar.Pervasives.all_stronger @x0
@x1
@x2
@x3)))
:qid equation_FStar.Pervasives.all_stronger))
:named equation_FStar.Pervasives.all_stronger))

; </end encoding FStar.Pervasives.all_stronger>

; <Start encoding FStar.Pervasives.all_close_wp>

(declare-fun FStar.Pervasives.all_close_wp (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap:Type ->...
(declare-fun Tm_arrow_4a4441f0bc9032921e2b4e46e13d8b13 () Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_4a4441f0bc9032921e2b4e46e13d8b13
;;; Fact-ids: Name FStar.Pervasives.all_close_wp; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_4a4441f0bc9032921e2b4e46e13d8b13
Tm_type)
:named kinding_Tm_arrow_4a4441f0bc9032921e2b4e46e13d8b13))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.all_close_wp; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_4a4441f0bc9032921e2b4e46e13d8b13)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_4a4441f0bc9032921e2b4e46e13d8b13))
:qid FStar.Pervasives_pre_typing_Tm_arrow_4a4441f0bc9032921e2b4e46e13d8b13))
:named FStar.Pervasives_pre_typing_Tm_arrow_4a4441f0bc9032921e2b4e46e13d8b13))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_4a4441f0bc9032921e2b4e46e13d8b13
;;; Fact-ids: Name FStar.Pervasives.all_close_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_4a4441f0bc9032921e2b4e46e13d8b13)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(Tm_arrow_12929d79484018a159cc54c10d62f794 @x2
@x1
@x3))
(HasType @x5
(FStar.Pervasives.all_post_h @x1
@x2))
(HasType @x6
@x1))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))
:qid FStar.Pervasives_interpretation_Tm_arrow_4a4441f0bc9032921e2b4e46e13d8b13.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_4a4441f0bc9032921e2b4e46e13d8b13))
:qid FStar.Pervasives_interpretation_Tm_arrow_4a4441f0bc9032921e2b4e46e13d8b13))
:named FStar.Pervasives_interpretation_Tm_arrow_4a4441f0bc9032921e2b4e46e13d8b13))
(declare-fun FStar.Pervasives.all_close_wp@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.all_close_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.all_close_wp@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
(FStar.Pervasives.all_close_wp @x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.all_close_wp@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5))

:pattern ((FStar.Pervasives.all_close_wp @x0
@x1
@x2
@x3
@x4
@x5))
:qid token_correspondence_FStar.Pervasives.all_close_wp))
:named token_correspondence_FStar.Pervasives.all_close_wp))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.all_close_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.all_close_wp@tok
Tm_arrow_4a4441f0bc9032921e2b4e46e13d8b13))
 

:pattern ((ApplyTT FStar.Pervasives.all_close_wp@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.all_close_wp@tok))
:qid function_token_typing_FStar.Pervasives.all_close_wp))
:named function_token_typing_FStar.Pervasives.all_close_wp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.all_close_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(Tm_arrow_12929d79484018a159cc54c10d62f794 @x1
@x0
@x2))
(HasType @x4
(FStar.Pervasives.all_post_h @x0
@x1))
(HasType @x5
@x0))
(HasType (FStar.Pervasives.all_close_wp @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
 

:pattern ((FStar.Pervasives.all_close_wp @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_FStar.Pervasives.all_close_wp))
:named typing_FStar.Pervasives.all_close_wp))

;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.all_close_wp
;;; Fact-ids: Name FStar.Pervasives.all_close_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Valid (FStar.Pervasives.all_close_wp @x0
@x1
@x2
@x3
@x4
@x5))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(177,4-177,28); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(177,4-177,28)
(forall ((@x6 Term))
 (! (implies (HasType @x6
@x2)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(177,19-177,27); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(177,19-177,27)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(177,19-177,27); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(177,19-177,27)
(ApplyTT (ApplyTT (ApplyTT @x3
@x6)
@x4)
@x5)
)
)
 
;;no pats
:qid equation_FStar.Pervasives.all_close_wp.1))
)
 

:pattern ((Valid (FStar.Pervasives.all_close_wp @x0
@x1
@x2
@x3
@x4
@x5)))
:qid equation_FStar.Pervasives.all_close_wp))
:named equation_FStar.Pervasives.all_close_wp))

; </end encoding FStar.Pervasives.all_close_wp>

; <Start encoding FStar.Pervasives.all_assert_p>
(declare-fun FStar.Pervasives.all_assert_p (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap:Type ->...
(declare-fun Tm_arrow_1c45a65ea7e3bcef013e813ffab7b3c4 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_1c45a65ea7e3bcef013e813ffab7b3c4
;;; Fact-ids: Name FStar.Pervasives.all_assert_p; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_1c45a65ea7e3bcef013e813ffab7b3c4
Tm_type)
:named kinding_Tm_arrow_1c45a65ea7e3bcef013e813ffab7b3c4))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.all_assert_p; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_1c45a65ea7e3bcef013e813ffab7b3c4)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_1c45a65ea7e3bcef013e813ffab7b3c4))
:qid FStar.Pervasives_pre_typing_Tm_arrow_1c45a65ea7e3bcef013e813ffab7b3c4))
:named FStar.Pervasives_pre_typing_Tm_arrow_1c45a65ea7e3bcef013e813ffab7b3c4))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_1c45a65ea7e3bcef013e813ffab7b3c4
;;; Fact-ids: Name FStar.Pervasives.all_assert_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_1c45a65ea7e3bcef013e813ffab7b3c4)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(FStar.Pervasives.all_wp_h @x1
@x2))
(HasType @x5
(FStar.Pervasives.all_post_h @x1
@x2))
(HasType @x6
@x1))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))
:qid FStar.Pervasives_interpretation_Tm_arrow_1c45a65ea7e3bcef013e813ffab7b3c4.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_1c45a65ea7e3bcef013e813ffab7b3c4))
:qid FStar.Pervasives_interpretation_Tm_arrow_1c45a65ea7e3bcef013e813ffab7b3c4))
:named FStar.Pervasives_interpretation_Tm_arrow_1c45a65ea7e3bcef013e813ffab7b3c4))
(declare-fun FStar.Pervasives.all_assert_p@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.all_assert_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.all_assert_p@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
(FStar.Pervasives.all_assert_p @x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.all_assert_p@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5))

:pattern ((FStar.Pervasives.all_assert_p @x0
@x1
@x2
@x3
@x4
@x5))
:qid token_correspondence_FStar.Pervasives.all_assert_p))
:named token_correspondence_FStar.Pervasives.all_assert_p))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.all_assert_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.all_assert_p@tok
Tm_arrow_1c45a65ea7e3bcef013e813ffab7b3c4))
 

:pattern ((ApplyTT FStar.Pervasives.all_assert_p@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.all_assert_p@tok))
:qid function_token_typing_FStar.Pervasives.all_assert_p))
:named function_token_typing_FStar.Pervasives.all_assert_p))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.all_assert_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.all_wp_h @x0
@x1))
(HasType @x4
(FStar.Pervasives.all_post_h @x0
@x1))
(HasType @x5
@x0))
(HasType (FStar.Pervasives.all_assert_p @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
 

:pattern ((FStar.Pervasives.all_assert_p @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_FStar.Pervasives.all_assert_p))
:named typing_FStar.Pervasives.all_assert_p))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.all_assert_p
;;; Fact-ids: Name FStar.Pervasives.all_assert_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Valid (FStar.Pervasives.all_assert_p @x0
@x1
@x2
@x3
@x4
@x5))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(180,4-180,15); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(180,4-180,15)
(and 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(178,46-178,47); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(180,4-180,5)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(178,46-178,47); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(180,4-180,5)
@x2
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(180,9-180,15); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(180,9-180,15)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(180,9-180,15); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(180,9-180,15)
(ApplyTT (ApplyTT @x3
@x4)
@x5)
)
)
)
 

:pattern ((Valid (FStar.Pervasives.all_assert_p @x0
@x1
@x2
@x3
@x4
@x5)))
:qid equation_FStar.Pervasives.all_assert_p))
:named equation_FStar.Pervasives.all_assert_p))

; </end encoding FStar.Pervasives.all_assert_p>

; <Start encoding FStar.Pervasives.all_assume_p>
(declare-fun FStar.Pervasives.all_assume_p (Term Term Term Term Term Term) Term)

(declare-fun FStar.Pervasives.all_assume_p@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.all_assume_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.all_assume_p@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
(FStar.Pervasives.all_assume_p @x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.all_assume_p@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5))

:pattern ((FStar.Pervasives.all_assume_p @x0
@x1
@x2
@x3
@x4
@x5))
:qid token_correspondence_FStar.Pervasives.all_assume_p))
:named token_correspondence_FStar.Pervasives.all_assume_p))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.all_assume_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.all_assume_p@tok
Tm_arrow_1c45a65ea7e3bcef013e813ffab7b3c4))
 

:pattern ((ApplyTT FStar.Pervasives.all_assume_p@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.all_assume_p@tok))
:qid function_token_typing_FStar.Pervasives.all_assume_p))
:named function_token_typing_FStar.Pervasives.all_assume_p))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.all_assume_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.all_wp_h @x0
@x1))
(HasType @x4
(FStar.Pervasives.all_post_h @x0
@x1))
(HasType @x5
@x0))
(HasType (FStar.Pervasives.all_assume_p @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
 

:pattern ((FStar.Pervasives.all_assume_p @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_FStar.Pervasives.all_assume_p))
:named typing_FStar.Pervasives.all_assume_p))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.all_assume_p
;;; Fact-ids: Name FStar.Pervasives.all_assume_p; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Valid (FStar.Pervasives.all_assume_p @x0
@x1
@x2
@x3
@x4
@x5))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(183,4-183,16); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(183,4-183,16)
(implies 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(181,46-181,47); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(183,4-183,5)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(181,46-181,47); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(183,4-183,5)
@x2
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(183,10-183,16); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(183,10-183,16)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(183,10-183,16); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(183,10-183,16)
(ApplyTT (ApplyTT @x3
@x4)
@x5)
)
)
)
 

:pattern ((Valid (FStar.Pervasives.all_assume_p @x0
@x1
@x2
@x3
@x4
@x5)))
:qid equation_FStar.Pervasives.all_assume_p))
:named equation_FStar.Pervasives.all_assume_p))

; </end encoding FStar.Pervasives.all_assume_p>

; <Start encoding FStar.Pervasives.all_null_wp>
(declare-fun FStar.Pervasives.all_null_wp (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap:Type -> a:Type -> p:FStar.Pervasives.all_post_h heap a -> h0:heap -> Prims.Tot Type0
(declare-fun Tm_arrow_984010ffbfdf9e9bba8c237f26a7989d () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_984010ffbfdf9e9bba8c237f26a7989d
;;; Fact-ids: Name FStar.Pervasives.all_null_wp; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_984010ffbfdf9e9bba8c237f26a7989d
Tm_type)
:named kinding_Tm_arrow_984010ffbfdf9e9bba8c237f26a7989d))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.all_null_wp; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_984010ffbfdf9e9bba8c237f26a7989d)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_984010ffbfdf9e9bba8c237f26a7989d))
:qid FStar.Pervasives_pre_typing_Tm_arrow_984010ffbfdf9e9bba8c237f26a7989d))
:named FStar.Pervasives_pre_typing_Tm_arrow_984010ffbfdf9e9bba8c237f26a7989d))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_984010ffbfdf9e9bba8c237f26a7989d
;;; Fact-ids: Name FStar.Pervasives.all_null_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_984010ffbfdf9e9bba8c237f26a7989d)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.all_post_h @x1
@x2))
(HasType @x4
@x1))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid FStar.Pervasives_interpretation_Tm_arrow_984010ffbfdf9e9bba8c237f26a7989d.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_984010ffbfdf9e9bba8c237f26a7989d))
:qid FStar.Pervasives_interpretation_Tm_arrow_984010ffbfdf9e9bba8c237f26a7989d))
:named FStar.Pervasives_interpretation_Tm_arrow_984010ffbfdf9e9bba8c237f26a7989d))
(declare-fun FStar.Pervasives.all_null_wp@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.all_null_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.all_null_wp@tok
@x0)
@x1)
@x2)
@x3)
(FStar.Pervasives.all_null_wp @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.all_null_wp@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((FStar.Pervasives.all_null_wp @x0
@x1
@x2
@x3))
:qid token_correspondence_FStar.Pervasives.all_null_wp))
:named token_correspondence_FStar.Pervasives.all_null_wp))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.all_null_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.all_null_wp@tok
Tm_arrow_984010ffbfdf9e9bba8c237f26a7989d))
 

:pattern ((ApplyTT FStar.Pervasives.all_null_wp@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.all_null_wp@tok))
:qid function_token_typing_FStar.Pervasives.all_null_wp))
:named function_token_typing_FStar.Pervasives.all_null_wp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.all_null_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.all_post_h @x0
@x1))
(HasType @x3
@x0))
(HasType (FStar.Pervasives.all_null_wp @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((FStar.Pervasives.all_null_wp @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives.all_null_wp))
:named typing_FStar.Pervasives.all_null_wp))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.all_null_wp
;;; Fact-ids: Name FStar.Pervasives.all_null_wp; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (FStar.Pervasives.all_null_wp @x0
@x1
@x2
@x3))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(186,4-186,41); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(186,4-186,41)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
(FStar.Pervasives.result @x1))
(HasType @x5
@x0))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(186,35-186,40); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(186,35-186,40)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(186,35-186,40); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(186,35-186,40)
(ApplyTT (ApplyTT @x2
@x4)
@x5)
)
)
 
;;no pats
:qid equation_FStar.Pervasives.all_null_wp.1))
)
 

:pattern ((Valid (FStar.Pervasives.all_null_wp @x0
@x1
@x2
@x3)))
:qid equation_FStar.Pervasives.all_null_wp))
:named equation_FStar.Pervasives.all_null_wp))

; </end encoding FStar.Pervasives.all_null_wp>

; <Start encoding FStar.Pervasives.all_trivial>
(declare-fun FStar.Pervasives.all_trivial (Term Term Term) Term)
;;;;;;;;;;;;;;;;heap:Type -> a:Type -> wp:FStar.Pervasives.all_wp_h heap a -> Prims.Tot Type0
(declare-fun Tm_arrow_4808080bbae5a5f6a2fce65d0e6bcfe4 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_4808080bbae5a5f6a2fce65d0e6bcfe4
;;; Fact-ids: Name FStar.Pervasives.all_trivial; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_4808080bbae5a5f6a2fce65d0e6bcfe4
Tm_type)
:named kinding_Tm_arrow_4808080bbae5a5f6a2fce65d0e6bcfe4))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.all_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_4808080bbae5a5f6a2fce65d0e6bcfe4)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_4808080bbae5a5f6a2fce65d0e6bcfe4))
:qid FStar.Pervasives_pre_typing_Tm_arrow_4808080bbae5a5f6a2fce65d0e6bcfe4))
:named FStar.Pervasives_pre_typing_Tm_arrow_4808080bbae5a5f6a2fce65d0e6bcfe4))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_4808080bbae5a5f6a2fce65d0e6bcfe4
;;; Fact-ids: Name FStar.Pervasives.all_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_4808080bbae5a5f6a2fce65d0e6bcfe4)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.all_wp_h @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid FStar.Pervasives_interpretation_Tm_arrow_4808080bbae5a5f6a2fce65d0e6bcfe4.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_4808080bbae5a5f6a2fce65d0e6bcfe4))
:qid FStar.Pervasives_interpretation_Tm_arrow_4808080bbae5a5f6a2fce65d0e6bcfe4))
:named FStar.Pervasives_interpretation_Tm_arrow_4808080bbae5a5f6a2fce65d0e6bcfe4))
(declare-fun FStar.Pervasives.all_trivial@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.all_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.all_trivial@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.all_trivial @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.all_trivial@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.all_trivial @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.all_trivial))
:named token_correspondence_FStar.Pervasives.all_trivial))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.all_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.all_trivial@tok
Tm_arrow_4808080bbae5a5f6a2fce65d0e6bcfe4))
 

:pattern ((ApplyTT FStar.Pervasives.all_trivial@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.all_trivial@tok))
:qid function_token_typing_FStar.Pervasives.all_trivial))
:named function_token_typing_FStar.Pervasives.all_trivial))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.all_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.all_wp_h @x0
@x1)))
(HasType (FStar.Pervasives.all_trivial @x0
@x1
@x2)
Tm_type))
 

:pattern ((FStar.Pervasives.all_trivial @x0
@x1
@x2))
:qid typing_FStar.Pervasives.all_trivial))
:named typing_FStar.Pervasives.all_trivial))

(declare-fun FStar.Pervasives_Tm_abs_daef7b32a1f47b58a6908a31814f3871 (Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_FStar.Pervasives_Tm_abs_daef7b32a1f47b58a6908a31814f3871
;;; Fact-ids: Name FStar.Pervasives.all_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (FStar.Pervasives_Tm_abs_daef7b32a1f47b58a6908a31814f3871 @x0
@x1
@x2)
(Tm_arrow_a4b330751b796dddf098398d5d89287f @x1
@x2))
 

:pattern ((FStar.Pervasives_Tm_abs_daef7b32a1f47b58a6908a31814f3871 @x0
@x1
@x2))
:qid typing_FStar.Pervasives_Tm_abs_daef7b32a1f47b58a6908a31814f3871))
:named typing_FStar.Pervasives_Tm_abs_daef7b32a1f47b58a6908a31814f3871))
;;;;;;;;;;;;;;;;interpretation_FStar.Pervasives_Tm_abs_daef7b32a1f47b58a6908a31814f3871
;;; Fact-ids: Name FStar.Pervasives.all_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (FStar.Pervasives_Tm_abs_daef7b32a1f47b58a6908a31814f3871 @x2
@x3
@x4)
@x0)
@x1)
@x2)
 

:pattern ((ApplyTT (ApplyTT (FStar.Pervasives_Tm_abs_daef7b32a1f47b58a6908a31814f3871 @x2
@x3
@x4)
@x0)
@x1))
:qid interpretation_FStar.Pervasives_Tm_abs_daef7b32a1f47b58a6908a31814f3871))
:named interpretation_FStar.Pervasives_Tm_abs_daef7b32a1f47b58a6908a31814f3871))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.all_trivial
;;; Fact-ids: Name FStar.Pervasives.all_trivial; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (FStar.Pervasives.all_trivial @x0
@x1
@x2))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(188,4-188,48); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(188,4-188,48)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x0)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(188,23-188,47); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(188,23-188,47)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(188,23-188,47); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(188,23-188,47)
(ApplyTT (ApplyTT @x2
(FStar.Pervasives_Tm_abs_daef7b32a1f47b58a6908a31814f3871 Prims.l_True
@x0
@x1))
@x3)
)
)
 
;;no pats
:qid equation_FStar.Pervasives.all_trivial.1))
)
 

:pattern ((Valid (FStar.Pervasives.all_trivial @x0
@x1
@x2)))
:qid equation_FStar.Pervasives.all_trivial))
:named equation_FStar.Pervasives.all_trivial))

; </end encoding FStar.Pervasives.all_trivial>

; <Skipped FStar.Pervasives.ALL_h/>

; <Start encoding FStar.Pervasives.inversion>
(declare-fun FStar.Pervasives.inversion (Term) Term)

(declare-fun FStar.Pervasives.inversion@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.inversion; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.inversion@tok
@x0)
(FStar.Pervasives.inversion @x0))
 

:pattern ((ApplyTT FStar.Pervasives.inversion@tok
@x0))

:pattern ((FStar.Pervasives.inversion @x0))
:qid token_correspondence_FStar.Pervasives.inversion))
:named token_correspondence_FStar.Pervasives.inversion))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.inversion; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.inversion@tok
Tm_arrow_257be5ee7da9f477702a7d2ee9bef0c9))
 

:pattern ((ApplyTT FStar.Pervasives.inversion@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.inversion@tok))
:qid function_token_typing_FStar.Pervasives.inversion))
:named function_token_typing_FStar.Pervasives.inversion))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.inversion; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Pervasives.inversion @x0)
Tm_type))
 

:pattern ((FStar.Pervasives.inversion @x0))
:qid typing_FStar.Pervasives.inversion))
:named typing_FStar.Pervasives.inversion))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.inversion
;;; Fact-ids: Name FStar.Pervasives.inversion; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (FStar.Pervasives.inversion @x0)
Prims.l_True)
 

:pattern ((FStar.Pervasives.inversion @x0))
:qid equation_FStar.Pervasives.inversion))
:named equation_FStar.Pervasives.inversion))
;;;;;;;;;;;;;;;;inversion interpretation
;;; Fact-ids: Name FStar.Pervasives.inversion; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (Valid (FStar.Pervasives.inversion @x0))
(forall ((@x1 Term))
 (! (implies (HasTypeZ @x1
@x0)
(HasTypeFuel (SFuel ZFuel)
@x1
@x0))
 

:pattern ((HasTypeZ @x1
@x0))
:qid inversion-interp.1)))
 

:pattern ((FStar.Pervasives.inversion @x0))
:qid inversion-interp))
:named inversion-interp))

; </end encoding FStar.Pervasives.inversion>

; <Start encoding FStar.Pervasives.allow_inversion>
(declare-fun FStar.Pervasives.allow_inversion (Term) Term)
;;;;;;;;;;;;;;;;a:Type -> Prims.Pure Prims.unit
(declare-fun Tm_arrow_c7a05ebcf00d9d5ea2ad28cd2649cf23 (Term) Term)
(declare-fun FStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.allow_inversion; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (FStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3 @x0
@x1)
Tm_type)
 

:pattern ((HasType (FStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3 @x0
@x1)
Tm_type))
:qid refinement_kinding_FStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3))
:named refinement_kinding_FStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: Name FStar.Pervasives.allow_inversion; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (exists ((@x2 Term))
 (! (and (HasType @x2
@x0)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(212,49-212,60); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(212,49-212,60)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(212,49-212,60); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(212,49-212,60)
(FStar.Pervasives.inversion @x1)
)
)
 
;;no pats
:qid ref_valid_FStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3.1))
(Valid (FStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3 @x0
@x1)))
 

:pattern ((Valid (FStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3 @x0
@x1)))
:qid ref_valid_FStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3))
:named ref_valid_FStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3))
;;;;;;;;;;;;;;;;(uu___158891:Prims.unit{ FStar.Pervasives.inversion a })
;;; Fact-ids: Name FStar.Pervasives.allow_inversion; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(FStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3 @x2
@x3))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(212,49-212,60); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(212,49-212,60)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(212,49-212,60); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(212,49-212,60)
(FStar.Pervasives.inversion @x3)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3 @x2
@x3)))
:qid refinement_interpretation_FStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3))
:named refinement_interpretation_FStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3))
;;;;;;;;;;;;;;;;haseq for FStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3
;;; Fact-ids: Name FStar.Pervasives.allow_inversion; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (FStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3 @x0
@x1)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (FStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3 @x0
@x1))))
:qid haseqFStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3))
:named haseqFStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c7a05ebcf00d9d5ea2ad28cd2649cf23
;;; Fact-ids: Name FStar.Pervasives.allow_inversion; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_c7a05ebcf00d9d5ea2ad28cd2649cf23 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_c7a05ebcf00d9d5ea2ad28cd2649cf23 @x0)
Tm_type))
:qid kinding_Tm_arrow_c7a05ebcf00d9d5ea2ad28cd2649cf23))
:named kinding_Tm_arrow_c7a05ebcf00d9d5ea2ad28cd2649cf23))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.allow_inversion; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_c7a05ebcf00d9d5ea2ad28cd2649cf23 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_c7a05ebcf00d9d5ea2ad28cd2649cf23 @x2)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_c7a05ebcf00d9d5ea2ad28cd2649cf23))
:named FStar.Pervasives_pre_typing_Tm_arrow_c7a05ebcf00d9d5ea2ad28cd2649cf23))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c7a05ebcf00d9d5ea2ad28cd2649cf23
;;; Fact-ids: Name FStar.Pervasives.allow_inversion; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_c7a05ebcf00d9d5ea2ad28cd2649cf23 @x1))
(forall ((@x2 Term))
 (! (implies (HasType @x2
Tm_type)
(HasType (ApplyTT @x0
@x2)
(FStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3 @x1
@x2)))
 

:pattern ((ApplyTT @x0
@x2))
:qid FStar.Pervasives_interpretation_Tm_arrow_c7a05ebcf00d9d5ea2ad28cd2649cf23.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_c7a05ebcf00d9d5ea2ad28cd2649cf23 @x1)))
:qid FStar.Pervasives_interpretation_Tm_arrow_c7a05ebcf00d9d5ea2ad28cd2649cf23))
:named FStar.Pervasives_interpretation_Tm_arrow_c7a05ebcf00d9d5ea2ad28cd2649cf23))
(declare-fun FStar.Pervasives.allow_inversion@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.allow_inversion; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.allow_inversion@tok
@x0)
(FStar.Pervasives.allow_inversion @x0))
 

:pattern ((ApplyTT FStar.Pervasives.allow_inversion@tok
@x0))

:pattern ((FStar.Pervasives.allow_inversion @x0))
:qid token_correspondence_FStar.Pervasives.allow_inversion))
:named token_correspondence_FStar.Pervasives.allow_inversion))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.allow_inversion; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.allow_inversion@tok
(Tm_arrow_c7a05ebcf00d9d5ea2ad28cd2649cf23 Prims.unit)))
 

:pattern ((ApplyTT FStar.Pervasives.allow_inversion@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.allow_inversion@tok))
:qid function_token_typing_FStar.Pervasives.allow_inversion))
:named function_token_typing_FStar.Pervasives.allow_inversion))

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.allow_inversion; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Pervasives.allow_inversion @x0)
(FStar.Pervasives_Tm_refine_7026ef6906ebd21e19dc2cc0639312d3 Prims.unit
@x0)))
 

:pattern ((FStar.Pervasives.allow_inversion @x0))
:qid typing_FStar.Pervasives.allow_inversion))
:named typing_FStar.Pervasives.allow_inversion))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.allow_inversion
;;; Fact-ids: Name FStar.Pervasives.allow_inversion; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (FStar.Pervasives.allow_inversion @x0)
Tm_unit)
 

:pattern ((FStar.Pervasives.allow_inversion @x0))
:qid equation_FStar.Pervasives.allow_inversion))
:named equation_FStar.Pervasives.allow_inversion))

; </end encoding FStar.Pervasives.allow_inversion>

; <Start encoding FStar.Pervasives.invertOption>
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.invertOption (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.invertOption@tok () Term)
;;;;;;;;;;;;;;;;Lemma: FStar.Pervasives.invertOption
;;; Fact-ids: Name FStar.Pervasives.invertOption; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(218,11-218,52); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(220,4-220,16)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Pervasives.Native.option @x0))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(218,33-218,51); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(220,4-220,16)
(or 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(218,33-218,40); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(220,4-220,16)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None @x0
@x1))


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(218,44-218,51); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(220,4-220,16)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x1))
)
)
 
;;no pats
:qid lemma_FStar.Pervasives.invertOption.1))
)
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid lemma_FStar.Pervasives.invertOption))
:named lemma_FStar.Pervasives.invertOption))

; </end encoding FStar.Pervasives.invertOption>

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.either (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.either@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.either@x1 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.either@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_v (Term) Term)
;;;;;;;;;;;;;;;;v:'a -> Prims.Tot (FStar.Pervasives.either 'a 'b)
(declare-fun Tm_arrow_66a0d53ccf00bc028aa22d526865c801 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Inl
(declare-fun FStar.Pervasives.Inl@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_v (Term) Term)
;;;;;;;;;;;;;;;;v:'b -> Prims.Tot (FStar.Pervasives.either 'a 'b)
(declare-fun Tm_arrow_a1a8754ef05983b108c166cca1c4e63a () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Inr
(declare-fun FStar.Pervasives.Inr@tok () Term)

; <Start encoding FStar.Pervasives.either>

; <start constructor FStar.Pervasives.either>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= 1796
(Term_constr_id (FStar.Pervasives.either @x0
@x1)))
 

:pattern ((FStar.Pervasives.either @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.either))
:named constructor_distinct_FStar.Pervasives.either))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.either ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1796)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.either @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.either))))

; </end constructor FStar.Pervasives.either>
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (= 1797
(Term_constr_id FStar.Pervasives.either@tok))
:named fresh_token_FStar.Pervasives.either@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.either@tok
@x0)
@x1)
(FStar.Pervasives.either @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.either@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.either @x0
@x1))
:qid token_correspondence_FStar.Pervasives.either@tok))
:named token_correspondence_FStar.Pervasives.either@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.either@tok))
:named pre_kinding_FStar.Pervasives.either@tok))
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (FStar.Pervasives.either @x0
@x1)
Tm_type))
 

:pattern ((FStar.Pervasives.either @x0
@x1))
:qid kinding_FStar.Pervasives.either@tok))
:named kinding_FStar.Pervasives.either@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.either @x2
@x3))
(= (FStar.Pervasives.either @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.either @x2
@x3)))
:qid FStar.Pervasives_pretyping_b33635a76275268b8c60db6fa0677ca6))
:named FStar.Pervasives_pretyping_b33635a76275268b8c60db6fa0677ca6))

; </end encoding FStar.Pervasives.either>

; <Start encoding FStar.Pervasives.Inl>

; <start constructor FStar.Pervasives.Inl>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 1803
(Term_constr_id (FStar.Pervasives.Inl @x0
@x1
@x2)))
 

:pattern ((FStar.Pervasives.Inl @x0
@x1
@x2))
:qid constructor_distinct_FStar.Pervasives.Inl))
:named constructor_distinct_FStar.Pervasives.Inl))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Inl__a (FStar.Pervasives.Inl @x0
@x1
@x2))
@x0)
 

:pattern ((FStar.Pervasives.Inl @x0
@x1
@x2))
:qid projection_inverse_FStar.Pervasives.Inl__a))
:named projection_inverse_FStar.Pervasives.Inl__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Inl__b (FStar.Pervasives.Inl @x0
@x1
@x2))
@x1)
 

:pattern ((FStar.Pervasives.Inl @x0
@x1
@x2))
:qid projection_inverse_FStar.Pervasives.Inl__b))
:named projection_inverse_FStar.Pervasives.Inl__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Inl_v (FStar.Pervasives.Inl @x0
@x1
@x2))
@x2)
 

:pattern ((FStar.Pervasives.Inl @x0
@x1
@x2))
:qid projection_inverse_FStar.Pervasives.Inl_v))
:named projection_inverse_FStar.Pervasives.Inl_v))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1803)
(= __@x0
(FStar.Pervasives.Inl (FStar.Pervasives.Inl__a __@x0)
(FStar.Pervasives.Inl__b __@x0)
(FStar.Pervasives.Inl_v __@x0)))))

; </end constructor FStar.Pervasives.Inl>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_66a0d53ccf00bc028aa22d526865c801
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_66a0d53ccf00bc028aa22d526865c801
Tm_type)
:named kinding_Tm_arrow_66a0d53ccf00bc028aa22d526865c801))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_66a0d53ccf00bc028aa22d526865c801)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_66a0d53ccf00bc028aa22d526865c801))
:qid FStar.Pervasives_pre_typing_Tm_arrow_66a0d53ccf00bc028aa22d526865c801))
:named FStar.Pervasives_pre_typing_Tm_arrow_66a0d53ccf00bc028aa22d526865c801))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_66a0d53ccf00bc028aa22d526865c801
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_66a0d53ccf00bc028aa22d526865c801)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
@x1))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
(FStar.Pervasives.either @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid FStar.Pervasives_interpretation_Tm_arrow_66a0d53ccf00bc028aa22d526865c801.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_66a0d53ccf00bc028aa22d526865c801))
:qid FStar.Pervasives_interpretation_Tm_arrow_66a0d53ccf00bc028aa22d526865c801))
:named FStar.Pervasives_interpretation_Tm_arrow_66a0d53ccf00bc028aa22d526865c801))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (= 1806
(Term_constr_id FStar.Pervasives.Inl@tok))
:named fresh_token_FStar.Pervasives.Inl@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Inl@tok
Tm_arrow_66a0d53ccf00bc028aa22d526865c801))
 

:pattern ((ApplyTT FStar.Pervasives.Inl@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Inl@tok))
:qid typing_tok_FStar.Pervasives.Inl@tok))
:named typing_tok_FStar.Pervasives.Inl@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Inl@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.Inl @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Inl@tok
@x0)
@x1)
@x2))
:qid equality_tok_FStar.Pervasives.Inl@tok))
:named equality_tok_FStar.Pervasives.Inl@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1))
(HasTypeFuel @u0
(FStar.Pervasives.Inl @x1
@x2
@x3)
(FStar.Pervasives.either @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Inl @x1
@x2
@x3)
(FStar.Pervasives.either @x1
@x2)))
:qid data_typing_intro_FStar.Pervasives.Inl@tok))
:named data_typing_intro_FStar.Pervasives.Inl@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Inl @x1
@x2
@x3)
(FStar.Pervasives.either @x4
@x5))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x3
@x4)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Inl @x1
@x2
@x3)
(FStar.Pervasives.either @x4
@x5)))
:qid data_elim_FStar.Pervasives.Inl))
:named data_elim_FStar.Pervasives.Inl))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Inl @x1
@x2
@x3)
(FStar.Pervasives.either @x4
@x5))
(Valid (Precedes @x3
(FStar.Pervasives.Inl @x1
@x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Inl @x1
@x2
@x3)
(FStar.Pervasives.either @x4
@x5)))
:qid subterm_ordering_FStar.Pervasives.Inl))
:named subterm_ordering_FStar.Pervasives.Inl))

; </end encoding FStar.Pervasives.Inl>

; <Start encoding FStar.Pervasives.Inr>

; <start constructor FStar.Pervasives.Inr>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 1808
(Term_constr_id (FStar.Pervasives.Inr @x0
@x1
@x2)))
 

:pattern ((FStar.Pervasives.Inr @x0
@x1
@x2))
:qid constructor_distinct_FStar.Pervasives.Inr))
:named constructor_distinct_FStar.Pervasives.Inr))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Inr__a (FStar.Pervasives.Inr @x0
@x1
@x2))
@x0)
 

:pattern ((FStar.Pervasives.Inr @x0
@x1
@x2))
:qid projection_inverse_FStar.Pervasives.Inr__a))
:named projection_inverse_FStar.Pervasives.Inr__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Inr__b (FStar.Pervasives.Inr @x0
@x1
@x2))
@x1)
 

:pattern ((FStar.Pervasives.Inr @x0
@x1
@x2))
:qid projection_inverse_FStar.Pervasives.Inr__b))
:named projection_inverse_FStar.Pervasives.Inr__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Inr_v (FStar.Pervasives.Inr @x0
@x1
@x2))
@x2)
 

:pattern ((FStar.Pervasives.Inr @x0
@x1
@x2))
:qid projection_inverse_FStar.Pervasives.Inr_v))
:named projection_inverse_FStar.Pervasives.Inr_v))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1808)
(= __@x0
(FStar.Pervasives.Inr (FStar.Pervasives.Inr__a __@x0)
(FStar.Pervasives.Inr__b __@x0)
(FStar.Pervasives.Inr_v __@x0)))))

; </end constructor FStar.Pervasives.Inr>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a1a8754ef05983b108c166cca1c4e63a
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_a1a8754ef05983b108c166cca1c4e63a
Tm_type)
:named kinding_Tm_arrow_a1a8754ef05983b108c166cca1c4e63a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_a1a8754ef05983b108c166cca1c4e63a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_a1a8754ef05983b108c166cca1c4e63a))
:qid FStar.Pervasives_pre_typing_Tm_arrow_a1a8754ef05983b108c166cca1c4e63a))
:named FStar.Pervasives_pre_typing_Tm_arrow_a1a8754ef05983b108c166cca1c4e63a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a1a8754ef05983b108c166cca1c4e63a
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_a1a8754ef05983b108c166cca1c4e63a)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
@x2))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
(FStar.Pervasives.either @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid FStar.Pervasives_interpretation_Tm_arrow_a1a8754ef05983b108c166cca1c4e63a.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_a1a8754ef05983b108c166cca1c4e63a))
:qid FStar.Pervasives_interpretation_Tm_arrow_a1a8754ef05983b108c166cca1c4e63a))
:named FStar.Pervasives_interpretation_Tm_arrow_a1a8754ef05983b108c166cca1c4e63a))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (= 1811
(Term_constr_id FStar.Pervasives.Inr@tok))
:named fresh_token_FStar.Pervasives.Inr@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Inr@tok
Tm_arrow_a1a8754ef05983b108c166cca1c4e63a))
 

:pattern ((ApplyTT FStar.Pervasives.Inr@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Inr@tok))
:qid typing_tok_FStar.Pervasives.Inr@tok))
:named typing_tok_FStar.Pervasives.Inr@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Inr@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.Inr @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Inr@tok
@x0)
@x1)
@x2))
:qid equality_tok_FStar.Pervasives.Inr@tok))
:named equality_tok_FStar.Pervasives.Inr@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x2))
(HasTypeFuel @u0
(FStar.Pervasives.Inr @x1
@x2
@x3)
(FStar.Pervasives.either @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Inr @x1
@x2
@x3)
(FStar.Pervasives.either @x1
@x2)))
:qid data_typing_intro_FStar.Pervasives.Inr@tok))
:named data_typing_intro_FStar.Pervasives.Inr@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Inr @x1
@x2
@x3)
(FStar.Pervasives.either @x4
@x5))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x2)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Inr @x1
@x2
@x3)
(FStar.Pervasives.either @x4
@x5)))
:qid data_elim_FStar.Pervasives.Inr))
:named data_elim_FStar.Pervasives.Inr))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Inr @x1
@x2
@x3)
(FStar.Pervasives.either @x4
@x5))
(Valid (Precedes @x3
(FStar.Pervasives.Inr @x1
@x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Inr @x1
@x2
@x3)
(FStar.Pervasives.either @x4
@x5)))
:qid subterm_ordering_FStar.Pervasives.Inr))
:named subterm_ordering_FStar.Pervasives.Inr))

; </end encoding FStar.Pervasives.Inr>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.either; Namespace FStar.Pervasives; Name FStar.Pervasives.Inl; Namespace FStar.Pervasives; Name FStar.Pervasives.Inr; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.either @x2
@x3))
(or (and (is-FStar.Pervasives.Inl @x1)
(= @x2
(FStar.Pervasives.Inl__a @x1))
(= @x3
(FStar.Pervasives.Inl__b @x1)))
(and (is-FStar.Pervasives.Inr @x1)
(= @x2
(FStar.Pervasives.Inr__a @x1))
(= @x3
(FStar.Pervasives.Inr__b @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.either @x2
@x3)))
:qid fuel_guarded_inversion_FStar.Pervasives.either))
:named fuel_guarded_inversion_FStar.Pervasives.either))

; </end encoding >

; <Start encoding FStar.Pervasives.either_haseq>
;;;;;;;;;;;;;;;;Assumption: either_haseq
;;; Fact-ids: Name FStar.Pervasives.either_haseq; Namespace FStar.Pervasives
(assert (! 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(222,0-224,30); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(222,0-224,30)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(222,0-224,30); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(222,0-224,30)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(222,0-224,30); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(222,0-224,30)
(Prims.hasEq @x0)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(222,0-224,30); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(222,0-224,30)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(222,0-224,30); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(222,0-224,30)
(Prims.hasEq @x1)
)
)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(222,0-224,30); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(222,0-224,30)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(222,0-224,30); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(222,0-224,30)
(Prims.hasEq (FStar.Pervasives.either @x0
@x1))
)
)
 

:pattern ((Prims.hasEq (FStar.Pervasives.either @x0
@x1)))
:qid assumption_FStar.Pervasives.either_haseq))

:named assumption_FStar.Pervasives.either_haseq))

; </end encoding FStar.Pervasives.either_haseq>

; <Start encoding FStar.Pervasives.uu___is_Inl>
(declare-fun FStar.Pervasives.uu___is_Inl (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:FStar.Pervasives.either 'a 'b -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_59435ca7efae8c5a13162daf50ca7594 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_59435ca7efae8c5a13162daf50ca7594
;;; Fact-ids: Name FStar.Pervasives.uu___is_Inl; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_59435ca7efae8c5a13162daf50ca7594 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_59435ca7efae8c5a13162daf50ca7594 @x0)
Tm_type))
:qid kinding_Tm_arrow_59435ca7efae8c5a13162daf50ca7594))
:named kinding_Tm_arrow_59435ca7efae8c5a13162daf50ca7594))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.uu___is_Inl; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_59435ca7efae8c5a13162daf50ca7594 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_59435ca7efae8c5a13162daf50ca7594 @x2)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_59435ca7efae8c5a13162daf50ca7594))
:named FStar.Pervasives_pre_typing_Tm_arrow_59435ca7efae8c5a13162daf50ca7594))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_59435ca7efae8c5a13162daf50ca7594
;;; Fact-ids: Name FStar.Pervasives.uu___is_Inl; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_59435ca7efae8c5a13162daf50ca7594 @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(FStar.Pervasives.either @x2
@x3)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4))
:qid FStar.Pervasives_interpretation_Tm_arrow_59435ca7efae8c5a13162daf50ca7594.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_59435ca7efae8c5a13162daf50ca7594 @x1)))
:qid FStar.Pervasives_interpretation_Tm_arrow_59435ca7efae8c5a13162daf50ca7594))
:named FStar.Pervasives_interpretation_Tm_arrow_59435ca7efae8c5a13162daf50ca7594))
(declare-fun FStar.Pervasives.uu___is_Inl@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.uu___is_Inl; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.uu___is_Inl@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.uu___is_Inl @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.uu___is_Inl@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.uu___is_Inl @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.uu___is_Inl))
:named token_correspondence_FStar.Pervasives.uu___is_Inl))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_Inl; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.uu___is_Inl@tok
(Tm_arrow_59435ca7efae8c5a13162daf50ca7594 Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.uu___is_Inl@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.uu___is_Inl@tok))
:qid function_token_typing_FStar.Pervasives.uu___is_Inl))
:named function_token_typing_FStar.Pervasives.uu___is_Inl))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_Inl; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.either @x0
@x1)))
(HasType (FStar.Pervasives.uu___is_Inl @x0
@x1
@x2)
Prims.bool))
 

:pattern ((FStar.Pervasives.uu___is_Inl @x0
@x1
@x2))
:qid typing_FStar.Pervasives.uu___is_Inl))
:named typing_FStar.Pervasives.uu___is_Inl))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.uu___is_Inl; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.uu___is_Inl @x0
@x1
@x2)
(BoxBool (is-FStar.Pervasives.Inl @x2)))
 

:pattern ((FStar.Pervasives.uu___is_Inl @x0
@x1
@x2))
:qid disc_equation_FStar.Pervasives.Inl))
:named disc_equation_FStar.Pervasives.Inl))

; </end encoding FStar.Pervasives.uu___is_Inl>

; <Skipped FStar.Pervasives.uu___is_Inl/>

; <Start encoding FStar.Pervasives.__proj__Inl__item__v>
(declare-fun FStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.__proj__Inl__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (FStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba @x0
@x1)
Tm_type)
 

:pattern ((HasType (FStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba @x0
@x1)
Tm_type))
:qid refinement_kinding_FStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba))
:named refinement_kinding_FStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: Name FStar.Pervasives.__proj__Inl__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (exists ((@x2 Term))
 (! (and (HasType @x2
(FStar.Pervasives.either @x0
@x1))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(223,4-223,7); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(223,4-223,7)
(BoxBool_proj_0 (FStar.Pervasives.uu___is_Inl @x0
@x1
@x2))
)
 
;;no pats
:qid ref_valid_FStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba.1))
(Valid (FStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba @x0
@x1)))
 

:pattern ((Valid (FStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba @x0
@x1)))
:qid ref_valid_FStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba))
:named ref_valid_FStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba))
;;;;;;;;;;;;;;;;(uu___158999:FStar.Pervasives.either 'a 'b{ Prims.b2t (Inl? uu___158999) })
;;; Fact-ids: Name FStar.Pervasives.__proj__Inl__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(FStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.either @x2
@x3))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(223,4-223,7); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(223,4-223,7)
(BoxBool_proj_0 (FStar.Pervasives.uu___is_Inl @x2
@x3
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba @x2
@x3)))
:qid refinement_interpretation_FStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba))
:named refinement_interpretation_FStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba))
;;;;;;;;;;;;;;;;haseq for FStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba
;;; Fact-ids: Name FStar.Pervasives.__proj__Inl__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (FStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba @x0
@x1)))
(Valid (Prims.hasEq (FStar.Pervasives.either @x0
@x1))))
 

:pattern ((Valid (Prims.hasEq (FStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba @x0
@x1))))
:qid haseqFStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba))
:named haseqFStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba))
(declare-fun FStar.Pervasives.__proj__Inl__item__v (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:(uu___159018:FStar.Pervasives.either 'a 'b{ Prims.b2t (Inl? uu___159018) }) ->...
(declare-fun Tm_arrow_33c5389e8c042e819d87a774e0987a42 () Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_33c5389e8c042e819d87a774e0987a42
;;; Fact-ids: Name FStar.Pervasives.__proj__Inl__item__v; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_33c5389e8c042e819d87a774e0987a42
Tm_type)
:named kinding_Tm_arrow_33c5389e8c042e819d87a774e0987a42))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.__proj__Inl__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_33c5389e8c042e819d87a774e0987a42)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_33c5389e8c042e819d87a774e0987a42))
:qid FStar.Pervasives_pre_typing_Tm_arrow_33c5389e8c042e819d87a774e0987a42))
:named FStar.Pervasives_pre_typing_Tm_arrow_33c5389e8c042e819d87a774e0987a42))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_33c5389e8c042e819d87a774e0987a42
;;; Fact-ids: Name FStar.Pervasives.__proj__Inl__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_33c5389e8c042e819d87a774e0987a42)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid FStar.Pervasives_interpretation_Tm_arrow_33c5389e8c042e819d87a774e0987a42.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_33c5389e8c042e819d87a774e0987a42))
:qid FStar.Pervasives_interpretation_Tm_arrow_33c5389e8c042e819d87a774e0987a42))
:named FStar.Pervasives_interpretation_Tm_arrow_33c5389e8c042e819d87a774e0987a42))
(declare-fun FStar.Pervasives.__proj__Inl__item__v@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.__proj__Inl__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.__proj__Inl__item__v@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.__proj__Inl__item__v @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.__proj__Inl__item__v@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.__proj__Inl__item__v @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.__proj__Inl__item__v))
:named token_correspondence_FStar.Pervasives.__proj__Inl__item__v))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Inl__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.__proj__Inl__item__v@tok
Tm_arrow_33c5389e8c042e819d87a774e0987a42))
 

:pattern ((ApplyTT FStar.Pervasives.__proj__Inl__item__v@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.__proj__Inl__item__v@tok))
:qid function_token_typing_FStar.Pervasives.__proj__Inl__item__v))
:named function_token_typing_FStar.Pervasives.__proj__Inl__item__v))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Inl__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives_Tm_refine_85e0cc884f8457202f90cd77f23733ba @x0
@x1)))
(HasType (FStar.Pervasives.__proj__Inl__item__v @x0
@x1
@x2)
@x0))
 

:pattern ((FStar.Pervasives.__proj__Inl__item__v @x0
@x1
@x2))
:qid typing_FStar.Pervasives.__proj__Inl__item__v))
:named typing_FStar.Pervasives.__proj__Inl__item__v))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.__proj__Inl__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.__proj__Inl__item__v @x0
@x1
@x2)
(FStar.Pervasives.Inl_v @x2))
 

:pattern ((FStar.Pervasives.__proj__Inl__item__v @x0
@x1
@x2))
:qid proj_equation_FStar.Pervasives.Inl_v))
:named proj_equation_FStar.Pervasives.Inl_v))

; </end encoding FStar.Pervasives.__proj__Inl__item__v>

; <Skipped FStar.Pervasives.__proj__Inl__item__v/>

; <Start encoding FStar.Pervasives.uu___is_Inr>
(declare-fun FStar.Pervasives.uu___is_Inr (Term Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Inr@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.uu___is_Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.uu___is_Inr@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.uu___is_Inr @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.uu___is_Inr@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.uu___is_Inr @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.uu___is_Inr))
:named token_correspondence_FStar.Pervasives.uu___is_Inr))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.uu___is_Inr@tok
(Tm_arrow_59435ca7efae8c5a13162daf50ca7594 Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.uu___is_Inr@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.uu___is_Inr@tok))
:qid function_token_typing_FStar.Pervasives.uu___is_Inr))
:named function_token_typing_FStar.Pervasives.uu___is_Inr))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.either @x0
@x1)))
(HasType (FStar.Pervasives.uu___is_Inr @x0
@x1
@x2)
Prims.bool))
 

:pattern ((FStar.Pervasives.uu___is_Inr @x0
@x1
@x2))
:qid typing_FStar.Pervasives.uu___is_Inr))
:named typing_FStar.Pervasives.uu___is_Inr))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.uu___is_Inr; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.uu___is_Inr @x0
@x1
@x2)
(BoxBool (is-FStar.Pervasives.Inr @x2)))
 

:pattern ((FStar.Pervasives.uu___is_Inr @x0
@x1
@x2))
:qid disc_equation_FStar.Pervasives.Inr))
:named disc_equation_FStar.Pervasives.Inr))

; </end encoding FStar.Pervasives.uu___is_Inr>

; <Skipped FStar.Pervasives.uu___is_Inr/>

; <Start encoding FStar.Pervasives.__proj__Inr__item__v>
(declare-fun FStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.__proj__Inr__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (FStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517 @x0
@x1)
Tm_type)
 

:pattern ((HasType (FStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517 @x0
@x1)
Tm_type))
:qid refinement_kinding_FStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517))
:named refinement_kinding_FStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: Name FStar.Pervasives.__proj__Inr__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (exists ((@x2 Term))
 (! (and (HasType @x2
(FStar.Pervasives.either @x0
@x1))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(224,4-224,7); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(224,4-224,7)
(BoxBool_proj_0 (FStar.Pervasives.uu___is_Inr @x0
@x1
@x2))
)
 
;;no pats
:qid ref_valid_FStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517.1))
(Valid (FStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517 @x0
@x1)))
 

:pattern ((Valid (FStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517 @x0
@x1)))
:qid ref_valid_FStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517))
:named ref_valid_FStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517))
;;;;;;;;;;;;;;;;(uu___159047:FStar.Pervasives.either 'a 'b{ Prims.b2t (Inr? uu___159047) })
;;; Fact-ids: Name FStar.Pervasives.__proj__Inr__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(FStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.either @x2
@x3))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(224,4-224,7); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(224,4-224,7)
(BoxBool_proj_0 (FStar.Pervasives.uu___is_Inr @x2
@x3
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517 @x2
@x3)))
:qid refinement_interpretation_FStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517))
:named refinement_interpretation_FStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517))
;;;;;;;;;;;;;;;;haseq for FStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517
;;; Fact-ids: Name FStar.Pervasives.__proj__Inr__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (FStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517 @x0
@x1)))
(Valid (Prims.hasEq (FStar.Pervasives.either @x0
@x1))))
 

:pattern ((Valid (Prims.hasEq (FStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517 @x0
@x1))))
:qid haseqFStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517))
:named haseqFStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517))
(declare-fun FStar.Pervasives.__proj__Inr__item__v (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:(uu___159066:FStar.Pervasives.either 'a 'b{ Prims.b2t (Inr? uu___159066) }) ->...
(declare-fun Tm_arrow_c3d46b8ae03d5e5761b37a519c1896ea () Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_c3d46b8ae03d5e5761b37a519c1896ea
;;; Fact-ids: Name FStar.Pervasives.__proj__Inr__item__v; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_c3d46b8ae03d5e5761b37a519c1896ea
Tm_type)
:named kinding_Tm_arrow_c3d46b8ae03d5e5761b37a519c1896ea))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.__proj__Inr__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_c3d46b8ae03d5e5761b37a519c1896ea)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_c3d46b8ae03d5e5761b37a519c1896ea))
:qid FStar.Pervasives_pre_typing_Tm_arrow_c3d46b8ae03d5e5761b37a519c1896ea))
:named FStar.Pervasives_pre_typing_Tm_arrow_c3d46b8ae03d5e5761b37a519c1896ea))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c3d46b8ae03d5e5761b37a519c1896ea
;;; Fact-ids: Name FStar.Pervasives.__proj__Inr__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_c3d46b8ae03d5e5761b37a519c1896ea)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517 @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid FStar.Pervasives_interpretation_Tm_arrow_c3d46b8ae03d5e5761b37a519c1896ea.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_c3d46b8ae03d5e5761b37a519c1896ea))
:qid FStar.Pervasives_interpretation_Tm_arrow_c3d46b8ae03d5e5761b37a519c1896ea))
:named FStar.Pervasives_interpretation_Tm_arrow_c3d46b8ae03d5e5761b37a519c1896ea))
(declare-fun FStar.Pervasives.__proj__Inr__item__v@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.__proj__Inr__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.__proj__Inr__item__v@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.__proj__Inr__item__v @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.__proj__Inr__item__v@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.__proj__Inr__item__v @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.__proj__Inr__item__v))
:named token_correspondence_FStar.Pervasives.__proj__Inr__item__v))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Inr__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.__proj__Inr__item__v@tok
Tm_arrow_c3d46b8ae03d5e5761b37a519c1896ea))
 

:pattern ((ApplyTT FStar.Pervasives.__proj__Inr__item__v@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.__proj__Inr__item__v@tok))
:qid function_token_typing_FStar.Pervasives.__proj__Inr__item__v))
:named function_token_typing_FStar.Pervasives.__proj__Inr__item__v))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Inr__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives_Tm_refine_8f1f5f564dae90240db429de2eb41517 @x0
@x1)))
(HasType (FStar.Pervasives.__proj__Inr__item__v @x0
@x1
@x2)
@x1))
 

:pattern ((FStar.Pervasives.__proj__Inr__item__v @x0
@x1
@x2))
:qid typing_FStar.Pervasives.__proj__Inr__item__v))
:named typing_FStar.Pervasives.__proj__Inr__item__v))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.__proj__Inr__item__v; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.__proj__Inr__item__v @x0
@x1
@x2)
(FStar.Pervasives.Inr_v @x2))
 

:pattern ((FStar.Pervasives.__proj__Inr__item__v @x0
@x1
@x2))
:qid proj_equation_FStar.Pervasives.Inr_v))
:named proj_equation_FStar.Pervasives.Inr_v))

; </end encoding FStar.Pervasives.__proj__Inr__item__v>

; <Skipped FStar.Pervasives.__proj__Inr__item__v/>

; <Start encoding FStar.Pervasives.dfst>

(declare-fun FStar.Pervasives.dfst (Term Term Term) Term)


(declare-fun FStar.Pervasives.dfst@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.dfst; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.dfst@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.dfst @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.dfst@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.dfst @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.dfst))
:named token_correspondence_FStar.Pervasives.dfst))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.dfst; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.dfst@tok
Tm_arrow_ec4aa512bc54da67a0356075af124e44))
 

:pattern ((ApplyTT FStar.Pervasives.dfst@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.dfst@tok))
:qid function_token_typing_FStar.Pervasives.dfst))
:named function_token_typing_FStar.Pervasives.dfst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.dfst; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
(HasType @x2
(Prims.dtuple2 @x0
@x1)))
(HasType (FStar.Pervasives.dfst @x0
@x1
@x2)
@x0))
 

:pattern ((FStar.Pervasives.dfst @x0
@x1
@x2))
:qid typing_FStar.Pervasives.dfst))
:named typing_FStar.Pervasives.dfst))

;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.dfst
;;; Fact-ids: Name FStar.Pervasives.dfst; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.dfst @x0
@x1
@x2)
(Prims.__proj__Mkdtuple2__item___1 @x0
@x1
@x2))
 

:pattern ((FStar.Pervasives.dfst @x0
@x1
@x2))
:qid equation_FStar.Pervasives.dfst))
:named equation_FStar.Pervasives.dfst))

; </end encoding FStar.Pervasives.dfst>

; <Start encoding FStar.Pervasives.dsnd>

(declare-fun FStar.Pervasives.dsnd (Term Term Term) Term)


(declare-fun FStar.Pervasives.dsnd@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.dsnd; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.dsnd@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.dsnd @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.dsnd@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.dsnd @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.dsnd))
:named token_correspondence_FStar.Pervasives.dsnd))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.dsnd; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.dsnd@tok
Tm_arrow_2e5fda2477c3f2ade2b68a9685bf6393))
 

:pattern ((ApplyTT FStar.Pervasives.dsnd@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.dsnd@tok))
:qid function_token_typing_FStar.Pervasives.dsnd))
:named function_token_typing_FStar.Pervasives.dsnd))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.dsnd; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
(HasType @x2
(Prims.dtuple2 @x0
@x1)))
(HasType (FStar.Pervasives.dsnd @x0
@x1
@x2)
(ApplyTT @x1
(Prims.__proj__Mkdtuple2__item___1 @x0
@x1
@x2))))
 

:pattern ((FStar.Pervasives.dsnd @x0
@x1
@x2))
:qid typing_FStar.Pervasives.dsnd))
:named typing_FStar.Pervasives.dsnd))

;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.dsnd
;;; Fact-ids: Name FStar.Pervasives.dsnd; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.dsnd @x0
@x1
@x2)
(Prims.__proj__Mkdtuple2__item___2 @x0
@x1
@x2))
 

:pattern ((FStar.Pervasives.dsnd @x0
@x1
@x2))
:qid equation_FStar.Pervasives.dsnd))
:named equation_FStar.Pervasives.dsnd))

; </end encoding FStar.Pervasives.dsnd>

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple3@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple3@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple3@x2 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple3@tok () Term)
;;;;;;;;;;;;;;;;x:a -> uu___159142:b x -> Prims.Tot Type
(declare-fun Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 (Term Term) Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;_1:a -> _2:b _1 -> _3:c _1 _2 -> Prims.Tot (FStar.Pervasives.dtuple3 c)
(declare-fun Tm_arrow_51228bc6fe187c605830950e4b63d461 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkdtuple3
(declare-fun FStar.Pervasives.Mkdtuple3@tok () Term)

; <Start encoding FStar.Pervasives.dtuple3>

; <start constructor FStar.Pervasives.dtuple3>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 1834
(Term_constr_id (FStar.Pervasives.dtuple3 @x0
@x1
@x2)))
 

:pattern ((FStar.Pervasives.dtuple3 @x0
@x1
@x2))
:qid constructor_distinct_FStar.Pervasives.dtuple3))
:named constructor_distinct_FStar.Pervasives.dtuple3))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1834)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.dtuple3))))

; </end constructor FStar.Pervasives.dtuple3>
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (= 1835
(Term_constr_id FStar.Pervasives.dtuple3@tok))
:named fresh_token_FStar.Pervasives.dtuple3@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.dtuple3@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.dtuple3 @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.dtuple3@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.dtuple3 @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.dtuple3@tok))
:named token_correspondence_FStar.Pervasives.dtuple3@tok))

;;;;;;;;;;;;;;;;kinding_Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59))
:named kinding_Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x2
@x3)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59))
:named FStar.Pervasives_pre_typing_Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x1
@x2))
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
@x2)
(HasType @x4
(ApplyTT @x1
@x3)))
(HasType (ApplyTT (ApplyTT @x0
@x3)
@x4)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT @x0
@x3)
@x4))
:qid FStar.Pervasives_interpretation_Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x1
@x2)))
:qid FStar.Pervasives_interpretation_Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59))
:named FStar.Pervasives_interpretation_Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.dtuple3@tok))
:named pre_kinding_FStar.Pervasives.dtuple3@tok))
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
(HasType @x2
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x1
@x0)))
(HasType (FStar.Pervasives.dtuple3 @x0
@x1
@x2)
Tm_type))
 

:pattern ((FStar.Pervasives.dtuple3 @x0
@x1
@x2))
:qid kinding_FStar.Pervasives.dtuple3@tok))
:named kinding_FStar.Pervasives.dtuple3@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.dtuple3 @x2
@x3
@x4))
(= (FStar.Pervasives.dtuple3 @x2
@x3
@x4)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.dtuple3 @x2
@x3
@x4)))
:qid FStar.Pervasives_pretyping_a5299c19d6dd1bceb5aa4630d018b183))
:named FStar.Pervasives_pretyping_a5299c19d6dd1bceb5aa4630d018b183))

; </end encoding FStar.Pervasives.dtuple3>

; <Start encoding FStar.Pervasives.Mkdtuple3>

; <start constructor FStar.Pervasives.Mkdtuple3>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= 1843
(Term_constr_id (FStar.Pervasives.Mkdtuple3 @x0
@x1
@x2
@x3
@x4
@x5)))
 

:pattern ((FStar.Pervasives.Mkdtuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid constructor_distinct_FStar.Pervasives.Mkdtuple3))
:named constructor_distinct_FStar.Pervasives.Mkdtuple3))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Mkdtuple3_a (FStar.Pervasives.Mkdtuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x0)
 

:pattern ((FStar.Pervasives.Mkdtuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Mkdtuple3_a))
:named projection_inverse_FStar.Pervasives.Mkdtuple3_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Mkdtuple3_b (FStar.Pervasives.Mkdtuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x1)
 

:pattern ((FStar.Pervasives.Mkdtuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Mkdtuple3_b))
:named projection_inverse_FStar.Pervasives.Mkdtuple3_b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Mkdtuple3_c (FStar.Pervasives.Mkdtuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x2)
 

:pattern ((FStar.Pervasives.Mkdtuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Mkdtuple3_c))
:named projection_inverse_FStar.Pervasives.Mkdtuple3_c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Mkdtuple3__1 (FStar.Pervasives.Mkdtuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x3)
 

:pattern ((FStar.Pervasives.Mkdtuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Mkdtuple3__1))
:named projection_inverse_FStar.Pervasives.Mkdtuple3__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Mkdtuple3__2 (FStar.Pervasives.Mkdtuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x4)
 

:pattern ((FStar.Pervasives.Mkdtuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Mkdtuple3__2))
:named projection_inverse_FStar.Pervasives.Mkdtuple3__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Mkdtuple3__3 (FStar.Pervasives.Mkdtuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x5)
 

:pattern ((FStar.Pervasives.Mkdtuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Mkdtuple3__3))
:named projection_inverse_FStar.Pervasives.Mkdtuple3__3))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1843)
(= __@x0
(FStar.Pervasives.Mkdtuple3 (FStar.Pervasives.Mkdtuple3_a __@x0)
(FStar.Pervasives.Mkdtuple3_b __@x0)
(FStar.Pervasives.Mkdtuple3_c __@x0)
(FStar.Pervasives.Mkdtuple3__1 __@x0)
(FStar.Pervasives.Mkdtuple3__2 __@x0)
(FStar.Pervasives.Mkdtuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple3>




;;;;;;;;;;;;;;;;kinding_Tm_arrow_51228bc6fe187c605830950e4b63d461
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_51228bc6fe187c605830950e4b63d461
Tm_type)
:named kinding_Tm_arrow_51228bc6fe187c605830950e4b63d461))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_51228bc6fe187c605830950e4b63d461)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_51228bc6fe187c605830950e4b63d461))
:qid FStar.Pervasives_pre_typing_Tm_arrow_51228bc6fe187c605830950e4b63d461))
:named FStar.Pervasives_pre_typing_Tm_arrow_51228bc6fe187c605830950e4b63d461))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_51228bc6fe187c605830950e4b63d461
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_51228bc6fe187c605830950e4b63d461)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasType @x3
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x2
@x1))
(HasType @x4
@x1)
(HasType @x5
(ApplyTT @x2
@x4))
(HasType @x6
(ApplyTT (ApplyTT @x3
@x4)
@x5)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
(FStar.Pervasives.dtuple3 @x1
@x2
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))
:qid FStar.Pervasives_interpretation_Tm_arrow_51228bc6fe187c605830950e4b63d461.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_51228bc6fe187c605830950e4b63d461))
:qid FStar.Pervasives_interpretation_Tm_arrow_51228bc6fe187c605830950e4b63d461))
:named FStar.Pervasives_interpretation_Tm_arrow_51228bc6fe187c605830950e4b63d461))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (= 1850
(Term_constr_id FStar.Pervasives.Mkdtuple3@tok))
:named fresh_token_FStar.Pervasives.Mkdtuple3@tok))


;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Mkdtuple3@tok
Tm_arrow_51228bc6fe187c605830950e4b63d461))
 

:pattern ((ApplyTT FStar.Pervasives.Mkdtuple3@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Mkdtuple3@tok))
:qid typing_tok_FStar.Pervasives.Mkdtuple3@tok))
:named typing_tok_FStar.Pervasives.Mkdtuple3@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Mkdtuple3@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
(FStar.Pervasives.Mkdtuple3 @x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Mkdtuple3@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5))
:qid equality_tok_FStar.Pervasives.Mkdtuple3@tok))
:named equality_tok_FStar.Pervasives.Mkdtuple3@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasTypeFuel @u0
@x3
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x2
@x1))
(HasTypeFuel @u0
@x4
@x1)
(HasTypeFuel @u0
@x5
(ApplyTT @x2
@x4))
(HasTypeFuel @u0
@x6
(ApplyTT (ApplyTT @x3
@x4)
@x5)))
(HasTypeFuel @u0
(FStar.Pervasives.Mkdtuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.dtuple3 @x1
@x2
@x3)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Mkdtuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.dtuple3 @x1
@x2
@x3)))
:qid data_typing_intro_FStar.Pervasives.Mkdtuple3@tok))
:named data_typing_intro_FStar.Pervasives.Mkdtuple3@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Mkdtuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.dtuple3 @x7
@x8
@x9))
(and (HasTypeFuel @u0
@x9
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x2
@x1))
(HasTypeFuel @u0
@x6
(ApplyTT (ApplyTT @x9
@x4)
@x5))
(HasTypeFuel @u0
@x8
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasTypeFuel @u0
@x3
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x8
@x1))
(HasTypeFuel @u0
@x5
(ApplyTT @x8
@x4))
(HasTypeFuel @u0
@x7
Tm_type)
(HasTypeFuel @u0
@x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x7))
(HasTypeFuel @u0
@x3
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x2
@x7))
(HasTypeFuel @u0
@x4
@x7)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasTypeFuel @u0
@x3
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x2
@x1))
(HasTypeFuel @u0
@x4
@x1)
(HasTypeFuel @u0
@x5
(ApplyTT @x2
@x4))
(HasTypeFuel @u0
@x6
(ApplyTT (ApplyTT @x3
@x4)
@x5))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Mkdtuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.dtuple3 @x7
@x8
@x9)))
:qid data_elim_FStar.Pervasives.Mkdtuple3))
:named data_elim_FStar.Pervasives.Mkdtuple3))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Mkdtuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.dtuple3 @x7
@x8
@x9))
(and (Valid (Precedes @x4
(FStar.Pervasives.Mkdtuple3 @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Precedes @x5
(FStar.Pervasives.Mkdtuple3 @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Precedes @x6
(FStar.Pervasives.Mkdtuple3 @x1
@x2
@x3
@x4
@x5
@x6)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Mkdtuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.dtuple3 @x7
@x8
@x9)))
:qid subterm_ordering_FStar.Pervasives.Mkdtuple3))
:named subterm_ordering_FStar.Pervasives.Mkdtuple3))

; </end encoding FStar.Pervasives.Mkdtuple3>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.dtuple3; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.dtuple3 @x2
@x3
@x4))
(and (is-FStar.Pervasives.Mkdtuple3 @x1)
(= @x2
(FStar.Pervasives.Mkdtuple3_a @x1))
(= @x3
(FStar.Pervasives.Mkdtuple3_b @x1))
(= @x4
(FStar.Pervasives.Mkdtuple3_c @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.dtuple3 @x2
@x3
@x4)))
:qid fuel_guarded_inversion_FStar.Pervasives.dtuple3))
:named fuel_guarded_inversion_FStar.Pervasives.dtuple3))

; </end encoding >

; <Start encoding FStar.Pervasives.dtuple3_haseq>


;;;;;;;;;;;;;;;;Assumption: dtuple3_haseq
;;; Fact-ids: Name FStar.Pervasives.dtuple3_haseq; Namespace FStar.Pervasives
(assert (! 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
(HasType @x2
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x1
@x0))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29)
(forall ((@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x3
@x0)
(HasType @x4
(ApplyTT @x1
@x3))
(HasType @x5
(ApplyTT (ApplyTT @x2
@x3)
@x4)))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29)
(and 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29)
(Prims.hasEq @x0)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29)
(Prims.hasEq (ApplyTT @x1
@x3))
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29)
(Prims.hasEq (ApplyTT (ApplyTT @x2
@x3)
@x4))
)
)
)
 
;;no pats
:qid assumption_FStar.Pervasives.dtuple3_haseq.1))
)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(235,8-241,29)
(Prims.hasEq (FStar.Pervasives.dtuple3 @x0
@x1
@x2))
)
)
 

:pattern ((Prims.hasEq (FStar.Pervasives.dtuple3 @x0
@x1
@x2)))
:qid assumption_FStar.Pervasives.dtuple3_haseq))

:named assumption_FStar.Pervasives.dtuple3_haseq))

; </end encoding FStar.Pervasives.dtuple3_haseq>

; <Start encoding FStar.Pervasives.uu___is_Mkdtuple3>


(declare-fun FStar.Pervasives.uu___is_Mkdtuple3 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:FStar.Pervasives.dtuple3 c -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_25c72f362ef3d8a23658a89597e3665d (Term) Term)


;;;;;;;;;;;;;;;;kinding_Tm_arrow_25c72f362ef3d8a23658a89597e3665d
;;; Fact-ids: Name FStar.Pervasives.uu___is_Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_25c72f362ef3d8a23658a89597e3665d @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_25c72f362ef3d8a23658a89597e3665d @x0)
Tm_type))
:qid kinding_Tm_arrow_25c72f362ef3d8a23658a89597e3665d))
:named kinding_Tm_arrow_25c72f362ef3d8a23658a89597e3665d))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.uu___is_Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_25c72f362ef3d8a23658a89597e3665d @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_25c72f362ef3d8a23658a89597e3665d @x2)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_25c72f362ef3d8a23658a89597e3665d))
:named FStar.Pervasives_pre_typing_Tm_arrow_25c72f362ef3d8a23658a89597e3665d))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_25c72f362ef3d8a23658a89597e3665d
;;; Fact-ids: Name FStar.Pervasives.uu___is_Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_25c72f362ef3d8a23658a89597e3665d @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x2))
(HasType @x4
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x3
@x2))
(HasType @x5
(FStar.Pervasives.dtuple3 @x2
@x3
@x4)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5))
:qid FStar.Pervasives_interpretation_Tm_arrow_25c72f362ef3d8a23658a89597e3665d.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_25c72f362ef3d8a23658a89597e3665d @x1)))
:qid FStar.Pervasives_interpretation_Tm_arrow_25c72f362ef3d8a23658a89597e3665d))
:named FStar.Pervasives_interpretation_Tm_arrow_25c72f362ef3d8a23658a89597e3665d))
(declare-fun FStar.Pervasives.uu___is_Mkdtuple3@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.uu___is_Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.uu___is_Mkdtuple3@tok
@x0)
@x1)
@x2)
@x3)
(FStar.Pervasives.uu___is_Mkdtuple3 @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.uu___is_Mkdtuple3@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((FStar.Pervasives.uu___is_Mkdtuple3 @x0
@x1
@x2
@x3))
:qid token_correspondence_FStar.Pervasives.uu___is_Mkdtuple3))
:named token_correspondence_FStar.Pervasives.uu___is_Mkdtuple3))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.uu___is_Mkdtuple3@tok
(Tm_arrow_25c72f362ef3d8a23658a89597e3665d Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.uu___is_Mkdtuple3@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.uu___is_Mkdtuple3@tok))
:qid function_token_typing_FStar.Pervasives.uu___is_Mkdtuple3))
:named function_token_typing_FStar.Pervasives.uu___is_Mkdtuple3))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
(HasType @x2
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x1
@x0))
(HasType @x3
(FStar.Pervasives.dtuple3 @x0
@x1
@x2)))
(HasType (FStar.Pervasives.uu___is_Mkdtuple3 @x0
@x1
@x2
@x3)
Prims.bool))
 

:pattern ((FStar.Pervasives.uu___is_Mkdtuple3 @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives.uu___is_Mkdtuple3))
:named typing_FStar.Pervasives.uu___is_Mkdtuple3))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.uu___is_Mkdtuple3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.uu___is_Mkdtuple3 @x0
@x1
@x2
@x3)
(BoxBool (is-FStar.Pervasives.Mkdtuple3 @x3)))
 

:pattern ((FStar.Pervasives.uu___is_Mkdtuple3 @x0
@x1
@x2
@x3))
:qid disc_equation_FStar.Pervasives.Mkdtuple3))
:named disc_equation_FStar.Pervasives.Mkdtuple3))

; </end encoding FStar.Pervasives.uu___is_Mkdtuple3>

; <Skipped FStar.Pervasives.uu___is_Mkdtuple3/>

; <Start encoding FStar.Pervasives.__proj__Mkdtuple3__item___1>


(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:FStar.Pervasives.dtuple3 c -> Prims.Tot a
(declare-fun Tm_arrow_370eef0be624c130308f9f3e7fdda8fb () Term)


;;;;;;;;;;;;;;;;kinding_Tm_arrow_370eef0be624c130308f9f3e7fdda8fb
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___1; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_370eef0be624c130308f9f3e7fdda8fb
Tm_type)
:named kinding_Tm_arrow_370eef0be624c130308f9f3e7fdda8fb))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___1; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_370eef0be624c130308f9f3e7fdda8fb)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_370eef0be624c130308f9f3e7fdda8fb))
:qid FStar.Pervasives_pre_typing_Tm_arrow_370eef0be624c130308f9f3e7fdda8fb))
:named FStar.Pervasives_pre_typing_Tm_arrow_370eef0be624c130308f9f3e7fdda8fb))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_370eef0be624c130308f9f3e7fdda8fb
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___1; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_370eef0be624c130308f9f3e7fdda8fb)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasType @x3
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x2
@x1))
(HasType @x4
(FStar.Pervasives.dtuple3 @x1
@x2
@x3)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid FStar.Pervasives_interpretation_Tm_arrow_370eef0be624c130308f9f3e7fdda8fb.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_370eef0be624c130308f9f3e7fdda8fb))
:qid FStar.Pervasives_interpretation_Tm_arrow_370eef0be624c130308f9f3e7fdda8fb))
:named FStar.Pervasives_interpretation_Tm_arrow_370eef0be624c130308f9f3e7fdda8fb))
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___1; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.__proj__Mkdtuple3__item___1@tok
@x0)
@x1)
@x2)
@x3)
(FStar.Pervasives.__proj__Mkdtuple3__item___1 @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.__proj__Mkdtuple3__item___1@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((FStar.Pervasives.__proj__Mkdtuple3__item___1 @x0
@x1
@x2
@x3))
:qid token_correspondence_FStar.Pervasives.__proj__Mkdtuple3__item___1))
:named token_correspondence_FStar.Pervasives.__proj__Mkdtuple3__item___1))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___1; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.__proj__Mkdtuple3__item___1@tok
Tm_arrow_370eef0be624c130308f9f3e7fdda8fb))
 

:pattern ((ApplyTT FStar.Pervasives.__proj__Mkdtuple3__item___1@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.__proj__Mkdtuple3__item___1@tok))
:qid function_token_typing_FStar.Pervasives.__proj__Mkdtuple3__item___1))
:named function_token_typing_FStar.Pervasives.__proj__Mkdtuple3__item___1))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___1; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
(HasType @x2
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x1
@x0))
(HasType @x3
(FStar.Pervasives.dtuple3 @x0
@x1
@x2)))
(HasType (FStar.Pervasives.__proj__Mkdtuple3__item___1 @x0
@x1
@x2
@x3)
@x0))
 

:pattern ((FStar.Pervasives.__proj__Mkdtuple3__item___1 @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives.__proj__Mkdtuple3__item___1))
:named typing_FStar.Pervasives.__proj__Mkdtuple3__item___1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___1; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.__proj__Mkdtuple3__item___1 @x0
@x1
@x2
@x3)
(FStar.Pervasives.Mkdtuple3__1 @x3))
 

:pattern ((FStar.Pervasives.__proj__Mkdtuple3__item___1 @x0
@x1
@x2
@x3))
:qid proj_equation_FStar.Pervasives.Mkdtuple3__1))
:named proj_equation_FStar.Pervasives.Mkdtuple3__1))

; </end encoding FStar.Pervasives.__proj__Mkdtuple3__item___1>

; <Skipped FStar.Pervasives.__proj__Mkdtuple3__item___1/>

; <Start encoding FStar.Pervasives.__proj__Mkdtuple3__item___2>


(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:FStar.Pervasives.dtuple3 c -> Prims.Tot (b (Mkdtuple3?._1 projectee))
(declare-fun Tm_arrow_c314ab62524b1a2d1997954ac4c1ae99 () Term)


;;;;;;;;;;;;;;;;kinding_Tm_arrow_c314ab62524b1a2d1997954ac4c1ae99
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___2; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_c314ab62524b1a2d1997954ac4c1ae99
Tm_type)
:named kinding_Tm_arrow_c314ab62524b1a2d1997954ac4c1ae99))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___2; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_c314ab62524b1a2d1997954ac4c1ae99)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_c314ab62524b1a2d1997954ac4c1ae99))
:qid FStar.Pervasives_pre_typing_Tm_arrow_c314ab62524b1a2d1997954ac4c1ae99))
:named FStar.Pervasives_pre_typing_Tm_arrow_c314ab62524b1a2d1997954ac4c1ae99))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c314ab62524b1a2d1997954ac4c1ae99
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___2; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_c314ab62524b1a2d1997954ac4c1ae99)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasType @x3
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x2
@x1))
(HasType @x4
(FStar.Pervasives.dtuple3 @x1
@x2
@x3)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
(ApplyTT @x2
(FStar.Pervasives.__proj__Mkdtuple3__item___1 @x1
@x2
@x3
@x4))))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid FStar.Pervasives_interpretation_Tm_arrow_c314ab62524b1a2d1997954ac4c1ae99.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_c314ab62524b1a2d1997954ac4c1ae99))
:qid FStar.Pervasives_interpretation_Tm_arrow_c314ab62524b1a2d1997954ac4c1ae99))
:named FStar.Pervasives_interpretation_Tm_arrow_c314ab62524b1a2d1997954ac4c1ae99))
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___2; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.__proj__Mkdtuple3__item___2@tok
@x0)
@x1)
@x2)
@x3)
(FStar.Pervasives.__proj__Mkdtuple3__item___2 @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.__proj__Mkdtuple3__item___2@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((FStar.Pervasives.__proj__Mkdtuple3__item___2 @x0
@x1
@x2
@x3))
:qid token_correspondence_FStar.Pervasives.__proj__Mkdtuple3__item___2))
:named token_correspondence_FStar.Pervasives.__proj__Mkdtuple3__item___2))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___2; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.__proj__Mkdtuple3__item___2@tok
Tm_arrow_c314ab62524b1a2d1997954ac4c1ae99))
 

:pattern ((ApplyTT FStar.Pervasives.__proj__Mkdtuple3__item___2@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.__proj__Mkdtuple3__item___2@tok))
:qid function_token_typing_FStar.Pervasives.__proj__Mkdtuple3__item___2))
:named function_token_typing_FStar.Pervasives.__proj__Mkdtuple3__item___2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___2; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
(HasType @x2
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x1
@x0))
(HasType @x3
(FStar.Pervasives.dtuple3 @x0
@x1
@x2)))
(HasType (FStar.Pervasives.__proj__Mkdtuple3__item___2 @x0
@x1
@x2
@x3)
(ApplyTT @x1
(FStar.Pervasives.__proj__Mkdtuple3__item___1 @x0
@x1
@x2
@x3))))
 

:pattern ((FStar.Pervasives.__proj__Mkdtuple3__item___2 @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives.__proj__Mkdtuple3__item___2))
:named typing_FStar.Pervasives.__proj__Mkdtuple3__item___2))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___2; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.__proj__Mkdtuple3__item___2 @x0
@x1
@x2
@x3)
(FStar.Pervasives.Mkdtuple3__2 @x3))
 

:pattern ((FStar.Pervasives.__proj__Mkdtuple3__item___2 @x0
@x1
@x2
@x3))
:qid proj_equation_FStar.Pervasives.Mkdtuple3__2))
:named proj_equation_FStar.Pervasives.Mkdtuple3__2))

; </end encoding FStar.Pervasives.__proj__Mkdtuple3__item___2>

; <Skipped FStar.Pervasives.__proj__Mkdtuple3__item___2/>

; <Start encoding FStar.Pervasives.__proj__Mkdtuple3__item___3>


(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:FStar.Pervasives.dtuple3 c ->...
(declare-fun Tm_arrow_bec8a4f6afbb1e18e2d9aca8cce42b29 () Term)


;;;;;;;;;;;;;;;;kinding_Tm_arrow_bec8a4f6afbb1e18e2d9aca8cce42b29
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___3; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_bec8a4f6afbb1e18e2d9aca8cce42b29
Tm_type)
:named kinding_Tm_arrow_bec8a4f6afbb1e18e2d9aca8cce42b29))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___3; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_bec8a4f6afbb1e18e2d9aca8cce42b29)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_bec8a4f6afbb1e18e2d9aca8cce42b29))
:qid FStar.Pervasives_pre_typing_Tm_arrow_bec8a4f6afbb1e18e2d9aca8cce42b29))
:named FStar.Pervasives_pre_typing_Tm_arrow_bec8a4f6afbb1e18e2d9aca8cce42b29))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_bec8a4f6afbb1e18e2d9aca8cce42b29
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_bec8a4f6afbb1e18e2d9aca8cce42b29)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasType @x3
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x2
@x1))
(HasType @x4
(FStar.Pervasives.dtuple3 @x1
@x2
@x3)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
(ApplyTT (ApplyTT @x3
(FStar.Pervasives.__proj__Mkdtuple3__item___1 @x1
@x2
@x3
@x4))
(FStar.Pervasives.__proj__Mkdtuple3__item___2 @x1
@x2
@x3
@x4))))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid FStar.Pervasives_interpretation_Tm_arrow_bec8a4f6afbb1e18e2d9aca8cce42b29.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_bec8a4f6afbb1e18e2d9aca8cce42b29))
:qid FStar.Pervasives_interpretation_Tm_arrow_bec8a4f6afbb1e18e2d9aca8cce42b29))
:named FStar.Pervasives_interpretation_Tm_arrow_bec8a4f6afbb1e18e2d9aca8cce42b29))
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.__proj__Mkdtuple3__item___3@tok
@x0)
@x1)
@x2)
@x3)
(FStar.Pervasives.__proj__Mkdtuple3__item___3 @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.__proj__Mkdtuple3__item___3@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((FStar.Pervasives.__proj__Mkdtuple3__item___3 @x0
@x1
@x2
@x3))
:qid token_correspondence_FStar.Pervasives.__proj__Mkdtuple3__item___3))
:named token_correspondence_FStar.Pervasives.__proj__Mkdtuple3__item___3))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.__proj__Mkdtuple3__item___3@tok
Tm_arrow_bec8a4f6afbb1e18e2d9aca8cce42b29))
 

:pattern ((ApplyTT FStar.Pervasives.__proj__Mkdtuple3__item___3@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.__proj__Mkdtuple3__item___3@tok))
:qid function_token_typing_FStar.Pervasives.__proj__Mkdtuple3__item___3))
:named function_token_typing_FStar.Pervasives.__proj__Mkdtuple3__item___3))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
(HasType @x2
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x1
@x0))
(HasType @x3
(FStar.Pervasives.dtuple3 @x0
@x1
@x2)))
(HasType (FStar.Pervasives.__proj__Mkdtuple3__item___3 @x0
@x1
@x2
@x3)
(ApplyTT (ApplyTT @x2
(FStar.Pervasives.__proj__Mkdtuple3__item___1 @x0
@x1
@x2
@x3))
(FStar.Pervasives.__proj__Mkdtuple3__item___2 @x0
@x1
@x2
@x3))))
 

:pattern ((FStar.Pervasives.__proj__Mkdtuple3__item___3 @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives.__proj__Mkdtuple3__item___3))
:named typing_FStar.Pervasives.__proj__Mkdtuple3__item___3))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple3__item___3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.__proj__Mkdtuple3__item___3 @x0
@x1
@x2
@x3)
(FStar.Pervasives.Mkdtuple3__3 @x3))
 

:pattern ((FStar.Pervasives.__proj__Mkdtuple3__item___3 @x0
@x1
@x2
@x3))
:qid proj_equation_FStar.Pervasives.Mkdtuple3__3))
:named proj_equation_FStar.Pervasives.Mkdtuple3__3))

; </end encoding FStar.Pervasives.__proj__Mkdtuple3__item___3>

; <Skipped FStar.Pervasives.__proj__Mkdtuple3__item___3/>

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple4@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple4@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple4@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple4@x3 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple4@tok () Term)
;;;;;;;;;;;;;;;;x:a -> y:b x -> z:c x y -> Prims.Tot Type
(declare-fun Tm_arrow_dbf39bf049d72c3088e1ed84d246952d (Term Term Term) Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;_1:a -> _2:b _1 -> _3:c _1 _2 -> _4:d _1 _2 _3 -> Prims.Tot (FStar.Pervasives.dtuple4 d)
(declare-fun Tm_arrow_bc432a638e8ded95e6543c5ef7d6cefa () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkdtuple4
(declare-fun FStar.Pervasives.Mkdtuple4@tok () Term)

; <Start encoding FStar.Pervasives.dtuple4>

; <start constructor FStar.Pervasives.dtuple4>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 1881
(Term_constr_id (FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3)))
 

:pattern ((FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3))
:qid constructor_distinct_FStar.Pervasives.dtuple4))
:named constructor_distinct_FStar.Pervasives.dtuple4))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1881)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.dtuple4))))

; </end constructor FStar.Pervasives.dtuple4>
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (= 1882
(Term_constr_id FStar.Pervasives.dtuple4@tok))
:named fresh_token_FStar.Pervasives.dtuple4@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.dtuple4@tok
@x0)
@x1)
@x2)
@x3)
(FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.dtuple4@tok
@x0)
@x1)
@x2)
@x3))

:pattern ((FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3))
:qid token_correspondence_FStar.Pervasives.dtuple4@tok))
:named token_correspondence_FStar.Pervasives.dtuple4@tok))


;;;;;;;;;;;;;;;;kinding_Tm_arrow_dbf39bf049d72c3088e1ed84d246952d
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_dbf39bf049d72c3088e1ed84d246952d))
:named kinding_Tm_arrow_dbf39bf049d72c3088e1ed84d246952d))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x2
@x3
@x4)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_dbf39bf049d72c3088e1ed84d246952d))
:named FStar.Pervasives_pre_typing_Tm_arrow_dbf39bf049d72c3088e1ed84d246952d))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_dbf39bf049d72c3088e1ed84d246952d
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x1
@x2
@x3))
(forall ((@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x4
@x3)
(HasType @x5
(ApplyTT @x2
@x4))
(HasType @x6
(ApplyTT (ApplyTT @x1
@x4)
@x5)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x4)
@x5)
@x6)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x4)
@x5)
@x6))
:qid FStar.Pervasives_interpretation_Tm_arrow_dbf39bf049d72c3088e1ed84d246952d.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x1
@x2
@x3)))
:qid FStar.Pervasives_interpretation_Tm_arrow_dbf39bf049d72c3088e1ed84d246952d))
:named FStar.Pervasives_interpretation_Tm_arrow_dbf39bf049d72c3088e1ed84d246952d))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.dtuple4@tok))
:named pre_kinding_FStar.Pervasives.dtuple4@tok))
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
(HasType @x2
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x1
@x0))
(HasType @x3
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x2
@x1
@x0)))
(HasType (FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3))
:qid kinding_FStar.Pervasives.dtuple4@tok))
:named kinding_FStar.Pervasives.dtuple4@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.dtuple4 @x2
@x3
@x4
@x5))
(= (FStar.Pervasives.dtuple4 @x2
@x3
@x4
@x5)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.dtuple4 @x2
@x3
@x4
@x5)))
:qid FStar.Pervasives_pretyping_cb2c0bca2c2aabdf2d195b0740c049bd))
:named FStar.Pervasives_pretyping_cb2c0bca2c2aabdf2d195b0740c049bd))

; </end encoding FStar.Pervasives.dtuple4>

; <Start encoding FStar.Pervasives.Mkdtuple4>

; <start constructor FStar.Pervasives.Mkdtuple4>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= 1891
(Term_constr_id (FStar.Pervasives.Mkdtuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)))
 

:pattern ((FStar.Pervasives.Mkdtuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid constructor_distinct_FStar.Pervasives.Mkdtuple4))
:named constructor_distinct_FStar.Pervasives.Mkdtuple4))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Mkdtuple4_a (FStar.Pervasives.Mkdtuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
@x0)
 

:pattern ((FStar.Pervasives.Mkdtuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid projection_inverse_FStar.Pervasives.Mkdtuple4_a))
:named projection_inverse_FStar.Pervasives.Mkdtuple4_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Mkdtuple4_b (FStar.Pervasives.Mkdtuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
@x1)
 

:pattern ((FStar.Pervasives.Mkdtuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid projection_inverse_FStar.Pervasives.Mkdtuple4_b))
:named projection_inverse_FStar.Pervasives.Mkdtuple4_b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Mkdtuple4_c (FStar.Pervasives.Mkdtuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
@x2)
 

:pattern ((FStar.Pervasives.Mkdtuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid projection_inverse_FStar.Pervasives.Mkdtuple4_c))
:named projection_inverse_FStar.Pervasives.Mkdtuple4_c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Mkdtuple4_d (FStar.Pervasives.Mkdtuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
@x3)
 

:pattern ((FStar.Pervasives.Mkdtuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid projection_inverse_FStar.Pervasives.Mkdtuple4_d))
:named projection_inverse_FStar.Pervasives.Mkdtuple4_d))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Mkdtuple4__1 (FStar.Pervasives.Mkdtuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
@x4)
 

:pattern ((FStar.Pervasives.Mkdtuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid projection_inverse_FStar.Pervasives.Mkdtuple4__1))
:named projection_inverse_FStar.Pervasives.Mkdtuple4__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Mkdtuple4__2 (FStar.Pervasives.Mkdtuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
@x5)
 

:pattern ((FStar.Pervasives.Mkdtuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid projection_inverse_FStar.Pervasives.Mkdtuple4__2))
:named projection_inverse_FStar.Pervasives.Mkdtuple4__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Mkdtuple4__3 (FStar.Pervasives.Mkdtuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
@x6)
 

:pattern ((FStar.Pervasives.Mkdtuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid projection_inverse_FStar.Pervasives.Mkdtuple4__3))
:named projection_inverse_FStar.Pervasives.Mkdtuple4__3))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.Pervasives.Mkdtuple4__4 (FStar.Pervasives.Mkdtuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
@x7)
 

:pattern ((FStar.Pervasives.Mkdtuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid projection_inverse_FStar.Pervasives.Mkdtuple4__4))
:named projection_inverse_FStar.Pervasives.Mkdtuple4__4))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1891)
(= __@x0
(FStar.Pervasives.Mkdtuple4 (FStar.Pervasives.Mkdtuple4_a __@x0)
(FStar.Pervasives.Mkdtuple4_b __@x0)
(FStar.Pervasives.Mkdtuple4_c __@x0)
(FStar.Pervasives.Mkdtuple4_d __@x0)
(FStar.Pervasives.Mkdtuple4__1 __@x0)
(FStar.Pervasives.Mkdtuple4__2 __@x0)
(FStar.Pervasives.Mkdtuple4__3 __@x0)
(FStar.Pervasives.Mkdtuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple4>






;;;;;;;;;;;;;;;;kinding_Tm_arrow_bc432a638e8ded95e6543c5ef7d6cefa
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_bc432a638e8ded95e6543c5ef7d6cefa
Tm_type)
:named kinding_Tm_arrow_bc432a638e8ded95e6543c5ef7d6cefa))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_bc432a638e8ded95e6543c5ef7d6cefa)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_bc432a638e8ded95e6543c5ef7d6cefa))
:qid FStar.Pervasives_pre_typing_Tm_arrow_bc432a638e8ded95e6543c5ef7d6cefa))
:named FStar.Pervasives_pre_typing_Tm_arrow_bc432a638e8ded95e6543c5ef7d6cefa))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_bc432a638e8ded95e6543c5ef7d6cefa
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_bc432a638e8ded95e6543c5ef7d6cefa)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasType @x3
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x2
@x1))
(HasType @x4
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x3
@x2
@x1))
(HasType @x5
@x1)
(HasType @x6
(ApplyTT @x2
@x5))
(HasType @x7
(ApplyTT (ApplyTT @x3
@x5)
@x6))
(HasType @x8
(ApplyTT (ApplyTT (ApplyTT @x4
@x5)
@x6)
@x7)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
(FStar.Pervasives.dtuple4 @x1
@x2
@x3
@x4)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))
:qid FStar.Pervasives_interpretation_Tm_arrow_bc432a638e8ded95e6543c5ef7d6cefa.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_bc432a638e8ded95e6543c5ef7d6cefa))
:qid FStar.Pervasives_interpretation_Tm_arrow_bc432a638e8ded95e6543c5ef7d6cefa))
:named FStar.Pervasives_interpretation_Tm_arrow_bc432a638e8ded95e6543c5ef7d6cefa))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (= 1900
(Term_constr_id FStar.Pervasives.Mkdtuple4@tok))
:named fresh_token_FStar.Pervasives.Mkdtuple4@tok))



;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Mkdtuple4@tok
Tm_arrow_bc432a638e8ded95e6543c5ef7d6cefa))
 

:pattern ((ApplyTT FStar.Pervasives.Mkdtuple4@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Mkdtuple4@tok))
:qid typing_tok_FStar.Pervasives.Mkdtuple4@tok))
:named typing_tok_FStar.Pervasives.Mkdtuple4@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Mkdtuple4@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
(FStar.Pervasives.Mkdtuple4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Mkdtuple4@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))
:qid equality_tok_FStar.Pervasives.Mkdtuple4@tok))
:named equality_tok_FStar.Pervasives.Mkdtuple4@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasTypeFuel @u0
@x3
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x2
@x1))
(HasTypeFuel @u0
@x4
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x3
@x2
@x1))
(HasTypeFuel @u0
@x5
@x1)
(HasTypeFuel @u0
@x6
(ApplyTT @x2
@x5))
(HasTypeFuel @u0
@x7
(ApplyTT (ApplyTT @x3
@x5)
@x6))
(HasTypeFuel @u0
@x8
(ApplyTT (ApplyTT (ApplyTT @x4
@x5)
@x6)
@x7)))
(HasTypeFuel @u0
(FStar.Pervasives.Mkdtuple4 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(FStar.Pervasives.dtuple4 @x1
@x2
@x3
@x4)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Mkdtuple4 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(FStar.Pervasives.dtuple4 @x1
@x2
@x3
@x4)))
:qid data_typing_intro_FStar.Pervasives.Mkdtuple4@tok))
:named data_typing_intro_FStar.Pervasives.Mkdtuple4@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Mkdtuple4 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(FStar.Pervasives.dtuple4 @x9
@x10
@x11
@x12))
(and (HasTypeFuel @u0
@x12
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x3
@x2
@x1))
(HasTypeFuel @u0
@x8
(ApplyTT (ApplyTT (ApplyTT @x12
@x5)
@x6)
@x7))
(HasTypeFuel @u0
@x11
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x2
@x1))
(HasTypeFuel @u0
@x4
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x11
@x2
@x1))
(HasTypeFuel @u0
@x7
(ApplyTT (ApplyTT @x11
@x5)
@x6))
(HasTypeFuel @u0
@x10
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasTypeFuel @u0
@x3
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x10
@x1))
(HasTypeFuel @u0
@x4
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x3
@x10
@x1))
(HasTypeFuel @u0
@x6
(ApplyTT @x10
@x5))
(HasTypeFuel @u0
@x9
Tm_type)
(HasTypeFuel @u0
@x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x9))
(HasTypeFuel @u0
@x3
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x2
@x9))
(HasTypeFuel @u0
@x4
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x3
@x2
@x9))
(HasTypeFuel @u0
@x5
@x9)
(HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasTypeFuel @u0
@x3
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x2
@x1))
(HasTypeFuel @u0
@x4
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x3
@x2
@x1))
(HasTypeFuel @u0
@x5
@x1)
(HasTypeFuel @u0
@x6
(ApplyTT @x2
@x5))
(HasTypeFuel @u0
@x7
(ApplyTT (ApplyTT @x3
@x5)
@x6))
(HasTypeFuel @u0
@x8
(ApplyTT (ApplyTT (ApplyTT @x4
@x5)
@x6)
@x7))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Mkdtuple4 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(FStar.Pervasives.dtuple4 @x9
@x10
@x11
@x12)))
:qid data_elim_FStar.Pervasives.Mkdtuple4))
:named data_elim_FStar.Pervasives.Mkdtuple4))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Mkdtuple4 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(FStar.Pervasives.dtuple4 @x9
@x10
@x11
@x12))
(and (Valid (Precedes @x5
(FStar.Pervasives.Mkdtuple4 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
(Valid (Precedes @x6
(FStar.Pervasives.Mkdtuple4 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
(Valid (Precedes @x7
(FStar.Pervasives.Mkdtuple4 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
(Valid (Precedes @x8
(FStar.Pervasives.Mkdtuple4 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Mkdtuple4 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(FStar.Pervasives.dtuple4 @x9
@x10
@x11
@x12)))
:qid subterm_ordering_FStar.Pervasives.Mkdtuple4))
:named subterm_ordering_FStar.Pervasives.Mkdtuple4))

; </end encoding FStar.Pervasives.Mkdtuple4>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.dtuple4; Namespace FStar.Pervasives; Name FStar.Pervasives.Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.dtuple4 @x2
@x3
@x4
@x5))
(and (is-FStar.Pervasives.Mkdtuple4 @x1)
(= @x2
(FStar.Pervasives.Mkdtuple4_a @x1))
(= @x3
(FStar.Pervasives.Mkdtuple4_b @x1))
(= @x4
(FStar.Pervasives.Mkdtuple4_c @x1))
(= @x5
(FStar.Pervasives.Mkdtuple4_d @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.dtuple4 @x2
@x3
@x4
@x5)))
:qid fuel_guarded_inversion_FStar.Pervasives.dtuple4))
:named fuel_guarded_inversion_FStar.Pervasives.dtuple4))

; </end encoding >

; <Start encoding FStar.Pervasives.dtuple4_haseq>



;;;;;;;;;;;;;;;;Assumption: dtuple4_haseq
;;; Fact-ids: Name FStar.Pervasives.dtuple4_haseq; Namespace FStar.Pervasives
(assert (! 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
(HasType @x2
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x1
@x0))
(HasType @x3
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x2
@x1
@x0))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29)
(forall ((@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x4
@x0)
(HasType @x5
(ApplyTT @x1
@x4))
(HasType @x6
(ApplyTT (ApplyTT @x2
@x4)
@x5))
(HasType @x7
(ApplyTT (ApplyTT (ApplyTT @x3
@x4)
@x5)
@x6)))

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29)
(and 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29)
(Prims.hasEq @x0)
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29)
(Prims.hasEq (ApplyTT @x1
@x4))
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29)
(Prims.hasEq (ApplyTT (ApplyTT @x2
@x4)
@x5))
)


;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29)
(Prims.hasEq (ApplyTT (ApplyTT (ApplyTT @x3
@x4)
@x5)
@x6))
)
)
)
 
;;no pats
:qid assumption_FStar.Pervasives.dtuple4_haseq.1))
)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(244,8-252,29)
(Prims.hasEq (FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3))
)
)
 

:pattern ((Prims.hasEq (FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3)))
:qid assumption_FStar.Pervasives.dtuple4_haseq))

:named assumption_FStar.Pervasives.dtuple4_haseq))

; </end encoding FStar.Pervasives.dtuple4_haseq>

; <Start encoding FStar.Pervasives.uu___is_Mkdtuple4>



(declare-fun FStar.Pervasives.uu___is_Mkdtuple4 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:FStar.Pervasives.dtuple4 d -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_08bfe555982713e1ba6b9cc3db1f9942 (Term) Term)



;;;;;;;;;;;;;;;;kinding_Tm_arrow_08bfe555982713e1ba6b9cc3db1f9942
;;; Fact-ids: Name FStar.Pervasives.uu___is_Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_08bfe555982713e1ba6b9cc3db1f9942 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_08bfe555982713e1ba6b9cc3db1f9942 @x0)
Tm_type))
:qid kinding_Tm_arrow_08bfe555982713e1ba6b9cc3db1f9942))
:named kinding_Tm_arrow_08bfe555982713e1ba6b9cc3db1f9942))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.uu___is_Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_08bfe555982713e1ba6b9cc3db1f9942 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_08bfe555982713e1ba6b9cc3db1f9942 @x2)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_08bfe555982713e1ba6b9cc3db1f9942))
:named FStar.Pervasives_pre_typing_Tm_arrow_08bfe555982713e1ba6b9cc3db1f9942))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_08bfe555982713e1ba6b9cc3db1f9942
;;; Fact-ids: Name FStar.Pervasives.uu___is_Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_08bfe555982713e1ba6b9cc3db1f9942 @x1))
(forall ((@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x2))
(HasType @x4
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x3
@x2))
(HasType @x5
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x4
@x3
@x2))
(HasType @x6
(FStar.Pervasives.dtuple4 @x2
@x3
@x4
@x5)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x6)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
@x5)
@x6))
:qid FStar.Pervasives_interpretation_Tm_arrow_08bfe555982713e1ba6b9cc3db1f9942.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_08bfe555982713e1ba6b9cc3db1f9942 @x1)))
:qid FStar.Pervasives_interpretation_Tm_arrow_08bfe555982713e1ba6b9cc3db1f9942))
:named FStar.Pervasives_interpretation_Tm_arrow_08bfe555982713e1ba6b9cc3db1f9942))
(declare-fun FStar.Pervasives.uu___is_Mkdtuple4@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.uu___is_Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.uu___is_Mkdtuple4@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(FStar.Pervasives.uu___is_Mkdtuple4 @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.uu___is_Mkdtuple4@tok
@x0)
@x1)
@x2)
@x3)
@x4))

:pattern ((FStar.Pervasives.uu___is_Mkdtuple4 @x0
@x1
@x2
@x3
@x4))
:qid token_correspondence_FStar.Pervasives.uu___is_Mkdtuple4))
:named token_correspondence_FStar.Pervasives.uu___is_Mkdtuple4))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.uu___is_Mkdtuple4@tok
(Tm_arrow_08bfe555982713e1ba6b9cc3db1f9942 Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.uu___is_Mkdtuple4@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.uu___is_Mkdtuple4@tok))
:qid function_token_typing_FStar.Pervasives.uu___is_Mkdtuple4))
:named function_token_typing_FStar.Pervasives.uu___is_Mkdtuple4))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
(HasType @x2
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x1
@x0))
(HasType @x3
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x2
@x1
@x0))
(HasType @x4
(FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3)))
(HasType (FStar.Pervasives.uu___is_Mkdtuple4 @x0
@x1
@x2
@x3
@x4)
Prims.bool))
 

:pattern ((FStar.Pervasives.uu___is_Mkdtuple4 @x0
@x1
@x2
@x3
@x4))
:qid typing_FStar.Pervasives.uu___is_Mkdtuple4))
:named typing_FStar.Pervasives.uu___is_Mkdtuple4))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.uu___is_Mkdtuple4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Pervasives.uu___is_Mkdtuple4 @x0
@x1
@x2
@x3
@x4)
(BoxBool (is-FStar.Pervasives.Mkdtuple4 @x4)))
 

:pattern ((FStar.Pervasives.uu___is_Mkdtuple4 @x0
@x1
@x2
@x3
@x4))
:qid disc_equation_FStar.Pervasives.Mkdtuple4))
:named disc_equation_FStar.Pervasives.Mkdtuple4))

; </end encoding FStar.Pervasives.uu___is_Mkdtuple4>

; <Skipped FStar.Pervasives.uu___is_Mkdtuple4/>

; <Start encoding FStar.Pervasives.__proj__Mkdtuple4__item___1>



(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:FStar.Pervasives.dtuple4 d -> Prims.Tot a
(declare-fun Tm_arrow_627359304a35057805507fd05f62a750 () Term)



;;;;;;;;;;;;;;;;kinding_Tm_arrow_627359304a35057805507fd05f62a750
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___1; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_627359304a35057805507fd05f62a750
Tm_type)
:named kinding_Tm_arrow_627359304a35057805507fd05f62a750))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___1; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_627359304a35057805507fd05f62a750)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_627359304a35057805507fd05f62a750))
:qid FStar.Pervasives_pre_typing_Tm_arrow_627359304a35057805507fd05f62a750))
:named FStar.Pervasives_pre_typing_Tm_arrow_627359304a35057805507fd05f62a750))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_627359304a35057805507fd05f62a750
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___1; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_627359304a35057805507fd05f62a750)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasType @x3
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x2
@x1))
(HasType @x4
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x3
@x2
@x1))
(HasType @x5
(FStar.Pervasives.dtuple4 @x1
@x2
@x3
@x4)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x1))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid FStar.Pervasives_interpretation_Tm_arrow_627359304a35057805507fd05f62a750.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_627359304a35057805507fd05f62a750))
:qid FStar.Pervasives_interpretation_Tm_arrow_627359304a35057805507fd05f62a750))
:named FStar.Pervasives_interpretation_Tm_arrow_627359304a35057805507fd05f62a750))
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___1; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.__proj__Mkdtuple4__item___1@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(FStar.Pervasives.__proj__Mkdtuple4__item___1 @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.__proj__Mkdtuple4__item___1@tok
@x0)
@x1)
@x2)
@x3)
@x4))

:pattern ((FStar.Pervasives.__proj__Mkdtuple4__item___1 @x0
@x1
@x2
@x3
@x4))
:qid token_correspondence_FStar.Pervasives.__proj__Mkdtuple4__item___1))
:named token_correspondence_FStar.Pervasives.__proj__Mkdtuple4__item___1))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___1; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.__proj__Mkdtuple4__item___1@tok
Tm_arrow_627359304a35057805507fd05f62a750))
 

:pattern ((ApplyTT FStar.Pervasives.__proj__Mkdtuple4__item___1@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.__proj__Mkdtuple4__item___1@tok))
:qid function_token_typing_FStar.Pervasives.__proj__Mkdtuple4__item___1))
:named function_token_typing_FStar.Pervasives.__proj__Mkdtuple4__item___1))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___1; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
(HasType @x2
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x1
@x0))
(HasType @x3
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x2
@x1
@x0))
(HasType @x4
(FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3)))
(HasType (FStar.Pervasives.__proj__Mkdtuple4__item___1 @x0
@x1
@x2
@x3
@x4)
@x0))
 

:pattern ((FStar.Pervasives.__proj__Mkdtuple4__item___1 @x0
@x1
@x2
@x3
@x4))
:qid typing_FStar.Pervasives.__proj__Mkdtuple4__item___1))
:named typing_FStar.Pervasives.__proj__Mkdtuple4__item___1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___1; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Pervasives.__proj__Mkdtuple4__item___1 @x0
@x1
@x2
@x3
@x4)
(FStar.Pervasives.Mkdtuple4__1 @x4))
 

:pattern ((FStar.Pervasives.__proj__Mkdtuple4__item___1 @x0
@x1
@x2
@x3
@x4))
:qid proj_equation_FStar.Pervasives.Mkdtuple4__1))
:named proj_equation_FStar.Pervasives.Mkdtuple4__1))

; </end encoding FStar.Pervasives.__proj__Mkdtuple4__item___1>

; <Skipped FStar.Pervasives.__proj__Mkdtuple4__item___1/>

; <Start encoding FStar.Pervasives.__proj__Mkdtuple4__item___2>



(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:FStar.Pervasives.dtuple4 d -> Prims.Tot (b (Mkdtuple4?._1 projectee))
(declare-fun Tm_arrow_894aed5f2f01f9fc4bb62bf7e2d70f35 () Term)



;;;;;;;;;;;;;;;;kinding_Tm_arrow_894aed5f2f01f9fc4bb62bf7e2d70f35
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___2; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_894aed5f2f01f9fc4bb62bf7e2d70f35
Tm_type)
:named kinding_Tm_arrow_894aed5f2f01f9fc4bb62bf7e2d70f35))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___2; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_894aed5f2f01f9fc4bb62bf7e2d70f35)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_894aed5f2f01f9fc4bb62bf7e2d70f35))
:qid FStar.Pervasives_pre_typing_Tm_arrow_894aed5f2f01f9fc4bb62bf7e2d70f35))
:named FStar.Pervasives_pre_typing_Tm_arrow_894aed5f2f01f9fc4bb62bf7e2d70f35))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_894aed5f2f01f9fc4bb62bf7e2d70f35
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___2; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_894aed5f2f01f9fc4bb62bf7e2d70f35)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasType @x3
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x2
@x1))
(HasType @x4
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x3
@x2
@x1))
(HasType @x5
(FStar.Pervasives.dtuple4 @x1
@x2
@x3
@x4)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
(ApplyTT @x2
(FStar.Pervasives.__proj__Mkdtuple4__item___1 @x1
@x2
@x3
@x4
@x5))))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid FStar.Pervasives_interpretation_Tm_arrow_894aed5f2f01f9fc4bb62bf7e2d70f35.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_894aed5f2f01f9fc4bb62bf7e2d70f35))
:qid FStar.Pervasives_interpretation_Tm_arrow_894aed5f2f01f9fc4bb62bf7e2d70f35))
:named FStar.Pervasives_interpretation_Tm_arrow_894aed5f2f01f9fc4bb62bf7e2d70f35))
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___2; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.__proj__Mkdtuple4__item___2@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(FStar.Pervasives.__proj__Mkdtuple4__item___2 @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.__proj__Mkdtuple4__item___2@tok
@x0)
@x1)
@x2)
@x3)
@x4))

:pattern ((FStar.Pervasives.__proj__Mkdtuple4__item___2 @x0
@x1
@x2
@x3
@x4))
:qid token_correspondence_FStar.Pervasives.__proj__Mkdtuple4__item___2))
:named token_correspondence_FStar.Pervasives.__proj__Mkdtuple4__item___2))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___2; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.__proj__Mkdtuple4__item___2@tok
Tm_arrow_894aed5f2f01f9fc4bb62bf7e2d70f35))
 

:pattern ((ApplyTT FStar.Pervasives.__proj__Mkdtuple4__item___2@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.__proj__Mkdtuple4__item___2@tok))
:qid function_token_typing_FStar.Pervasives.__proj__Mkdtuple4__item___2))
:named function_token_typing_FStar.Pervasives.__proj__Mkdtuple4__item___2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___2; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
(HasType @x2
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x1
@x0))
(HasType @x3
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x2
@x1
@x0))
(HasType @x4
(FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3)))
(HasType (FStar.Pervasives.__proj__Mkdtuple4__item___2 @x0
@x1
@x2
@x3
@x4)
(ApplyTT @x1
(FStar.Pervasives.__proj__Mkdtuple4__item___1 @x0
@x1
@x2
@x3
@x4))))
 

:pattern ((FStar.Pervasives.__proj__Mkdtuple4__item___2 @x0
@x1
@x2
@x3
@x4))
:qid typing_FStar.Pervasives.__proj__Mkdtuple4__item___2))
:named typing_FStar.Pervasives.__proj__Mkdtuple4__item___2))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___2; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Pervasives.__proj__Mkdtuple4__item___2 @x0
@x1
@x2
@x3
@x4)
(FStar.Pervasives.Mkdtuple4__2 @x4))
 

:pattern ((FStar.Pervasives.__proj__Mkdtuple4__item___2 @x0
@x1
@x2
@x3
@x4))
:qid proj_equation_FStar.Pervasives.Mkdtuple4__2))
:named proj_equation_FStar.Pervasives.Mkdtuple4__2))

; </end encoding FStar.Pervasives.__proj__Mkdtuple4__item___2>

; <Skipped FStar.Pervasives.__proj__Mkdtuple4__item___2/>

; <Start encoding FStar.Pervasives.__proj__Mkdtuple4__item___3>



(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:FStar.Pervasives.dtuple4 d ->...
(declare-fun Tm_arrow_1dac41f442c1cc7b5405768e36ae98f9 () Term)



;;;;;;;;;;;;;;;;kinding_Tm_arrow_1dac41f442c1cc7b5405768e36ae98f9
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___3; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_1dac41f442c1cc7b5405768e36ae98f9
Tm_type)
:named kinding_Tm_arrow_1dac41f442c1cc7b5405768e36ae98f9))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___3; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_1dac41f442c1cc7b5405768e36ae98f9)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_1dac41f442c1cc7b5405768e36ae98f9))
:qid FStar.Pervasives_pre_typing_Tm_arrow_1dac41f442c1cc7b5405768e36ae98f9))
:named FStar.Pervasives_pre_typing_Tm_arrow_1dac41f442c1cc7b5405768e36ae98f9))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_1dac41f442c1cc7b5405768e36ae98f9
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_1dac41f442c1cc7b5405768e36ae98f9)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasType @x3
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x2
@x1))
(HasType @x4
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x3
@x2
@x1))
(HasType @x5
(FStar.Pervasives.dtuple4 @x1
@x2
@x3
@x4)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
(ApplyTT (ApplyTT @x3
(FStar.Pervasives.__proj__Mkdtuple4__item___1 @x1
@x2
@x3
@x4
@x5))
(FStar.Pervasives.__proj__Mkdtuple4__item___2 @x1
@x2
@x3
@x4
@x5))))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid FStar.Pervasives_interpretation_Tm_arrow_1dac41f442c1cc7b5405768e36ae98f9.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_1dac41f442c1cc7b5405768e36ae98f9))
:qid FStar.Pervasives_interpretation_Tm_arrow_1dac41f442c1cc7b5405768e36ae98f9))
:named FStar.Pervasives_interpretation_Tm_arrow_1dac41f442c1cc7b5405768e36ae98f9))
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.__proj__Mkdtuple4__item___3@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(FStar.Pervasives.__proj__Mkdtuple4__item___3 @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.__proj__Mkdtuple4__item___3@tok
@x0)
@x1)
@x2)
@x3)
@x4))

:pattern ((FStar.Pervasives.__proj__Mkdtuple4__item___3 @x0
@x1
@x2
@x3
@x4))
:qid token_correspondence_FStar.Pervasives.__proj__Mkdtuple4__item___3))
:named token_correspondence_FStar.Pervasives.__proj__Mkdtuple4__item___3))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.__proj__Mkdtuple4__item___3@tok
Tm_arrow_1dac41f442c1cc7b5405768e36ae98f9))
 

:pattern ((ApplyTT FStar.Pervasives.__proj__Mkdtuple4__item___3@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.__proj__Mkdtuple4__item___3@tok))
:qid function_token_typing_FStar.Pervasives.__proj__Mkdtuple4__item___3))
:named function_token_typing_FStar.Pervasives.__proj__Mkdtuple4__item___3))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
(HasType @x2
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x1
@x0))
(HasType @x3
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x2
@x1
@x0))
(HasType @x4
(FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3)))
(HasType (FStar.Pervasives.__proj__Mkdtuple4__item___3 @x0
@x1
@x2
@x3
@x4)
(ApplyTT (ApplyTT @x2
(FStar.Pervasives.__proj__Mkdtuple4__item___1 @x0
@x1
@x2
@x3
@x4))
(FStar.Pervasives.__proj__Mkdtuple4__item___2 @x0
@x1
@x2
@x3
@x4))))
 

:pattern ((FStar.Pervasives.__proj__Mkdtuple4__item___3 @x0
@x1
@x2
@x3
@x4))
:qid typing_FStar.Pervasives.__proj__Mkdtuple4__item___3))
:named typing_FStar.Pervasives.__proj__Mkdtuple4__item___3))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___3; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Pervasives.__proj__Mkdtuple4__item___3 @x0
@x1
@x2
@x3
@x4)
(FStar.Pervasives.Mkdtuple4__3 @x4))
 

:pattern ((FStar.Pervasives.__proj__Mkdtuple4__item___3 @x0
@x1
@x2
@x3
@x4))
:qid proj_equation_FStar.Pervasives.Mkdtuple4__3))
:named proj_equation_FStar.Pervasives.Mkdtuple4__3))

; </end encoding FStar.Pervasives.__proj__Mkdtuple4__item___3>

; <Skipped FStar.Pervasives.__proj__Mkdtuple4__item___3/>

; <Start encoding FStar.Pervasives.__proj__Mkdtuple4__item___4>



(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:FStar.Pervasives.dtuple4 d ->...
(declare-fun Tm_arrow_f17dd97b1f287869d6a3add69232601b () Term)



;;;;;;;;;;;;;;;;kinding_Tm_arrow_f17dd97b1f287869d6a3add69232601b
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___4; Namespace FStar.Pervasives
(assert (! (HasType Tm_arrow_f17dd97b1f287869d6a3add69232601b
Tm_type)
:named kinding_Tm_arrow_f17dd97b1f287869d6a3add69232601b))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___4; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_f17dd97b1f287869d6a3add69232601b)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_f17dd97b1f287869d6a3add69232601b))
:qid FStar.Pervasives_pre_typing_Tm_arrow_f17dd97b1f287869d6a3add69232601b))
:named FStar.Pervasives_pre_typing_Tm_arrow_f17dd97b1f287869d6a3add69232601b))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_f17dd97b1f287869d6a3add69232601b
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_f17dd97b1f287869d6a3add69232601b)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x1))
(HasType @x3
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x2
@x1))
(HasType @x4
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x3
@x2
@x1))
(HasType @x5
(FStar.Pervasives.dtuple4 @x1
@x2
@x3
@x4)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
(ApplyTT (ApplyTT (ApplyTT @x4
(FStar.Pervasives.__proj__Mkdtuple4__item___1 @x1
@x2
@x3
@x4
@x5))
(FStar.Pervasives.__proj__Mkdtuple4__item___2 @x1
@x2
@x3
@x4
@x5))
(FStar.Pervasives.__proj__Mkdtuple4__item___3 @x1
@x2
@x3
@x4
@x5))))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid FStar.Pervasives_interpretation_Tm_arrow_f17dd97b1f287869d6a3add69232601b.1)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_f17dd97b1f287869d6a3add69232601b))
:qid FStar.Pervasives_interpretation_Tm_arrow_f17dd97b1f287869d6a3add69232601b))
:named FStar.Pervasives_interpretation_Tm_arrow_f17dd97b1f287869d6a3add69232601b))
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.__proj__Mkdtuple4__item___4@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(FStar.Pervasives.__proj__Mkdtuple4__item___4 @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.__proj__Mkdtuple4__item___4@tok
@x0)
@x1)
@x2)
@x3)
@x4))

:pattern ((FStar.Pervasives.__proj__Mkdtuple4__item___4 @x0
@x1
@x2
@x3
@x4))
:qid token_correspondence_FStar.Pervasives.__proj__Mkdtuple4__item___4))
:named token_correspondence_FStar.Pervasives.__proj__Mkdtuple4__item___4))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.__proj__Mkdtuple4__item___4@tok
Tm_arrow_f17dd97b1f287869d6a3add69232601b))
 

:pattern ((ApplyTT FStar.Pervasives.__proj__Mkdtuple4__item___4@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.__proj__Mkdtuple4__item___4@tok))
:qid function_token_typing_FStar.Pervasives.__proj__Mkdtuple4__item___4))
:named function_token_typing_FStar.Pervasives.__proj__Mkdtuple4__item___4))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_e06752ba152f81447b312efcdf8f0e23 @x0))
(HasType @x2
(Tm_arrow_614c7b5886a6e5b119a37c35c7e4bd59 @x1
@x0))
(HasType @x3
(Tm_arrow_dbf39bf049d72c3088e1ed84d246952d @x2
@x1
@x0))
(HasType @x4
(FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3)))
(HasType (FStar.Pervasives.__proj__Mkdtuple4__item___4 @x0
@x1
@x2
@x3
@x4)
(ApplyTT (ApplyTT (ApplyTT @x3
(FStar.Pervasives.__proj__Mkdtuple4__item___1 @x0
@x1
@x2
@x3
@x4))
(FStar.Pervasives.__proj__Mkdtuple4__item___2 @x0
@x1
@x2
@x3
@x4))
(FStar.Pervasives.__proj__Mkdtuple4__item___3 @x0
@x1
@x2
@x3
@x4))))
 

:pattern ((FStar.Pervasives.__proj__Mkdtuple4__item___4 @x0
@x1
@x2
@x3
@x4))
:qid typing_FStar.Pervasives.__proj__Mkdtuple4__item___4))
:named typing_FStar.Pervasives.__proj__Mkdtuple4__item___4))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.__proj__Mkdtuple4__item___4; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Pervasives.__proj__Mkdtuple4__item___4 @x0
@x1
@x2
@x3
@x4)
(FStar.Pervasives.Mkdtuple4__4 @x4))
 

:pattern ((FStar.Pervasives.__proj__Mkdtuple4__item___4 @x0
@x1
@x2
@x3
@x4))
:qid proj_equation_FStar.Pervasives.Mkdtuple4__4))
:named proj_equation_FStar.Pervasives.Mkdtuple4__4))

; </end encoding FStar.Pervasives.__proj__Mkdtuple4__item___4>

; <Skipped FStar.Pervasives.__proj__Mkdtuple4__item___4/>

; <Start encoding FStar.Pervasives.ignore>
(declare-fun FStar.Pervasives.ignore (Term Term) Term)

(declare-fun FStar.Pervasives.ignore@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.ignore; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.ignore@tok
@x0)
@x1)
(FStar.Pervasives.ignore @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.ignore@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.ignore @x0
@x1))
:qid token_correspondence_FStar.Pervasives.ignore))
:named token_correspondence_FStar.Pervasives.ignore))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.ignore; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.ignore@tok
(Tm_arrow_756e7b0ac20279dfcded24e5a99a27b8 Prims.unit)))
 

:pattern ((ApplyTT FStar.Pervasives.ignore@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.ignore@tok))
:qid function_token_typing_FStar.Pervasives.ignore))
:named function_token_typing_FStar.Pervasives.ignore))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.ignore; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0))
(HasType (FStar.Pervasives.ignore @x0
@x1)
Prims.unit))
 

:pattern ((FStar.Pervasives.ignore @x0
@x1))
:qid typing_FStar.Pervasives.ignore))
:named typing_FStar.Pervasives.ignore))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.ignore
;;; Fact-ids: Name FStar.Pervasives.ignore; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.ignore @x0
@x1)
Tm_unit)
 

:pattern ((FStar.Pervasives.ignore @x0
@x1))
:qid equation_FStar.Pervasives.ignore))
:named equation_FStar.Pervasives.ignore))

; </end encoding FStar.Pervasives.ignore>

; <Start encoding FStar.Pervasives.false_elim>
(declare-fun FStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (FStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102 @x0)
Tm_type)
 

:pattern ((HasType (FStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102 @x0)
Tm_type))
:qid refinement_kinding_FStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102))
:named refinement_kinding_FStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (exists ((@x1 Term))
 (! (and (HasType @x1
@x0)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(257,37-257,42); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(257,37-257,42)
(BoxBool_proj_0 (BoxBool false))
)
 
;;no pats
:qid ref_valid_FStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102.1))
(Valid (FStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102 @x0)))
 

:pattern ((Valid (FStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102 @x0)))
:qid ref_valid_FStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102))
:named ref_valid_FStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102))
;;;;;;;;;;;;;;;;(u160132:Prims.unit{ Prims.b2t false })
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(FStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102 @x2))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(257,37-257,42); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(257,37-257,42)
(BoxBool_proj_0 (BoxBool false))
))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102 @x2)))
:qid refinement_interpretation_FStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102))
:named refinement_interpretation_FStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102))
;;;;;;;;;;;;;;;;haseq for FStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (FStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102 @x0)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (FStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102 @x0))))
:qid haseqFStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102))
:named haseqFStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102))
(declare-fun FStar.Pervasives.false_elim (Term Term) Term)
;;;;;;;;;;;;;;;;u160142:(u160143:Prims.unit{ Prims.b2t false }) -> Prims.Tot a
(declare-fun Tm_arrow_a3b523cfd66a616c0e641efdb75e9e3e (Term) Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_a3b523cfd66a616c0e641efdb75e9e3e
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_a3b523cfd66a616c0e641efdb75e9e3e @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_a3b523cfd66a616c0e641efdb75e9e3e @x0)
Tm_type))
:qid kinding_Tm_arrow_a3b523cfd66a616c0e641efdb75e9e3e))
:named kinding_Tm_arrow_a3b523cfd66a616c0e641efdb75e9e3e))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_a3b523cfd66a616c0e641efdb75e9e3e @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_a3b523cfd66a616c0e641efdb75e9e3e @x2)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_a3b523cfd66a616c0e641efdb75e9e3e))
:named FStar.Pervasives_pre_typing_Tm_arrow_a3b523cfd66a616c0e641efdb75e9e3e))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a3b523cfd66a616c0e641efdb75e9e3e
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_a3b523cfd66a616c0e641efdb75e9e3e @x1))
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102 @x1)))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x2))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid FStar.Pervasives_interpretation_Tm_arrow_a3b523cfd66a616c0e641efdb75e9e3e.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_a3b523cfd66a616c0e641efdb75e9e3e @x1)))
:qid FStar.Pervasives_interpretation_Tm_arrow_a3b523cfd66a616c0e641efdb75e9e3e))
:named FStar.Pervasives_interpretation_Tm_arrow_a3b523cfd66a616c0e641efdb75e9e3e))
(declare-fun FStar.Pervasives.false_elim@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.false_elim@tok
@x0)
@x1)
(FStar.Pervasives.false_elim @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.false_elim@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.false_elim @x0
@x1))
:qid token_correspondence_FStar.Pervasives.false_elim))
:named token_correspondence_FStar.Pervasives.false_elim))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.false_elim@tok
(Tm_arrow_a3b523cfd66a616c0e641efdb75e9e3e Prims.unit)))
 

:pattern ((ApplyTT FStar.Pervasives.false_elim@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.false_elim@tok))
:qid function_token_typing_FStar.Pervasives.false_elim))
:named function_token_typing_FStar.Pervasives.false_elim))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives_Tm_refine_16d7dda25a162db0722685f27f707102 Prims.unit)))
(HasType (FStar.Pervasives.false_elim @x0
@x1)
@x0))
 

:pattern ((FStar.Pervasives.false_elim @x0
@x1))
:qid typing_FStar.Pervasives.false_elim))
:named typing_FStar.Pervasives.false_elim))

; </end encoding FStar.Pervasives.false_elim>

; <Start encoding >
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.__internal_ocaml_attributes () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShow () Term)
;;;;;;;;;;;;;;;;data constructor proxy: PpxDerivingShow
(declare-fun FStar.Pervasives.PpxDerivingShow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShowConstant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.PpxDerivingShowConstant__0 (Term) Term)
;;;;;;;;;;;;;;;;_0:Prims.string -> Prims.Tot FStar.Pervasives.__internal_ocaml_attributes
(declare-fun Tm_arrow_53506eda6d12f67a8e4b3ea75d309e23 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: PpxDerivingShowConstant
(declare-fun FStar.Pervasives.PpxDerivingShowConstant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: CInline
(declare-fun FStar.Pervasives.CInline@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Substitute () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Substitute
(declare-fun FStar.Pervasives.Substitute@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Gc () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Gc
(declare-fun FStar.Pervasives.Gc@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Comment (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Comment__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Comment
(declare-fun FStar.Pervasives.Comment@tok () Term)

; <Start encoding FStar.Pervasives.__internal_ocaml_attributes>

; <start constructor FStar.Pervasives.__internal_ocaml_attributes>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (= 1949
(Term_constr_id FStar.Pervasives.__internal_ocaml_attributes))
:named constructor_distinct_FStar.Pervasives.__internal_ocaml_attributes))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.__internal_ocaml_attributes ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1949)
(= __@x0
FStar.Pervasives.__internal_ocaml_attributes)))

; </end constructor FStar.Pervasives.__internal_ocaml_attributes>
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (HasType FStar.Pervasives.__internal_ocaml_attributes
Tm_type)
:named kinding_FStar.Pervasives.__internal_ocaml_attributes@tok))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
FStar.Pervasives.__internal_ocaml_attributes)
(= FStar.Pervasives.__internal_ocaml_attributes
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
FStar.Pervasives.__internal_ocaml_attributes))
:qid FStar.Pervasives_pretyping_a4b7a3cd3b1c984348c37abd2aa7744a))
:named FStar.Pervasives_pretyping_a4b7a3cd3b1c984348c37abd2aa7744a))

; </end encoding FStar.Pervasives.__internal_ocaml_attributes>

; <Start encoding FStar.Pervasives.PpxDerivingShow>

; <start constructor FStar.Pervasives.PpxDerivingShow>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (= 1955
(Term_constr_id FStar.Pervasives.PpxDerivingShow))
:named constructor_distinct_FStar.Pervasives.PpxDerivingShow))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1955)
(= __@x0
FStar.Pervasives.PpxDerivingShow)))

; </end constructor FStar.Pervasives.PpxDerivingShow>
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (HasType FStar.Pervasives.PpxDerivingShow@tok
FStar.Pervasives.__internal_ocaml_attributes)
:named typing_tok_FStar.Pervasives.PpxDerivingShow@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (= FStar.Pervasives.PpxDerivingShow@tok
FStar.Pervasives.PpxDerivingShow)
:named equality_tok_FStar.Pervasives.PpxDerivingShow@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
FStar.Pervasives.PpxDerivingShow
FStar.Pervasives.__internal_ocaml_attributes)
 

:pattern ((HasTypeFuel @u0
FStar.Pervasives.PpxDerivingShow
FStar.Pervasives.__internal_ocaml_attributes))
:qid data_typing_intro_FStar.Pervasives.PpxDerivingShow@tok))
:named data_typing_intro_FStar.Pervasives.PpxDerivingShow@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! true
:named data_elim_FStar.Pervasives.PpxDerivingShow))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! true
:named subterm_ordering_FStar.Pervasives.PpxDerivingShow))

; </end encoding FStar.Pervasives.PpxDerivingShow>

; <Start encoding FStar.Pervasives.PpxDerivingShowConstant>

; <start constructor FStar.Pervasives.PpxDerivingShowConstant>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= 1957
(Term_constr_id (FStar.Pervasives.PpxDerivingShowConstant @x0)))
 

:pattern ((FStar.Pervasives.PpxDerivingShowConstant @x0))
:qid constructor_distinct_FStar.Pervasives.PpxDerivingShowConstant))
:named constructor_distinct_FStar.Pervasives.PpxDerivingShowConstant))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (FStar.Pervasives.PpxDerivingShowConstant__0 (FStar.Pervasives.PpxDerivingShowConstant @x0))
@x0)
 

:pattern ((FStar.Pervasives.PpxDerivingShowConstant @x0))
:qid projection_inverse_FStar.Pervasives.PpxDerivingShowConstant__0))
:named projection_inverse_FStar.Pervasives.PpxDerivingShowConstant__0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShowConstant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1957)
(= __@x0
(FStar.Pervasives.PpxDerivingShowConstant (FStar.Pervasives.PpxDerivingShowConstant__0 __@x0)))))

; </end constructor FStar.Pervasives.PpxDerivingShowConstant>
;;;;;;;;;;;;;;;;kinding_Tm_arrow_53506eda6d12f67a8e4b3ea75d309e23
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_53506eda6d12f67a8e4b3ea75d309e23 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_53506eda6d12f67a8e4b3ea75d309e23 @x0)
Tm_type))
:qid kinding_Tm_arrow_53506eda6d12f67a8e4b3ea75d309e23))
:named kinding_Tm_arrow_53506eda6d12f67a8e4b3ea75d309e23))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_53506eda6d12f67a8e4b3ea75d309e23 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_53506eda6d12f67a8e4b3ea75d309e23 @x2)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_53506eda6d12f67a8e4b3ea75d309e23))
:named FStar.Pervasives_pre_typing_Tm_arrow_53506eda6d12f67a8e4b3ea75d309e23))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_53506eda6d12f67a8e4b3ea75d309e23
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_53506eda6d12f67a8e4b3ea75d309e23 @x1))
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(HasType (ApplyTT @x0
@x2)
FStar.Pervasives.__internal_ocaml_attributes))
 

:pattern ((ApplyTT @x0
@x2))
:qid FStar.Pervasives_interpretation_Tm_arrow_53506eda6d12f67a8e4b3ea75d309e23.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_53506eda6d12f67a8e4b3ea75d309e23 @x1)))
:qid FStar.Pervasives_interpretation_Tm_arrow_53506eda6d12f67a8e4b3ea75d309e23))
:named FStar.Pervasives_interpretation_Tm_arrow_53506eda6d12f67a8e4b3ea75d309e23))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (= 1960
(Term_constr_id FStar.Pervasives.PpxDerivingShowConstant@tok))
:named fresh_token_FStar.Pervasives.PpxDerivingShowConstant@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.PpxDerivingShowConstant@tok
(Tm_arrow_53506eda6d12f67a8e4b3ea75d309e23 Prims.string)))
 

:pattern ((ApplyTT FStar.Pervasives.PpxDerivingShowConstant@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.PpxDerivingShowConstant@tok))
:qid typing_tok_FStar.Pervasives.PpxDerivingShowConstant@tok))
:named typing_tok_FStar.Pervasives.PpxDerivingShowConstant@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.PpxDerivingShowConstant@tok
@x0)
(FStar.Pervasives.PpxDerivingShowConstant @x0))
 

:pattern ((ApplyTT FStar.Pervasives.PpxDerivingShowConstant@tok
@x0))
:qid equality_tok_FStar.Pervasives.PpxDerivingShowConstant@tok))
:named equality_tok_FStar.Pervasives.PpxDerivingShowConstant@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.string)
(HasTypeFuel @u0
(FStar.Pervasives.PpxDerivingShowConstant @x1)
FStar.Pervasives.__internal_ocaml_attributes))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.PpxDerivingShowConstant @x1)
FStar.Pervasives.__internal_ocaml_attributes))
:qid data_typing_intro_FStar.Pervasives.PpxDerivingShowConstant@tok))
:named data_typing_intro_FStar.Pervasives.PpxDerivingShowConstant@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.PpxDerivingShowConstant @x1)
FStar.Pervasives.__internal_ocaml_attributes)
(HasTypeFuel @u0
@x1
Prims.string))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.PpxDerivingShowConstant @x1)
FStar.Pervasives.__internal_ocaml_attributes))
:qid data_elim_FStar.Pervasives.PpxDerivingShowConstant))
:named data_elim_FStar.Pervasives.PpxDerivingShowConstant))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.PpxDerivingShowConstant @x1)
FStar.Pervasives.__internal_ocaml_attributes)
(Valid (Precedes @x1
(FStar.Pervasives.PpxDerivingShowConstant @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.PpxDerivingShowConstant @x1)
FStar.Pervasives.__internal_ocaml_attributes))
:qid subterm_ordering_FStar.Pervasives.PpxDerivingShowConstant))
:named subterm_ordering_FStar.Pervasives.PpxDerivingShowConstant))

; </end encoding FStar.Pervasives.PpxDerivingShowConstant>

; <Start encoding FStar.Pervasives.CInline>

; <start constructor FStar.Pervasives.CInline>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (= 1962
(Term_constr_id FStar.Pervasives.CInline))
:named constructor_distinct_FStar.Pervasives.CInline))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1962)
(= __@x0
FStar.Pervasives.CInline)))

; </end constructor FStar.Pervasives.CInline>
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (HasType FStar.Pervasives.CInline@tok
FStar.Pervasives.__internal_ocaml_attributes)
:named typing_tok_FStar.Pervasives.CInline@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (= FStar.Pervasives.CInline@tok
FStar.Pervasives.CInline)
:named equality_tok_FStar.Pervasives.CInline@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
FStar.Pervasives.CInline
FStar.Pervasives.__internal_ocaml_attributes)
 

:pattern ((HasTypeFuel @u0
FStar.Pervasives.CInline
FStar.Pervasives.__internal_ocaml_attributes))
:qid data_typing_intro_FStar.Pervasives.CInline@tok))
:named data_typing_intro_FStar.Pervasives.CInline@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! true
:named data_elim_FStar.Pervasives.CInline))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! true
:named subterm_ordering_FStar.Pervasives.CInline))

; </end encoding FStar.Pervasives.CInline>

; <Start encoding FStar.Pervasives.Substitute>

; <start constructor FStar.Pervasives.Substitute>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (= 1964
(Term_constr_id FStar.Pervasives.Substitute))
:named constructor_distinct_FStar.Pervasives.Substitute))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Substitute ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1964)
(= __@x0
FStar.Pervasives.Substitute)))

; </end constructor FStar.Pervasives.Substitute>
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (HasType FStar.Pervasives.Substitute@tok
FStar.Pervasives.__internal_ocaml_attributes)
:named typing_tok_FStar.Pervasives.Substitute@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (= FStar.Pervasives.Substitute@tok
FStar.Pervasives.Substitute)
:named equality_tok_FStar.Pervasives.Substitute@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
FStar.Pervasives.Substitute
FStar.Pervasives.__internal_ocaml_attributes)
 

:pattern ((HasTypeFuel @u0
FStar.Pervasives.Substitute
FStar.Pervasives.__internal_ocaml_attributes))
:qid data_typing_intro_FStar.Pervasives.Substitute@tok))
:named data_typing_intro_FStar.Pervasives.Substitute@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! true
:named data_elim_FStar.Pervasives.Substitute))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! true
:named subterm_ordering_FStar.Pervasives.Substitute))

; </end encoding FStar.Pervasives.Substitute>

; <Start encoding FStar.Pervasives.Gc>

; <start constructor FStar.Pervasives.Gc>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (= 1966
(Term_constr_id FStar.Pervasives.Gc))
:named constructor_distinct_FStar.Pervasives.Gc))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Gc ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1966)
(= __@x0
FStar.Pervasives.Gc)))

; </end constructor FStar.Pervasives.Gc>
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (HasType FStar.Pervasives.Gc@tok
FStar.Pervasives.__internal_ocaml_attributes)
:named typing_tok_FStar.Pervasives.Gc@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (= FStar.Pervasives.Gc@tok
FStar.Pervasives.Gc)
:named equality_tok_FStar.Pervasives.Gc@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
FStar.Pervasives.Gc
FStar.Pervasives.__internal_ocaml_attributes)
 

:pattern ((HasTypeFuel @u0
FStar.Pervasives.Gc
FStar.Pervasives.__internal_ocaml_attributes))
:qid data_typing_intro_FStar.Pervasives.Gc@tok))
:named data_typing_intro_FStar.Pervasives.Gc@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! true
:named data_elim_FStar.Pervasives.Gc))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! true
:named subterm_ordering_FStar.Pervasives.Gc))

; </end encoding FStar.Pervasives.Gc>

; <Start encoding FStar.Pervasives.Comment>

; <start constructor FStar.Pervasives.Comment>
;;;;;;;;;;;;;;;;Consrtructor distinct
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= 1968
(Term_constr_id (FStar.Pervasives.Comment @x0)))
 

:pattern ((FStar.Pervasives.Comment @x0))
:qid constructor_distinct_FStar.Pervasives.Comment))
:named constructor_distinct_FStar.Pervasives.Comment))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (FStar.Pervasives.Comment__0 (FStar.Pervasives.Comment @x0))
@x0)
 

:pattern ((FStar.Pervasives.Comment @x0))
:qid projection_inverse_FStar.Pervasives.Comment__0))
:named projection_inverse_FStar.Pervasives.Comment__0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Comment ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
1968)
(= __@x0
(FStar.Pervasives.Comment (FStar.Pervasives.Comment__0 __@x0)))))

; </end constructor FStar.Pervasives.Comment>

;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (= 1970
(Term_constr_id FStar.Pervasives.Comment@tok))
:named fresh_token_FStar.Pervasives.Comment@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.Comment@tok
(Tm_arrow_53506eda6d12f67a8e4b3ea75d309e23 Prims.string)))
 

:pattern ((ApplyTT FStar.Pervasives.Comment@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.Comment@tok))
:qid typing_tok_FStar.Pervasives.Comment@tok))
:named typing_tok_FStar.Pervasives.Comment@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.Comment@tok
@x0)
(FStar.Pervasives.Comment @x0))
 

:pattern ((ApplyTT FStar.Pervasives.Comment@tok
@x0))
:qid equality_tok_FStar.Pervasives.Comment@tok))
:named equality_tok_FStar.Pervasives.Comment@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.string)
(HasTypeFuel @u0
(FStar.Pervasives.Comment @x1)
FStar.Pervasives.__internal_ocaml_attributes))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Comment @x1)
FStar.Pervasives.__internal_ocaml_attributes))
:qid data_typing_intro_FStar.Pervasives.Comment@tok))
:named data_typing_intro_FStar.Pervasives.Comment@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Comment @x1)
FStar.Pervasives.__internal_ocaml_attributes)
(HasTypeFuel @u0
@x1
Prims.string))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Comment @x1)
FStar.Pervasives.__internal_ocaml_attributes))
:qid data_elim_FStar.Pervasives.Comment))
:named data_elim_FStar.Pervasives.Comment))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Comment @x1)
FStar.Pervasives.__internal_ocaml_attributes)
(Valid (Precedes @x1
(FStar.Pervasives.Comment @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Comment @x1)
FStar.Pervasives.__internal_ocaml_attributes))
:qid subterm_ordering_FStar.Pervasives.Comment))
:named subterm_ordering_FStar.Pervasives.Comment))

; </end encoding FStar.Pervasives.Comment>
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShow; Namespace FStar.Pervasives; Name FStar.Pervasives.PpxDerivingShowConstant; Namespace FStar.Pervasives; Name FStar.Pervasives.CInline; Namespace FStar.Pervasives; Name FStar.Pervasives.Substitute; Namespace FStar.Pervasives; Name FStar.Pervasives.Gc; Namespace FStar.Pervasives; Name FStar.Pervasives.Comment; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
FStar.Pervasives.__internal_ocaml_attributes)
(or (is-FStar.Pervasives.PpxDerivingShow @x1)
(is-FStar.Pervasives.PpxDerivingShowConstant @x1)
(is-FStar.Pervasives.CInline @x1)
(is-FStar.Pervasives.Substitute @x1)
(is-FStar.Pervasives.Gc @x1)
(is-FStar.Pervasives.Comment @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
FStar.Pervasives.__internal_ocaml_attributes))
:qid fuel_guarded_inversion_FStar.Pervasives.__internal_ocaml_attributes))
:named fuel_guarded_inversion_FStar.Pervasives.__internal_ocaml_attributes))

; </end encoding >

; <Start encoding FStar.Pervasives.__internal_ocaml_attributes_haseq>
;;;;;;;;;;;;;;;;Assumption: __internal_ocaml_attributes_haseq
;;; Fact-ids: Name FStar.Pervasives.__internal_ocaml_attributes_haseq; Namespace FStar.Pervasives
(assert (! 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(265,0-271,21); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(265,0-271,21)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(265,0-271,21); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(265,0-271,21)
(Prims.hasEq FStar.Pervasives.__internal_ocaml_attributes)
)

:named assumption_FStar.Pervasives.__internal_ocaml_attributes_haseq))

; </end encoding FStar.Pervasives.__internal_ocaml_attributes_haseq>

; <Start encoding FStar.Pervasives.uu___is_PpxDerivingShow>
(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow (Term) Term)
;;;;;;;;;;;;;;;;projectee:FStar.Pervasives.__internal_ocaml_attributes -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01
;;; Fact-ids: Name FStar.Pervasives.uu___is_PpxDerivingShow; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01 @x0)
Tm_type))
:qid kinding_Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01))
:named kinding_Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.uu___is_PpxDerivingShow; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01 @x2)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01))
:named FStar.Pervasives_pre_typing_Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01
;;; Fact-ids: Name FStar.Pervasives.uu___is_PpxDerivingShow; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01 @x1))
(forall ((@x2 Term))
 (! (implies (HasType @x2
FStar.Pervasives.__internal_ocaml_attributes)
(HasType (ApplyTT @x0
@x2)
@x1))
 

:pattern ((ApplyTT @x0
@x2))
:qid FStar.Pervasives_interpretation_Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01 @x1)))
:qid FStar.Pervasives_interpretation_Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01))
:named FStar.Pervasives_interpretation_Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01))
(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.uu___is_PpxDerivingShow; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.uu___is_PpxDerivingShow@tok
@x0)
(FStar.Pervasives.uu___is_PpxDerivingShow @x0))
 

:pattern ((ApplyTT FStar.Pervasives.uu___is_PpxDerivingShow@tok
@x0))

:pattern ((FStar.Pervasives.uu___is_PpxDerivingShow @x0))
:qid token_correspondence_FStar.Pervasives.uu___is_PpxDerivingShow))
:named token_correspondence_FStar.Pervasives.uu___is_PpxDerivingShow))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_PpxDerivingShow; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.uu___is_PpxDerivingShow@tok
(Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01 Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.uu___is_PpxDerivingShow@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.uu___is_PpxDerivingShow@tok))
:qid function_token_typing_FStar.Pervasives.uu___is_PpxDerivingShow))
:named function_token_typing_FStar.Pervasives.uu___is_PpxDerivingShow))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_PpxDerivingShow; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Pervasives.__internal_ocaml_attributes)
(HasType (FStar.Pervasives.uu___is_PpxDerivingShow @x0)
Prims.bool))
 

:pattern ((FStar.Pervasives.uu___is_PpxDerivingShow @x0))
:qid typing_FStar.Pervasives.uu___is_PpxDerivingShow))
:named typing_FStar.Pervasives.uu___is_PpxDerivingShow))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.uu___is_PpxDerivingShow; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (FStar.Pervasives.uu___is_PpxDerivingShow @x0)
(BoxBool (is-FStar.Pervasives.PpxDerivingShow @x0)))
 

:pattern ((FStar.Pervasives.uu___is_PpxDerivingShow @x0))
:qid disc_equation_FStar.Pervasives.PpxDerivingShow))
:named disc_equation_FStar.Pervasives.PpxDerivingShow))

; </end encoding FStar.Pervasives.uu___is_PpxDerivingShow>

; <Skipped FStar.Pervasives.uu___is_PpxDerivingShow/>

; <Start encoding FStar.Pervasives.uu___is_PpxDerivingShowConstant>
(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.uu___is_PpxDerivingShowConstant; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.uu___is_PpxDerivingShowConstant@tok
@x0)
(FStar.Pervasives.uu___is_PpxDerivingShowConstant @x0))
 

:pattern ((ApplyTT FStar.Pervasives.uu___is_PpxDerivingShowConstant@tok
@x0))

:pattern ((FStar.Pervasives.uu___is_PpxDerivingShowConstant @x0))
:qid token_correspondence_FStar.Pervasives.uu___is_PpxDerivingShowConstant))
:named token_correspondence_FStar.Pervasives.uu___is_PpxDerivingShowConstant))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_PpxDerivingShowConstant; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.uu___is_PpxDerivingShowConstant@tok
(Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01 Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.uu___is_PpxDerivingShowConstant@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.uu___is_PpxDerivingShowConstant@tok))
:qid function_token_typing_FStar.Pervasives.uu___is_PpxDerivingShowConstant))
:named function_token_typing_FStar.Pervasives.uu___is_PpxDerivingShowConstant))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_PpxDerivingShowConstant; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Pervasives.__internal_ocaml_attributes)
(HasType (FStar.Pervasives.uu___is_PpxDerivingShowConstant @x0)
Prims.bool))
 

:pattern ((FStar.Pervasives.uu___is_PpxDerivingShowConstant @x0))
:qid typing_FStar.Pervasives.uu___is_PpxDerivingShowConstant))
:named typing_FStar.Pervasives.uu___is_PpxDerivingShowConstant))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.uu___is_PpxDerivingShowConstant; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (FStar.Pervasives.uu___is_PpxDerivingShowConstant @x0)
(BoxBool (is-FStar.Pervasives.PpxDerivingShowConstant @x0)))
 

:pattern ((FStar.Pervasives.uu___is_PpxDerivingShowConstant @x0))
:qid disc_equation_FStar.Pervasives.PpxDerivingShowConstant))
:named disc_equation_FStar.Pervasives.PpxDerivingShowConstant))

; </end encoding FStar.Pervasives.uu___is_PpxDerivingShowConstant>

; <Skipped FStar.Pervasives.uu___is_PpxDerivingShowConstant/>

; <Start encoding FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>
(declare-fun FStar.Pervasives_Tm_refine_564db2f0aa0878b4d96c60508be3dd36 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0; Namespace FStar.Pervasives
(assert (! (HasType FStar.Pervasives_Tm_refine_564db2f0aa0878b4d96c60508be3dd36
Tm_type)
:named refinement_kinding_FStar.Pervasives_Tm_refine_564db2f0aa0878b4d96c60508be3dd36))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: Name FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0; Namespace FStar.Pervasives
(assert (! (iff (exists ((@x0 Term))
 (! (and (HasType @x0
FStar.Pervasives.__internal_ocaml_attributes)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(267,4-267,27); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(267,4-267,27)
(BoxBool_proj_0 (FStar.Pervasives.uu___is_PpxDerivingShowConstant @x0))
)
 
;;no pats
:qid ref_valid_FStar.Pervasives_Tm_refine_564db2f0aa0878b4d96c60508be3dd36))
(Valid FStar.Pervasives_Tm_refine_564db2f0aa0878b4d96c60508be3dd36))
:named ref_valid_FStar.Pervasives_Tm_refine_564db2f0aa0878b4d96c60508be3dd36))
;;;;;;;;;;;;;;;;(uu___160168:FStar.Pervasives.__internal_ocaml_attributes{ Prims.b2t (PpxDerivingShowConstant? uu___160168...
;;; Fact-ids: Name FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
FStar.Pervasives_Tm_refine_564db2f0aa0878b4d96c60508be3dd36)
(and (HasTypeFuel @u0
@x1
FStar.Pervasives.__internal_ocaml_attributes)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(267,4-267,27); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(267,4-267,27)
(BoxBool_proj_0 (FStar.Pervasives.uu___is_PpxDerivingShowConstant @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
FStar.Pervasives_Tm_refine_564db2f0aa0878b4d96c60508be3dd36))
:qid refinement_interpretation_FStar.Pervasives_Tm_refine_564db2f0aa0878b4d96c60508be3dd36))
:named refinement_interpretation_FStar.Pervasives_Tm_refine_564db2f0aa0878b4d96c60508be3dd36))
;;;;;;;;;;;;;;;;haseq for FStar.Pervasives_Tm_refine_564db2f0aa0878b4d96c60508be3dd36
;;; Fact-ids: Name FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0; Namespace FStar.Pervasives
(assert (! (iff (Valid (Prims.hasEq FStar.Pervasives_Tm_refine_564db2f0aa0878b4d96c60508be3dd36))
(Valid (Prims.hasEq FStar.Pervasives.__internal_ocaml_attributes)))
:named haseqFStar.Pervasives_Tm_refine_564db2f0aa0878b4d96c60508be3dd36))
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 (Term) Term)
;;;;;;;;;;;;;;;;projectee:...
(declare-fun Tm_arrow_a7b615889edcbdfadf24ad49f4c2628e (Term) Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_a7b615889edcbdfadf24ad49f4c2628e
;;; Fact-ids: Name FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_a7b615889edcbdfadf24ad49f4c2628e @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_a7b615889edcbdfadf24ad49f4c2628e @x0)
Tm_type))
:qid kinding_Tm_arrow_a7b615889edcbdfadf24ad49f4c2628e))
:named kinding_Tm_arrow_a7b615889edcbdfadf24ad49f4c2628e))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_a7b615889edcbdfadf24ad49f4c2628e @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_a7b615889edcbdfadf24ad49f4c2628e @x2)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_a7b615889edcbdfadf24ad49f4c2628e))
:named FStar.Pervasives_pre_typing_Tm_arrow_a7b615889edcbdfadf24ad49f4c2628e))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a7b615889edcbdfadf24ad49f4c2628e
;;; Fact-ids: Name FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_a7b615889edcbdfadf24ad49f4c2628e @x1))
(forall ((@x2 Term))
 (! (implies (HasType @x2
FStar.Pervasives_Tm_refine_564db2f0aa0878b4d96c60508be3dd36)
(HasType (ApplyTT @x0
@x2)
@x1))
 

:pattern ((ApplyTT @x0
@x2))
:qid FStar.Pervasives_interpretation_Tm_arrow_a7b615889edcbdfadf24ad49f4c2628e.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_a7b615889edcbdfadf24ad49f4c2628e @x1)))
:qid FStar.Pervasives_interpretation_Tm_arrow_a7b615889edcbdfadf24ad49f4c2628e))
:named FStar.Pervasives_interpretation_Tm_arrow_a7b615889edcbdfadf24ad49f4c2628e))
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0@tok
@x0)
(FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 @x0))
 

:pattern ((ApplyTT FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0@tok
@x0))

:pattern ((FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 @x0))
:qid token_correspondence_FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0))
:named token_correspondence_FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0@tok
(Tm_arrow_a7b615889edcbdfadf24ad49f4c2628e Prims.string)))
 

:pattern ((ApplyTT FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0@tok))
:qid function_token_typing_FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0))
:named function_token_typing_FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Pervasives_Tm_refine_564db2f0aa0878b4d96c60508be3dd36)
(HasType (FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 @x0)
Prims.string))
 

:pattern ((FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 @x0))
:qid typing_FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0))
:named typing_FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 @x0)
(FStar.Pervasives.PpxDerivingShowConstant__0 @x0))
 

:pattern ((FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 @x0))
:qid proj_equation_FStar.Pervasives.PpxDerivingShowConstant__0))
:named proj_equation_FStar.Pervasives.PpxDerivingShowConstant__0))

; </end encoding FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>

; <Skipped FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0/>

; <Start encoding FStar.Pervasives.uu___is_CInline>
(declare-fun FStar.Pervasives.uu___is_CInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CInline@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.uu___is_CInline; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.uu___is_CInline@tok
@x0)
(FStar.Pervasives.uu___is_CInline @x0))
 

:pattern ((ApplyTT FStar.Pervasives.uu___is_CInline@tok
@x0))

:pattern ((FStar.Pervasives.uu___is_CInline @x0))
:qid token_correspondence_FStar.Pervasives.uu___is_CInline))
:named token_correspondence_FStar.Pervasives.uu___is_CInline))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_CInline; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.uu___is_CInline@tok
(Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01 Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.uu___is_CInline@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.uu___is_CInline@tok))
:qid function_token_typing_FStar.Pervasives.uu___is_CInline))
:named function_token_typing_FStar.Pervasives.uu___is_CInline))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_CInline; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Pervasives.__internal_ocaml_attributes)
(HasType (FStar.Pervasives.uu___is_CInline @x0)
Prims.bool))
 

:pattern ((FStar.Pervasives.uu___is_CInline @x0))
:qid typing_FStar.Pervasives.uu___is_CInline))
:named typing_FStar.Pervasives.uu___is_CInline))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.uu___is_CInline; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (FStar.Pervasives.uu___is_CInline @x0)
(BoxBool (is-FStar.Pervasives.CInline @x0)))
 

:pattern ((FStar.Pervasives.uu___is_CInline @x0))
:qid disc_equation_FStar.Pervasives.CInline))
:named disc_equation_FStar.Pervasives.CInline))

; </end encoding FStar.Pervasives.uu___is_CInline>

; <Skipped FStar.Pervasives.uu___is_CInline/>

; <Start encoding FStar.Pervasives.uu___is_Substitute>
(declare-fun FStar.Pervasives.uu___is_Substitute (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Substitute@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.uu___is_Substitute; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.uu___is_Substitute@tok
@x0)
(FStar.Pervasives.uu___is_Substitute @x0))
 

:pattern ((ApplyTT FStar.Pervasives.uu___is_Substitute@tok
@x0))

:pattern ((FStar.Pervasives.uu___is_Substitute @x0))
:qid token_correspondence_FStar.Pervasives.uu___is_Substitute))
:named token_correspondence_FStar.Pervasives.uu___is_Substitute))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_Substitute; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.uu___is_Substitute@tok
(Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01 Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.uu___is_Substitute@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.uu___is_Substitute@tok))
:qid function_token_typing_FStar.Pervasives.uu___is_Substitute))
:named function_token_typing_FStar.Pervasives.uu___is_Substitute))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_Substitute; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Pervasives.__internal_ocaml_attributes)
(HasType (FStar.Pervasives.uu___is_Substitute @x0)
Prims.bool))
 

:pattern ((FStar.Pervasives.uu___is_Substitute @x0))
:qid typing_FStar.Pervasives.uu___is_Substitute))
:named typing_FStar.Pervasives.uu___is_Substitute))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.uu___is_Substitute; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (FStar.Pervasives.uu___is_Substitute @x0)
(BoxBool (is-FStar.Pervasives.Substitute @x0)))
 

:pattern ((FStar.Pervasives.uu___is_Substitute @x0))
:qid disc_equation_FStar.Pervasives.Substitute))
:named disc_equation_FStar.Pervasives.Substitute))

; </end encoding FStar.Pervasives.uu___is_Substitute>

; <Skipped FStar.Pervasives.uu___is_Substitute/>

; <Start encoding FStar.Pervasives.uu___is_Gc>
(declare-fun FStar.Pervasives.uu___is_Gc (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Gc@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.uu___is_Gc; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.uu___is_Gc@tok
@x0)
(FStar.Pervasives.uu___is_Gc @x0))
 

:pattern ((ApplyTT FStar.Pervasives.uu___is_Gc@tok
@x0))

:pattern ((FStar.Pervasives.uu___is_Gc @x0))
:qid token_correspondence_FStar.Pervasives.uu___is_Gc))
:named token_correspondence_FStar.Pervasives.uu___is_Gc))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_Gc; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.uu___is_Gc@tok
(Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01 Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.uu___is_Gc@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.uu___is_Gc@tok))
:qid function_token_typing_FStar.Pervasives.uu___is_Gc))
:named function_token_typing_FStar.Pervasives.uu___is_Gc))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_Gc; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Pervasives.__internal_ocaml_attributes)
(HasType (FStar.Pervasives.uu___is_Gc @x0)
Prims.bool))
 

:pattern ((FStar.Pervasives.uu___is_Gc @x0))
:qid typing_FStar.Pervasives.uu___is_Gc))
:named typing_FStar.Pervasives.uu___is_Gc))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.uu___is_Gc; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (FStar.Pervasives.uu___is_Gc @x0)
(BoxBool (is-FStar.Pervasives.Gc @x0)))
 

:pattern ((FStar.Pervasives.uu___is_Gc @x0))
:qid disc_equation_FStar.Pervasives.Gc))
:named disc_equation_FStar.Pervasives.Gc))

; </end encoding FStar.Pervasives.uu___is_Gc>

; <Skipped FStar.Pervasives.uu___is_Gc/>

; <Start encoding FStar.Pervasives.uu___is_Comment>
(declare-fun FStar.Pervasives.uu___is_Comment (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Comment@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.uu___is_Comment; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.uu___is_Comment@tok
@x0)
(FStar.Pervasives.uu___is_Comment @x0))
 

:pattern ((ApplyTT FStar.Pervasives.uu___is_Comment@tok
@x0))

:pattern ((FStar.Pervasives.uu___is_Comment @x0))
:qid token_correspondence_FStar.Pervasives.uu___is_Comment))
:named token_correspondence_FStar.Pervasives.uu___is_Comment))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_Comment; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.uu___is_Comment@tok
(Tm_arrow_2c5c4d02fbece15e63160b3c87c78b01 Prims.bool)))
 

:pattern ((ApplyTT FStar.Pervasives.uu___is_Comment@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.uu___is_Comment@tok))
:qid function_token_typing_FStar.Pervasives.uu___is_Comment))
:named function_token_typing_FStar.Pervasives.uu___is_Comment))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.uu___is_Comment; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Pervasives.__internal_ocaml_attributes)
(HasType (FStar.Pervasives.uu___is_Comment @x0)
Prims.bool))
 

:pattern ((FStar.Pervasives.uu___is_Comment @x0))
:qid typing_FStar.Pervasives.uu___is_Comment))
:named typing_FStar.Pervasives.uu___is_Comment))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.uu___is_Comment; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (FStar.Pervasives.uu___is_Comment @x0)
(BoxBool (is-FStar.Pervasives.Comment @x0)))
 

:pattern ((FStar.Pervasives.uu___is_Comment @x0))
:qid disc_equation_FStar.Pervasives.Comment))
:named disc_equation_FStar.Pervasives.Comment))

; </end encoding FStar.Pervasives.uu___is_Comment>

; <Skipped FStar.Pervasives.uu___is_Comment/>

; <Start encoding FStar.Pervasives.__proj__Comment__item___0>
(declare-fun FStar.Pervasives_Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.__proj__Comment__item___0; Namespace FStar.Pervasives
(assert (! (HasType FStar.Pervasives_Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0
Tm_type)
:named refinement_kinding_FStar.Pervasives_Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: Name FStar.Pervasives.__proj__Comment__item___0; Namespace FStar.Pervasives
(assert (! (iff (exists ((@x0 Term))
 (! (and (HasType @x0
FStar.Pervasives.__internal_ocaml_attributes)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(271,4-271,11); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(271,4-271,11)
(BoxBool_proj_0 (FStar.Pervasives.uu___is_Comment @x0))
)
 
;;no pats
:qid ref_valid_FStar.Pervasives_Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0))
(Valid FStar.Pervasives_Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0))
:named ref_valid_FStar.Pervasives_Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0))
;;;;;;;;;;;;;;;;(uu___160197:FStar.Pervasives.__internal_ocaml_attributes{ Prims.b2t (Comment? uu___160197) })
;;; Fact-ids: Name FStar.Pervasives.__proj__Comment__item___0; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
FStar.Pervasives_Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0)
(and (HasTypeFuel @u0
@x1
FStar.Pervasives.__internal_ocaml_attributes)

;; def=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(271,4-271,11); use=/home/hritcu/Projects/fstar/pub/ulib/FStar.Pervasives.fst(271,4-271,11)
(BoxBool_proj_0 (FStar.Pervasives.uu___is_Comment @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
FStar.Pervasives_Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0))
:qid refinement_interpretation_FStar.Pervasives_Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0))
:named refinement_interpretation_FStar.Pervasives_Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0))
;;;;;;;;;;;;;;;;haseq for FStar.Pervasives_Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0
;;; Fact-ids: Name FStar.Pervasives.__proj__Comment__item___0; Namespace FStar.Pervasives
(assert (! (iff (Valid (Prims.hasEq FStar.Pervasives_Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0))
(Valid (Prims.hasEq FStar.Pervasives.__internal_ocaml_attributes)))
:named haseqFStar.Pervasives_Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0))
(declare-fun FStar.Pervasives.__proj__Comment__item___0 (Term) Term)
;;;;;;;;;;;;;;;;projectee:...
(declare-fun Tm_arrow_51b345975888169ae4f69613c826965e (Term) Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_51b345975888169ae4f69613c826965e
;;; Fact-ids: Name FStar.Pervasives.__proj__Comment__item___0; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_51b345975888169ae4f69613c826965e @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_51b345975888169ae4f69613c826965e @x0)
Tm_type))
:qid kinding_Tm_arrow_51b345975888169ae4f69613c826965e))
:named kinding_Tm_arrow_51b345975888169ae4f69613c826965e))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Pervasives.__proj__Comment__item___0; Namespace FStar.Pervasives
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_51b345975888169ae4f69613c826965e @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_51b345975888169ae4f69613c826965e @x2)))
:qid FStar.Pervasives_pre_typing_Tm_arrow_51b345975888169ae4f69613c826965e))
:named FStar.Pervasives_pre_typing_Tm_arrow_51b345975888169ae4f69613c826965e))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_51b345975888169ae4f69613c826965e
;;; Fact-ids: Name FStar.Pervasives.__proj__Comment__item___0; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_51b345975888169ae4f69613c826965e @x1))
(forall ((@x2 Term))
 (! (implies (HasType @x2
FStar.Pervasives_Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0)
(HasType (ApplyTT @x0
@x2)
@x1))
 

:pattern ((ApplyTT @x0
@x2))
:qid FStar.Pervasives_interpretation_Tm_arrow_51b345975888169ae4f69613c826965e.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_51b345975888169ae4f69613c826965e @x1)))
:qid FStar.Pervasives_interpretation_Tm_arrow_51b345975888169ae4f69613c826965e))
:named FStar.Pervasives_interpretation_Tm_arrow_51b345975888169ae4f69613c826965e))
(declare-fun FStar.Pervasives.__proj__Comment__item___0@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.__proj__Comment__item___0; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.__proj__Comment__item___0@tok
@x0)
(FStar.Pervasives.__proj__Comment__item___0 @x0))
 

:pattern ((ApplyTT FStar.Pervasives.__proj__Comment__item___0@tok
@x0))

:pattern ((FStar.Pervasives.__proj__Comment__item___0 @x0))
:qid token_correspondence_FStar.Pervasives.__proj__Comment__item___0))
:named token_correspondence_FStar.Pervasives.__proj__Comment__item___0))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Comment__item___0; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Pervasives.__proj__Comment__item___0@tok
(Tm_arrow_51b345975888169ae4f69613c826965e Prims.string)))
 

:pattern ((ApplyTT FStar.Pervasives.__proj__Comment__item___0@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Pervasives.__proj__Comment__item___0@tok))
:qid function_token_typing_FStar.Pervasives.__proj__Comment__item___0))
:named function_token_typing_FStar.Pervasives.__proj__Comment__item___0))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.__proj__Comment__item___0; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
FStar.Pervasives_Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0)
(HasType (FStar.Pervasives.__proj__Comment__item___0 @x0)
Prims.string))
 

:pattern ((FStar.Pervasives.__proj__Comment__item___0 @x0))
:qid typing_FStar.Pervasives.__proj__Comment__item___0))
:named typing_FStar.Pervasives.__proj__Comment__item___0))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.__proj__Comment__item___0; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (= (FStar.Pervasives.__proj__Comment__item___0 @x0)
(FStar.Pervasives.Comment__0 @x0))
 

:pattern ((FStar.Pervasives.__proj__Comment__item___0 @x0))
:qid proj_equation_FStar.Pervasives.Comment__0))
:named proj_equation_FStar.Pervasives.Comment__0))

; </end encoding FStar.Pervasives.__proj__Comment__item___0>

; <Skipped FStar.Pervasives.__proj__Comment__item___0/>

; End Externals for module FStar.Pervasives

; 
(push)

; Externals for module FStar.Mul

; <Start encoding FStar.Mul.op_Star>
(declare-fun FStar.Mul.op_Star (Term Term) Term)

(declare-fun FStar.Mul.op_Star@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Mul.op_Star; Namespace FStar.Mul
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Mul.op_Star@tok
@x0)
@x1)
(FStar.Mul.op_Star @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Mul.op_Star@tok
@x0)
@x1))

:pattern ((FStar.Mul.op_Star @x0
@x1))
:qid token_correspondence_FStar.Mul.op_Star))
:named token_correspondence_FStar.Mul.op_Star))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Mul.op_Star; Namespace FStar.Mul
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType FStar.Mul.op_Star@tok
(Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf Prims.int)))
 

:pattern ((ApplyTT FStar.Mul.op_Star@tok
@x0))

:pattern ((ApplyTT @x0
FStar.Mul.op_Star@tok))
:qid function_token_typing_FStar.Mul.op_Star))
:named function_token_typing_FStar.Mul.op_Star))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Mul.op_Star; Namespace FStar.Mul
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.int))
(HasType (FStar.Mul.op_Star @x0
@x1)
Prims.int))
 

:pattern ((FStar.Mul.op_Star @x0
@x1))
:qid typing_FStar.Mul.op_Star))
:named typing_FStar.Mul.op_Star))
;;;;;;;;;;;;;;;;Equation for FStar.Mul.op_Star
;;; Fact-ids: Name FStar.Mul.op_Star; Namespace FStar.Mul
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Mul.op_Star @x0
@x1)
(Prims.op_Multiply @x0
@x1))
 

:pattern ((FStar.Mul.op_Star @x0
@x1))
:qid equation_FStar.Mul.op_Star))
:named equation_FStar.Mul.op_Star))

; </end encoding FStar.Mul.op_Star>

; End Externals for module FStar.Mul

; 
(push)

; 
(push)

; encoding sigelt pow

; <Skipped RSA.pow/>

; 
(push)

; encoding sigelt pow

; <Start encoding RSA.pow>
;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun RSA.pow.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun RSA.pow.fuel_instrumented_token () Term)
(declare-fun RSA.pow (Term Term) Term)
(declare-fun RSA.pow@tok () Term)

;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name RSA.pow; Namespace RSA
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT RSA.pow@tok
@x0)
@x1)
(RSA.pow @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT RSA.pow@tok
@x0)
@x1))

:pattern ((RSA.pow @x0
@x1))
:qid token_correspondence_RSA.pow))
:named token_correspondence_RSA.pow))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name RSA.pow; Namespace RSA
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType RSA.pow@tok
(Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf Prims.nat)))
 

:pattern ((ApplyTT RSA.pow@tok
@x0))

:pattern ((ApplyTT @x0
RSA.pow@tok))
:qid function_token_typing_RSA.pow))
:named function_token_typing_RSA.pow))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name RSA.pow; Namespace RSA
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Prims.nat))
(HasType (RSA.pow @x0
@x1)
Prims.nat))
 

:pattern ((RSA.pow @x0
@x1))
:qid typing_RSA.pow))
:named typing_RSA.pow))
;;;;;;;;;;;;;;;;Fuel token correspondence
;;; Fact-ids: Name RSA.pow; Namespace RSA
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTF RSA.pow.fuel_instrumented_token
@u0)
@x1)
@x2)
(RSA.pow.fuel_instrumented @u0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTF RSA.pow.fuel_instrumented_token
@u0)
@x1)
@x2))
:qid fuel_token_correspondence_RSA.pow.fuel_instrumented_token))
:named fuel_token_correspondence_RSA.pow.fuel_instrumented_token))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name RSA.pow; Namespace RSA
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
Prims.nat))
(HasType (RSA.pow.fuel_instrumented @u0
@x1
@x2)
Prims.nat))
 

:pattern ((RSA.pow.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_RSA.pow.fuel_instrumented))
:named token_correspondence_RSA.pow.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name RSA.pow; Namespace RSA
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (RSA.pow @x0
@x1)
(RSA.pow.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((RSA.pow @x0
@x1))
:qid @fuel_correspondence_RSA.pow.fuel_instrumented))
:named @fuel_correspondence_RSA.pow.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name RSA.pow; Namespace RSA
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (RSA.pow.fuel_instrumented (SFuel @u0)
@x1
@x2)
(RSA.pow.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((RSA.pow.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_RSA.pow.fuel_instrumented))
:named @fuel_irrelevance_RSA.pow.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: RSA.pow
;;; Fact-ids: Name RSA.pow; Namespace RSA
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (RSA.pow.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 (Prims.op_Equality Prims.int
@x2
(BoxInt 0))))
(ite (= @lb3
(BoxBool true))
(BoxInt 1)
(Prims.op_Multiply @x1
(RSA.pow.fuel_instrumented @u0
@x1
(Prims.op_Subtraction @x2
(BoxInt 1)))))))
 :weight 0


:pattern ((RSA.pow.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_RSA.pow.fuel_instrumented))
:named equation_with_fuel_RSA.pow.fuel_instrumented))

; </end encoding RSA.pow>

; 
(push)

; encoding sigelt lemma_pow_add

; <Skipped RSA.lemma_pow_add/>

; 
(push)

; encoding sigelt 

; <Skipped />

; encoding sigelt lemma_pow_add

; <Start encoding RSA.lemma_pow_add>
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun RSA.lemma_pow_add (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun RSA.lemma_pow_add@tok () Term)

; </end encoding RSA.lemma_pow_add>
(push)

; 
(push)

; Starting query at <input>(31,45-31,82)
(declare-fun label_17 () Bool)
(push)

; <fuel='1' ifuel='1'>
;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Prims.nat)
(HasType @x2
Prims.nat))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43); use=<input>(31,45-31,82)
(or label_17

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<labels>")
(echo "label_17")
(eval label_17)
(echo "</labels>")
(echo "Done!")
(pop)

; Ending query at <input>(31,45-31,82)
(pop)
(push)

; Starting query at <input>(31,0-31,82)
(declare-fun label_18 () Bool)
(push)

; <fuel='1' ifuel='1'>
;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Prims.nat)
(HasType @x2
Prims.nat))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=<input>(31,72-31,81)
(or label_18

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(>= (BoxInt_proj_0 (Prims.op_Multiply @x1
@x2))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<labels>")
(echo "label_18")
(eval label_18)
(echo "</labels>")
(echo "Done!")
(pop)

; Ending query at <input>(31,0-31,82)
(pop)

; encoding sigelt lemma_pow_mul

; <Skipped RSA.lemma_pow_mul/>
(push)

; 
(push)

; Starting query at <input>(33,0-38,33)
;;;;;;;;;;;;;;;;g#163592 : Prims.nat (Prims.nat)
(declare-fun x_e22ba7a032a73f6d0678d3d186686631_0 () Term)
;;;;;;;;;;;;;;;;binder_x_e22ba7a032a73f6d0678d3d186686631_0
;;; Fact-ids: 
(assert (! (HasType x_e22ba7a032a73f6d0678d3d186686631_0
Prims.nat)
:named binder_x_e22ba7a032a73f6d0678d3d186686631_0))
;;;;;;;;;;;;;;;;e1#163593 : Prims.nat (Prims.nat)
(declare-fun x_e22ba7a032a73f6d0678d3d186686631_1 () Term)
;;;;;;;;;;;;;;;;binder_x_e22ba7a032a73f6d0678d3d186686631_1
;;; Fact-ids: 
(assert (! (HasType x_e22ba7a032a73f6d0678d3d186686631_1
Prims.nat)
:named binder_x_e22ba7a032a73f6d0678d3d186686631_1))
;;;;;;;;;;;;;;;;e2#163594 : Prims.nat (Prims.nat)
(declare-fun x_e22ba7a032a73f6d0678d3d186686631_2 () Term)
;;;;;;;;;;;;;;;;binder_x_e22ba7a032a73f6d0678d3d186686631_2
;;; Fact-ids: 
(assert (! (HasType x_e22ba7a032a73f6d0678d3d186686631_2
Prims.nat)
:named binder_x_e22ba7a032a73f6d0678d3d186686631_2))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun RSA.lemma_pow_mul (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun RSA.lemma_pow_mul@tok () Term)
(declare-fun label_23 () Bool)
(declare-fun label_22 () Bool)
(declare-fun label_21 () Bool)
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(push)

; <fuel='1' ifuel='1'>
;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=<input>(33,0-38,33); use=<input>(33,0-38,33)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,44-188,74); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,44-188,74)
(forall ((@x1 Term))
 (! (implies (and (or label_19
(HasType @x1
Prims.unit))

;; def=<input>(31,45-31,82); use=<input>(31,45-31,82)
(or label_20

;; def=<input>(31,45-31,82); use=<input>(31,45-31,82)
(= (RSA.pow (RSA.pow x_e22ba7a032a73f6d0678d3d186686631_0
x_e22ba7a032a73f6d0678d3d186686631_1)
x_e22ba7a032a73f6d0678d3d186686631_2)
(RSA.pow x_e22ba7a032a73f6d0678d3d186686631_0
(Prims.op_Multiply x_e22ba7a032a73f6d0678d3d186686631_1
x_e22ba7a032a73f6d0678d3d186686631_2)))
)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(159,5-161,10); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(159,5-161,10); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(forall ((@x2 Term))
 (! (iff 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,46-160,49); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,46-160,49); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(ApplyTT @x1
@x2)
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,55-160,61); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,55-160,61); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(ApplyTT @x0
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(103,47-103,70); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(176,22-176,39)
(and (implies 
;; def=<input>(34,17-34,5); use=<input>(34,17-34,5)
(= (Prims.op_Equality Prims.int
x_e22ba7a032a73f6d0678d3d186686631_2
(BoxInt 0))
(BoxBool true))


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Prims.unit)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x2
Tm_unit)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(103,61-103,63); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(176,22-176,39)
(not 
;; def=<input>(34,17-34,5); use=<input>(34,17-34,5)
(= (Prims.op_Equality Prims.int
x_e22ba7a032a73f6d0678d3d186686631_2
(BoxInt 0))
(BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(166,90-166,110); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(179,22-179,35)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Prims.bool)

;; def=<input>(34,5-36,4); use=<input>(34,5-36,4)
(= (Prims.op_Equality Prims.int
x_e22ba7a032a73f6d0678d3d186686631_2
(BoxInt 0))
@x2)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=<input>(36,19-36,25)
(or label_21

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(>= (BoxInt_proj_0 (Prims.op_Subtraction x_e22ba7a032a73f6d0678d3d186686631_2
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.nat)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x3
(Prims.op_Subtraction x_e22ba7a032a73f6d0678d3d186686631_2
(BoxInt 1)))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=<input>(33,0-38,33); use=<input>(37,23-37,26)
(or label_22

;; def=<input>(33,0-38,33); use=<input>(33,0-38,33)
(Valid 
;; def=<input>(33,0-38,33); use=<input>(33,0-38,33)
(Prims.precedes Prims.lex_t
Prims.lex_t
(LexCons x_e22ba7a032a73f6d0678d3d186686631_0
(LexCons x_e22ba7a032a73f6d0678d3d186686631_1
(LexCons @x3
Prims.LexTop@tok)))
(LexCons x_e22ba7a032a73f6d0678d3d186686631_0
(LexCons x_e22ba7a032a73f6d0678d3d186686631_1
(LexCons x_e22ba7a032a73f6d0678d3d186686631_2
Prims.LexTop@tok))))
)
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.nat)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x4
@x3)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,44-188,74); use=<input>(37,4-37,17)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=<input>(31,45-31,82); use=<input>(37,4-37,17)
(= (RSA.pow (RSA.pow x_e22ba7a032a73f6d0678d3d186686631_0
x_e22ba7a032a73f6d0678d3d186686631_1)
@x3)
(RSA.pow x_e22ba7a032a73f6d0678d3d186686631_0
(Prims.op_Multiply x_e22ba7a032a73f6d0678d3d186686631_1
@x3)))


;; def=<input>(31,39-37,4); use=<input>(37,4-37,4)
(= @x5
(RSA.lemma_pow_mul x_e22ba7a032a73f6d0678d3d186686631_0
x_e22ba7a032a73f6d0678d3d186686631_1
@x4))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x6
@x5)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=<input>(38,23-38,33)
(or label_23

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(>= (BoxInt_proj_0 (Prims.op_Multiply x_e22ba7a032a73f6d0678d3d186686631_1
@x3))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.nat)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x7
(Prims.op_Multiply x_e22ba7a032a73f6d0678d3d186686631_1
@x3))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,44-188,74); use=<input>(38,4-38,17)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=<input>(22,47-22,86); use=<input>(38,4-38,17)
(= (RSA.pow x_e22ba7a032a73f6d0678d3d186686631_0
(Prims.op_Addition x_e22ba7a032a73f6d0678d3d186686631_1
(Prims.op_Multiply x_e22ba7a032a73f6d0678d3d186686631_1
@x3)))
(Prims.op_Multiply (RSA.pow x_e22ba7a032a73f6d0678d3d186686631_0
x_e22ba7a032a73f6d0678d3d186686631_1)
(RSA.pow x_e22ba7a032a73f6d0678d3d186686631_0
(Prims.op_Multiply x_e22ba7a032a73f6d0678d3d186686631_1
@x3))))


;; def=<input>(22,41-38,4); use=<input>(38,4-38,4)
(= @x8
(RSA.lemma_pow_add x_e22ba7a032a73f6d0678d3d186686631_0
x_e22ba7a032a73f6d0678d3d186686631_1
@x7))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x9
@x8)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(ApplyTT @x1
@x9)
)
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<labels>")
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "</labels>")
(echo "Done!")
(pop)
(push)

; <fuel='1' ifuel='2'>
;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel (SFuel ZFuel)))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=<input>(33,0-38,33); use=<input>(33,0-38,33)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,44-188,74); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,44-188,74)
(forall ((@x1 Term))
 (! (implies (and (or label_19
(HasType @x1
Prims.unit))

;; def=<input>(31,45-31,82); use=<input>(31,45-31,82)
(or label_20

;; def=<input>(31,45-31,82); use=<input>(31,45-31,82)
(= (RSA.pow (RSA.pow x_e22ba7a032a73f6d0678d3d186686631_0
x_e22ba7a032a73f6d0678d3d186686631_1)
x_e22ba7a032a73f6d0678d3d186686631_2)
(RSA.pow x_e22ba7a032a73f6d0678d3d186686631_0
(Prims.op_Multiply x_e22ba7a032a73f6d0678d3d186686631_1
x_e22ba7a032a73f6d0678d3d186686631_2)))
)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(159,5-161,10); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(159,5-161,10); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(forall ((@x2 Term))
 (! (iff 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,46-160,49); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,46-160,49); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(ApplyTT @x1
@x2)
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,55-160,61); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,55-160,61); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(ApplyTT @x0
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(103,47-103,70); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(176,22-176,39)
(and (implies 
;; def=<input>(34,17-34,5); use=<input>(34,17-34,5)
(= (Prims.op_Equality Prims.int
x_e22ba7a032a73f6d0678d3d186686631_2
(BoxInt 0))
(BoxBool true))


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Prims.unit)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x2
Tm_unit)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(103,61-103,63); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(176,22-176,39)
(not 
;; def=<input>(34,17-34,5); use=<input>(34,17-34,5)
(= (Prims.op_Equality Prims.int
x_e22ba7a032a73f6d0678d3d186686631_2
(BoxInt 0))
(BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(166,90-166,110); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(179,22-179,35)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Prims.bool)

;; def=<input>(34,5-36,4); use=<input>(34,5-36,4)
(= (Prims.op_Equality Prims.int
x_e22ba7a032a73f6d0678d3d186686631_2
(BoxInt 0))
@x2)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=<input>(36,19-36,25)
(or label_21

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(>= (BoxInt_proj_0 (Prims.op_Subtraction x_e22ba7a032a73f6d0678d3d186686631_2
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.nat)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x3
(Prims.op_Subtraction x_e22ba7a032a73f6d0678d3d186686631_2
(BoxInt 1)))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=<input>(33,0-38,33); use=<input>(37,23-37,26)
(or label_22

;; def=<input>(33,0-38,33); use=<input>(33,0-38,33)
(Valid 
;; def=<input>(33,0-38,33); use=<input>(33,0-38,33)
(Prims.precedes Prims.lex_t
Prims.lex_t
(LexCons x_e22ba7a032a73f6d0678d3d186686631_0
(LexCons x_e22ba7a032a73f6d0678d3d186686631_1
(LexCons @x3
Prims.LexTop@tok)))
(LexCons x_e22ba7a032a73f6d0678d3d186686631_0
(LexCons x_e22ba7a032a73f6d0678d3d186686631_1
(LexCons x_e22ba7a032a73f6d0678d3d186686631_2
Prims.LexTop@tok))))
)
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.nat)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x4
@x3)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,44-188,74); use=<input>(37,4-37,17)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=<input>(31,45-31,82); use=<input>(37,4-37,17)
(= (RSA.pow (RSA.pow x_e22ba7a032a73f6d0678d3d186686631_0
x_e22ba7a032a73f6d0678d3d186686631_1)
@x3)
(RSA.pow x_e22ba7a032a73f6d0678d3d186686631_0
(Prims.op_Multiply x_e22ba7a032a73f6d0678d3d186686631_1
@x3)))


;; def=<input>(31,39-37,4); use=<input>(37,4-37,4)
(= @x5
(RSA.lemma_pow_mul x_e22ba7a032a73f6d0678d3d186686631_0
x_e22ba7a032a73f6d0678d3d186686631_1
@x4))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x6
@x5)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=<input>(38,23-38,33)
(or label_23

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(>= (BoxInt_proj_0 (Prims.op_Multiply x_e22ba7a032a73f6d0678d3d186686631_1
@x3))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.nat)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x7
(Prims.op_Multiply x_e22ba7a032a73f6d0678d3d186686631_1
@x3))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,44-188,74); use=<input>(38,4-38,17)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=<input>(22,47-22,86); use=<input>(38,4-38,17)
(= (RSA.pow x_e22ba7a032a73f6d0678d3d186686631_0
(Prims.op_Addition x_e22ba7a032a73f6d0678d3d186686631_1
(Prims.op_Multiply x_e22ba7a032a73f6d0678d3d186686631_1
@x3)))
(Prims.op_Multiply (RSA.pow x_e22ba7a032a73f6d0678d3d186686631_0
x_e22ba7a032a73f6d0678d3d186686631_1)
(RSA.pow x_e22ba7a032a73f6d0678d3d186686631_0
(Prims.op_Multiply x_e22ba7a032a73f6d0678d3d186686631_1
@x3))))


;; def=<input>(22,41-38,4); use=<input>(38,4-38,4)
(= @x8
(RSA.lemma_pow_add x_e22ba7a032a73f6d0678d3d186686631_0
x_e22ba7a032a73f6d0678d3d186686631_1
@x7))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x9
@x8)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(ApplyTT @x1
@x9)
)
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<labels>")
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "</labels>")
(echo "Done!")
(pop)

; Ending query at <input>(33,0-38,33)
(pop)
(push)

; Starting query at <input>(34,5-34,11)
;;;;;;;;;;;;;;;;g#163592 : Prims.nat (Prims.nat)
(declare-fun x_e22ba7a032a73f6d0678d3d186686631_0 () Term)
;;;;;;;;;;;;;;;;binder_x_e22ba7a032a73f6d0678d3d186686631_0
;;; Fact-ids: 
(assert (! (HasType x_e22ba7a032a73f6d0678d3d186686631_0
Prims.nat)
:named binder_x_e22ba7a032a73f6d0678d3d186686631_0))
;;;;;;;;;;;;;;;;e1#163593 : Prims.nat (Prims.nat)
(declare-fun x_e22ba7a032a73f6d0678d3d186686631_1 () Term)
;;;;;;;;;;;;;;;;binder_x_e22ba7a032a73f6d0678d3d186686631_1
;;; Fact-ids: 
(assert (! (HasType x_e22ba7a032a73f6d0678d3d186686631_1
Prims.nat)
:named binder_x_e22ba7a032a73f6d0678d3d186686631_1))
;;;;;;;;;;;;;;;;e2#163594 : Prims.nat (Prims.nat)
(declare-fun x_e22ba7a032a73f6d0678d3d186686631_2 () Term)
;;;;;;;;;;;;;;;;binder_x_e22ba7a032a73f6d0678d3d186686631_2
;;; Fact-ids: 
(assert (! (HasType x_e22ba7a032a73f6d0678d3d186686631_2
Prims.nat)
:named binder_x_e22ba7a032a73f6d0678d3d186686631_2))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun RSA.lemma_pow_mul (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun RSA.lemma_pow_mul@tok () Term)
(declare-fun label_24 () Bool)
(push)

; <fuel='1' ifuel='1'>
;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43); use=<input>(34,5-34,11)
(or label_24

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43)
(Prims.hasEq Prims.int)
)
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<labels>")
(echo "label_24")
(eval label_24)
(echo "</labels>")
(echo "Done!")
(pop)

; Ending query at <input>(34,5-34,11)
(pop)

; encoding sigelt lemma_pow_mul

; <Start encoding RSA.lemma_pow_mul>
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun RSA.lemma_pow_mul (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun RSA.lemma_pow_mul@tok () Term)

; </end encoding RSA.lemma_pow_mul>
(push)

; 

; encoding sigelt fast_pow

; <Skipped RSA.fast_pow/>
(push)

; 
(push)

; Starting query at <input>(47,0-52,42)
;;;;;;;;;;;;;;;;g#164797 : Prims.nat (Prims.nat)
(declare-fun x_e22ba7a032a73f6d0678d3d186686631_0 () Term)
;;;;;;;;;;;;;;;;binder_x_e22ba7a032a73f6d0678d3d186686631_0
;;; Fact-ids: 
(assert (! (HasType x_e22ba7a032a73f6d0678d3d186686631_0
Prims.nat)
:named binder_x_e22ba7a032a73f6d0678d3d186686631_0))
;;;;;;;;;;;;;;;;e#164798 : Prims.nat (Prims.nat)
(declare-fun x_e22ba7a032a73f6d0678d3d186686631_1 () Term)
;;;;;;;;;;;;;;;;binder_x_e22ba7a032a73f6d0678d3d186686631_1
;;; Fact-ids: 
(assert (! (HasType x_e22ba7a032a73f6d0678d3d186686631_1
Prims.nat)
:named binder_x_e22ba7a032a73f6d0678d3d186686631_1))
(declare-fun RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 @x0
@x1)
Tm_type)
 

:pattern ((HasType (RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 @x0
@x1)
Tm_type))
:qid refinement_kinding_RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05))
:named refinement_kinding_RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: 
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (exists ((@x2 Term))
 (! (and (HasType @x2
@x0)

;; def=<input>(47,0-52,42); use=<input>(47,0-52,42)
(Valid 
;; def=<input>(47,0-52,42); use=<input>(47,0-52,42)
(Prims.precedes Prims.lex_t
Prims.lex_t
(LexCons @x1
(LexCons @x2
Prims.LexTop@tok))
(LexCons x_e22ba7a032a73f6d0678d3d186686631_0
(LexCons x_e22ba7a032a73f6d0678d3d186686631_1
Prims.LexTop@tok)))
)
)
 
;;no pats
:qid ref_valid_RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05.1))
(Valid (RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 @x0
@x1)))
 

:pattern ((Valid (RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 @x0
@x1)))
:qid ref_valid_RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05))
:named ref_valid_RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05))
;;;;;;;;;;;;;;;;(uu___165487:Prims.nat{ Prims.LexCons uu___165479 (Prims.LexCons uu___165487 Prims.LexTop) <<...
;;; Fact-ids: 
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 @x2
@x3))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=<input>(47,0-52,42); use=<input>(47,0-52,42)
(Valid 
;; def=<input>(47,0-52,42); use=<input>(47,0-52,42)
(Prims.precedes Prims.lex_t
Prims.lex_t
(LexCons @x3
(LexCons @x1
Prims.LexTop@tok))
(LexCons x_e22ba7a032a73f6d0678d3d186686631_0
(LexCons x_e22ba7a032a73f6d0678d3d186686631_1
Prims.LexTop@tok)))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 @x2
@x3)))
:qid refinement_interpretation_RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05))
:named refinement_interpretation_RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05))
;;;;;;;;;;;;;;;;haseq for RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05
;;; Fact-ids: 
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 @x0
@x1)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 @x0
@x1))))
:qid haseqRSA_Tm_refine_624ef29c7805f93d838e844861cc5a05))
:named haseqRSA_Tm_refine_624ef29c7805f93d838e844861cc5a05))
(declare-fun RSA.fast_pow (Term Term) Term)
;;;;;;;;;;;;;;;;uu___165499:Prims.nat ->...
(declare-fun Tm_arrow_1c496d3b07bf957f1346748ef6c918a0 (Term) Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_1c496d3b07bf957f1346748ef6c918a0
;;; Fact-ids: 
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_1c496d3b07bf957f1346748ef6c918a0 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_1c496d3b07bf957f1346748ef6c918a0 @x0)
Tm_type))
:qid kinding_Tm_arrow_1c496d3b07bf957f1346748ef6c918a0))
:named kinding_Tm_arrow_1c496d3b07bf957f1346748ef6c918a0))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_1c496d3b07bf957f1346748ef6c918a0 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_1c496d3b07bf957f1346748ef6c918a0 @x2)))
:qid RSA_pre_typing_Tm_arrow_1c496d3b07bf957f1346748ef6c918a0))
:named RSA_pre_typing_Tm_arrow_1c496d3b07bf957f1346748ef6c918a0))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_1c496d3b07bf957f1346748ef6c918a0
;;; Fact-ids: 
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_1c496d3b07bf957f1346748ef6c918a0 @x1))
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
@x1)
(HasType @x3
(RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 @x1
@x2)))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x1))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid RSA_interpretation_Tm_arrow_1c496d3b07bf957f1346748ef6c918a0.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_1c496d3b07bf957f1346748ef6c918a0 @x1)))
:qid RSA_interpretation_Tm_arrow_1c496d3b07bf957f1346748ef6c918a0))
:named RSA_interpretation_Tm_arrow_1c496d3b07bf957f1346748ef6c918a0))
(declare-fun RSA.fast_pow@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT RSA.fast_pow@tok
@x0)
@x1)
(RSA.fast_pow @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT RSA.fast_pow@tok
@x0)
@x1))

:pattern ((RSA.fast_pow @x0
@x1))
:qid token_correspondence_RSA.fast_pow))
:named token_correspondence_RSA.fast_pow))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType RSA.fast_pow@tok
(Tm_arrow_1c496d3b07bf957f1346748ef6c918a0 Prims.nat)))
 

:pattern ((ApplyTT RSA.fast_pow@tok
@x0))

:pattern ((ApplyTT @x0
RSA.fast_pow@tok))
:qid function_token_typing_RSA.fast_pow))
:named function_token_typing_RSA.fast_pow))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 Prims.nat
@x0)))
(HasType (RSA.fast_pow @x0
@x1)
Prims.nat))
 

:pattern ((RSA.fast_pow @x0
@x1))
:qid typing_RSA.fast_pow))
:named typing_RSA.fast_pow))
(declare-fun label_30 () Bool)
(declare-fun label_29 () Bool)
(declare-fun label_28 () Bool)
(declare-fun label_27 () Bool)
(declare-fun label_26 () Bool)
(declare-fun label_25 () Bool)
(push)

; <fuel='1' ifuel='1'>
;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(159,5-161,10); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.nat))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(159,5-161,10); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(forall ((@x1 Term))
 (! (iff 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,46-160,49); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,46-160,49); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(ApplyTT @x0
@x1)
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(170,68-170,72); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(183,22-183,34)
true
)
 :weight 0


:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(103,47-103,70); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(176,22-176,39)
(and (implies 
;; def=<input>(47,19-49,4); use=<input>(48,8-49,4)
(= x_e22ba7a032a73f6d0678d3d186686631_1
(BoxInt 0))


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=<input>(49,9-49,10)
(or label_26

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(BoxBool_proj_0 (BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x1
(BoxInt 1))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(ApplyTT @x0
@x1)
)
)
 
;;no pats
:qid @query.2))
)
)
(implies 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(103,61-103,63); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(176,22-176,39)
(not 
;; def=<input>(47,19-49,4); use=<input>(48,8-49,4)
(= x_e22ba7a032a73f6d0678d3d186686631_1
(BoxInt 0))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(166,90-166,110); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(179,22-179,35)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
Prims.nat)

;; def=<input>(47,19-50,4); use=<input>(48,8-50,4)
(= x_e22ba7a032a73f6d0678d3d186686631_1
@x1)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25); use=<input>(51,22-51,23)
(or label_27

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25)
(BoxBool_proj_0 (BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x2
(BoxInt 2))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x3
(Prims.op_Division x_e22ba7a032a73f6d0678d3d186686631_1
@x2))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=<input>(51,19-51,24)
(or label_28

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(>= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.nat)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x4
@x3)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.nat)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x5
(RSA.pow x_e22ba7a032a73f6d0678d3d186686631_0
@x4))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25); use=<input>(52,22-52,23)
(or label_29

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25)
(BoxBool_proj_0 (BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x6
(BoxInt 2))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x7
(Prims.op_Modulus x_e22ba7a032a73f6d0678d3d186686631_1
@x6))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.bool)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x8
(Prims.op_Equality Prims.int
@x7
(BoxInt 0)))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(159,5-161,10); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Prims.pure_post Prims.int))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(159,5-161,10); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(forall ((@x10 Term))
 (! (iff 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,46-160,49); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,46-160,49); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(ApplyTT @x9
@x10)
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x11
(Prims.op_Multiply (Prims.op_Multiply @x5
@x5)
@x10))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=<input>(52,4-52,42)
(or label_30

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(>= (BoxInt_proj_0 @x11)
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.nat)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x12
@x11)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(ApplyTT @x0
@x12)
)
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
 :weight 0


:pattern ((ApplyTT @x9
@x10))
:qid @query.12))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(103,47-103,70); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(176,22-176,39)
(and (implies 
;; def=<input>(52,33-52,18); use=<input>(52,33-52,18)
(= @x8
(BoxBool true))


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x10
(BoxInt 1))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(ApplyTT @x9
@x10)
)
)
 
;;no pats
:qid @query.15))
)
(implies 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(103,61-103,63); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(176,22-176,39)
(not 
;; def=<input>(52,33-52,18); use=<input>(52,33-52,18)
(= @x8
(BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(166,90-166,110); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(179,22-179,35)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.bool)

;; def=<input>(52,40-52,18); use=<input>(52,40-52,18)
(= @x8
@x10)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.nat)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x11
x_e22ba7a032a73f6d0678d3d186686631_0)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(ApplyTT @x9
@x11)
)
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.3))
))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<labels>")
(echo "label_30")
(eval label_30)
(echo "label_29")
(eval label_29)
(echo "label_28")
(eval label_28)
(echo "label_27")
(eval label_27)
(echo "label_26")
(eval label_26)
(echo "label_25")
(eval label_25)
(echo "</labels>")
(echo "Done!")
(pop)

; Ending query at <input>(47,0-52,42)
(pop)
(push)

; Starting query at <input>(52,18-52,27)
;;;;;;;;;;;;;;;;g#164797 : Prims.nat (Prims.nat)
(declare-fun x_e22ba7a032a73f6d0678d3d186686631_0 () Term)
;;;;;;;;;;;;;;;;binder_x_e22ba7a032a73f6d0678d3d186686631_0
;;; Fact-ids: 
(assert (! (HasType x_e22ba7a032a73f6d0678d3d186686631_0
Prims.nat)
:named binder_x_e22ba7a032a73f6d0678d3d186686631_0))
;;;;;;;;;;;;;;;;e#164798 : Prims.nat (Prims.nat)
(declare-fun x_e22ba7a032a73f6d0678d3d186686631_1 () Term)
;;;;;;;;;;;;;;;;binder_x_e22ba7a032a73f6d0678d3d186686631_1
;;; Fact-ids: 
(assert (! (HasType x_e22ba7a032a73f6d0678d3d186686631_1
Prims.nat)
:named binder_x_e22ba7a032a73f6d0678d3d186686631_1))
(declare-fun RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (HasType (RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 @x0
@x1)
Tm_type)
 

:pattern ((HasType (RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 @x0
@x1)
Tm_type))
:qid refinement_kinding_RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05))
:named refinement_kinding_RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05))
;;;;;;;;;;;;;;;;validity axiom for refinement
;;; Fact-ids: 
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (exists ((@x2 Term))
 (! (and (HasType @x2
@x0)

;; def=<input>(47,0-52,42); use=<input>(47,0-52,42)
(Valid 
;; def=<input>(47,0-52,42); use=<input>(47,0-52,42)
(Prims.precedes Prims.lex_t
Prims.lex_t
(LexCons @x1
(LexCons @x2
Prims.LexTop@tok))
(LexCons x_e22ba7a032a73f6d0678d3d186686631_0
(LexCons x_e22ba7a032a73f6d0678d3d186686631_1
Prims.LexTop@tok)))
)
)
 
;;no pats
:qid ref_valid_RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05.1))
(Valid (RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 @x0
@x1)))
 

:pattern ((Valid (RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 @x0
@x1)))
:qid ref_valid_RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05))
:named ref_valid_RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05))
;;;;;;;;;;;;;;;;(uu___165582:Prims.nat{ Prims.LexCons uu___165574 (Prims.LexCons uu___165582 Prims.LexTop) <<...
;;; Fact-ids: 
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 @x2
@x3))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=<input>(47,0-52,42); use=<input>(47,0-52,42)
(Valid 
;; def=<input>(47,0-52,42); use=<input>(47,0-52,42)
(Prims.precedes Prims.lex_t
Prims.lex_t
(LexCons @x3
(LexCons @x1
Prims.LexTop@tok))
(LexCons x_e22ba7a032a73f6d0678d3d186686631_0
(LexCons x_e22ba7a032a73f6d0678d3d186686631_1
Prims.LexTop@tok)))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 @x2
@x3)))
:qid refinement_interpretation_RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05))
:named refinement_interpretation_RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05))
;;;;;;;;;;;;;;;;haseq for RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05
;;; Fact-ids: 
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 @x0
@x1)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 @x0
@x1))))
:qid haseqRSA_Tm_refine_624ef29c7805f93d838e844861cc5a05))
:named haseqRSA_Tm_refine_624ef29c7805f93d838e844861cc5a05))
(declare-fun RSA.fast_pow (Term Term) Term)
;;;;;;;;;;;;;;;;uu___165594:Prims.nat ->...
(declare-fun Tm_arrow_1c496d3b07bf957f1346748ef6c918a0 (Term) Term)

;;;;;;;;;;;;;;;;kinding_Tm_arrow_1c496d3b07bf957f1346748ef6c918a0
;;; Fact-ids: 
(assert (! (forall ((@x0 Term))
 (! (HasType (Tm_arrow_1c496d3b07bf957f1346748ef6c918a0 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_1c496d3b07bf957f1346748ef6c918a0 @x0)
Tm_type))
:qid kinding_Tm_arrow_1c496d3b07bf957f1346748ef6c918a0))
:named kinding_Tm_arrow_1c496d3b07bf957f1346748ef6c918a0))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_1c496d3b07bf957f1346748ef6c918a0 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_1c496d3b07bf957f1346748ef6c918a0 @x2)))
:qid RSA_pre_typing_Tm_arrow_1c496d3b07bf957f1346748ef6c918a0))
:named RSA_pre_typing_Tm_arrow_1c496d3b07bf957f1346748ef6c918a0))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_1c496d3b07bf957f1346748ef6c918a0
;;; Fact-ids: 
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_1c496d3b07bf957f1346748ef6c918a0 @x1))
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
@x1)
(HasType @x3
(RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 @x1
@x2)))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x1))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid RSA_interpretation_Tm_arrow_1c496d3b07bf957f1346748ef6c918a0.1)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_1c496d3b07bf957f1346748ef6c918a0 @x1)))
:qid RSA_interpretation_Tm_arrow_1c496d3b07bf957f1346748ef6c918a0))
:named RSA_interpretation_Tm_arrow_1c496d3b07bf957f1346748ef6c918a0))
(declare-fun RSA.fast_pow@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT RSA.fast_pow@tok
@x0)
@x1)
(RSA.fast_pow @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT RSA.fast_pow@tok
@x0)
@x1))

:pattern ((RSA.fast_pow @x0
@x1))
:qid token_correspondence_RSA.fast_pow))
:named token_correspondence_RSA.fast_pow))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType RSA.fast_pow@tok
(Tm_arrow_1c496d3b07bf957f1346748ef6c918a0 Prims.nat)))
 

:pattern ((ApplyTT RSA.fast_pow@tok
@x0))

:pattern ((ApplyTT @x0
RSA.fast_pow@tok))
:qid function_token_typing_RSA.fast_pow))
:named function_token_typing_RSA.fast_pow))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(RSA_Tm_refine_624ef29c7805f93d838e844861cc5a05 Prims.nat
@x0)))
(HasType (RSA.fast_pow @x0
@x1)
Prims.nat))
 

:pattern ((RSA.fast_pow @x0
@x1))
:qid typing_RSA.fast_pow))
:named typing_RSA.fast_pow))
(declare-fun label_31 () Bool)
(push)

; <fuel='1' ifuel='1'>
;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Prims.nat))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43); use=<input>(52,18-52,27)
(or label_31

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43)
(Prims.hasEq Prims.int)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<labels>")
(echo "label_31")
(eval label_31)
(echo "</labels>")
(echo "Done!")
(pop)

; Ending query at <input>(52,18-52,27)
(pop)

; encoding sigelt fast_pow

; <Start encoding RSA.fast_pow>
;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun RSA.fast_pow.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun RSA.fast_pow.fuel_instrumented_token () Term)
(declare-fun RSA.fast_pow (Term Term) Term)
(declare-fun RSA.fast_pow@tok () Term)

;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name RSA.fast_pow; Namespace RSA
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT RSA.fast_pow@tok
@x0)
@x1)
(RSA.fast_pow @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT RSA.fast_pow@tok
@x0)
@x1))

:pattern ((RSA.fast_pow @x0
@x1))
:qid token_correspondence_RSA.fast_pow))
:named token_correspondence_RSA.fast_pow))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name RSA.fast_pow; Namespace RSA
(assert (! (forall ((@x0 Term))
 (! (NoHoist @x0
(HasType RSA.fast_pow@tok
(Tm_arrow_44faff5d8543c30ad9bf2eeaf1b3abcf Prims.nat)))
 

:pattern ((ApplyTT RSA.fast_pow@tok
@x0))

:pattern ((ApplyTT @x0
RSA.fast_pow@tok))
:qid function_token_typing_RSA.fast_pow))
:named function_token_typing_RSA.fast_pow))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name RSA.fast_pow; Namespace RSA
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Prims.nat))
(HasType (RSA.fast_pow @x0
@x1)
Prims.nat))
 

:pattern ((RSA.fast_pow @x0
@x1))
:qid typing_RSA.fast_pow))
:named typing_RSA.fast_pow))
;;;;;;;;;;;;;;;;Fuel token correspondence
;;; Fact-ids: Name RSA.fast_pow; Namespace RSA
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTF RSA.fast_pow.fuel_instrumented_token
@u0)
@x1)
@x2)
(RSA.fast_pow.fuel_instrumented @u0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTF RSA.fast_pow.fuel_instrumented_token
@u0)
@x1)
@x2))
:qid fuel_token_correspondence_RSA.fast_pow.fuel_instrumented_token))
:named fuel_token_correspondence_RSA.fast_pow.fuel_instrumented_token))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name RSA.fast_pow; Namespace RSA
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
Prims.nat))
(HasType (RSA.fast_pow.fuel_instrumented @u0
@x1
@x2)
Prims.nat))
 

:pattern ((RSA.fast_pow.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_RSA.fast_pow.fuel_instrumented))
:named token_correspondence_RSA.fast_pow.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name RSA.fast_pow; Namespace RSA
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (= (RSA.fast_pow @x0
@x1)
(RSA.fast_pow.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((RSA.fast_pow @x0
@x1))
:qid @fuel_correspondence_RSA.fast_pow.fuel_instrumented))
:named @fuel_correspondence_RSA.fast_pow.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name RSA.fast_pow; Namespace RSA
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (RSA.fast_pow.fuel_instrumented (SFuel @u0)
@x1
@x2)
(RSA.fast_pow.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((RSA.fast_pow.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_RSA.fast_pow.fuel_instrumented))
:named @fuel_irrelevance_RSA.fast_pow.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: RSA.fast_pow
;;; Fact-ids: Name RSA.fast_pow; Namespace RSA
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (RSA.fast_pow.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 @x2))
(ite (= @lb3
(BoxInt 0))
(BoxInt 1)
(Prims.op_Multiply (Prims.op_Multiply (RSA.pow @x1
(Prims.op_Division @x2
(BoxInt 2)))
(RSA.pow @x1
(Prims.op_Division @x2
(BoxInt 2))))
(let ((@lb4 (Prims.op_Equality Prims.int
(Prims.op_Modulus @x2
(BoxInt 2))
(BoxInt 0))))
(ite (= @lb4
(BoxBool true))
(BoxInt 1)
@x1))))))
 :weight 0


:pattern ((RSA.fast_pow.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_RSA.fast_pow.fuel_instrumented))
:named equation_with_fuel_RSA.fast_pow.fuel_instrumented))

; </end encoding RSA.fast_pow>
(push)

; 
(push)

; Starting query at <input>(56,42-56,66)
(declare-fun label_32 () Bool)
(push)

; <fuel='1' ifuel='1'>
;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Prims.nat))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43); use=<input>(56,42-56,66)
(or label_32

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<labels>")
(echo "label_32")
(eval label_32)
(echo "</labels>")
(echo "Done!")
(pop)

; Ending query at <input>(56,42-56,66)
(pop)

; encoding sigelt lemma_fast_pow

; <Skipped RSA.lemma_fast_pow/>
(push)

; 
(push)

; Starting query at <input>(61,0-72,24)
(declare-fun label_40 () Bool)
(declare-fun label_39 () Bool)
(declare-fun label_38 () Bool)
(declare-fun label_37 () Bool)
(declare-fun label_36 () Bool)
(declare-fun label_35 () Bool)
(declare-fun label_34 () Bool)
(declare-fun label_33 () Bool)
(push)

; <fuel='1' ifuel='1'>
;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Prims.nat))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(164,8-164,47); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(178,22-178,35)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.pure_post Prims.unit))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,44-188,74); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,44-188,74)
(forall ((@x3 Term))
 (! (implies (and (or label_33
(HasType @x3
Prims.unit))

;; def=<input>(56,42-56,66); use=<input>(56,42-56,66)
(or label_34

;; def=<input>(56,42-56,66); use=<input>(56,42-56,66)
(= (RSA.fast_pow @x0
@x1)
(RSA.pow @x0
@x1))
)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73)
(ApplyTT @x2
@x3)
)
)
 

:pattern (
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73)
(ApplyTT @x2
@x3)
)
)
:qid @query.2))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(159,5-161,10); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(159,5-161,10); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(forall ((@x4 Term))
 (! (iff 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,46-160,49); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,46-160,49); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(ApplyTT @x3
@x4)
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,55-160,61); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,55-160,61); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(ApplyTT @x2
@x4)
)
)
 :weight 0


:pattern ((ApplyTT @x3
@x4))
:qid @query.4))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(103,47-103,70); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(176,22-176,39)
(and (implies 
;; def=<input>(62,16-62,5); use=<input>(62,16-62,5)
(= (Prims.op_Equality Prims.int
@x1
(BoxInt 0))
(BoxBool true))


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x4
Tm_unit)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(ApplyTT @x3
@x4)
)
)
 
;;no pats
:qid @query.5))
)
(implies 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(103,61-103,63); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(176,22-176,39)
(not 
;; def=<input>(62,16-62,5); use=<input>(62,16-62,5)
(= (Prims.op_Equality Prims.int
@x1
(BoxInt 0))
(BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(166,90-166,110); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(179,22-179,35)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.bool)

;; def=<input>(62,5-63,4); use=<input>(62,5-63,4)
(= (Prims.op_Equality Prims.int
@x1
(BoxInt 0))
@x4)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25); use=<input>(63,15-63,16)
(or label_35

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25)
(BoxBool_proj_0 (BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x5
(BoxInt 2))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x6
(Prims.op_Division @x1
@x5))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25); use=<input>(64,14-64,15)
(or label_36

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25)
(BoxBool_proj_0 (BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x7
(BoxInt 2))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x8
(Prims.op_Modulus @x1
@x7))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=<input>(66,20-66,28)
(or label_37

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(>= (BoxInt_proj_0 (Prims.op_Multiply (BoxInt 2)
@x6))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.nat)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x9
(Prims.op_Multiply (BoxInt 2)
@x6))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=<input>(66,29-66,30)
(or label_38

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(>= (BoxInt_proj_0 @x8)
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x10
@x8)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,44-188,74); use=<input>(66,4-66,17)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.unit)

;; def=<input>(22,47-22,86); use=<input>(66,4-66,17)
(= (RSA.pow @x0
(Prims.op_Addition (Prims.op_Multiply (BoxInt 2)
@x6)
@x8))
(Prims.op_Multiply (RSA.pow @x0
(Prims.op_Multiply (BoxInt 2)
@x6))
(RSA.pow @x0
@x8)))


;; def=<input>(22,41-66,4); use=<input>(66,4-66,4)
(= @x11
(RSA.lemma_pow_add @x0
@x9
@x10))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x12
@x11)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(159,5-161,10); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(Prims.pure_post Prims.int))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(159,5-161,10); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(forall ((@x14 Term))
 (! (iff 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,46-160,49); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,46-160,49); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(ApplyTT @x13
@x14)
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=<input>(72,20-72,22)
(or label_39

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(>= (BoxInt_proj_0 @x6)
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x15
@x6)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=<input>(72,23-72,24)
(or label_40

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(BoxBool_proj_0 (BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x16
(BoxInt 2))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,44-188,74); use=<input>(72,4-72,17)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.unit)

;; def=<input>(31,45-31,82); use=<input>(72,4-72,17)
(= (RSA.pow (RSA.pow @x0
@x6)
(BoxInt 2))
(RSA.pow @x0
(Prims.op_Multiply @x6
(BoxInt 2))))


;; def=<input>(31,39-72,4); use=<input>(72,4-72,4)
(= @x17
(RSA.lemma_pow_mul @x0
@x15
@x16))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
Prims.unit)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x18
@x17)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(ApplyTT @x3
@x18)
)
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.17))
)
)
 :weight 0


:pattern ((ApplyTT @x13
@x14))
:qid @query.16))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(103,47-103,70); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(176,22-176,39)
(and (implies 
;; def=<input>(68,26-68,15); use=<input>(68,26-68,15)
(= (Prims.op_Equality Prims.int
@x8
(BoxInt 0))
(BoxBool true))


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x14
(BoxInt 1))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(ApplyTT @x13
@x14)
)
)
 
;;no pats
:qid @query.21))
)
(implies 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(103,61-103,63); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(176,22-176,39)
(not 
;; def=<input>(68,26-68,15); use=<input>(68,26-68,15)
(= (Prims.op_Equality Prims.int
@x8
(BoxInt 0))
(BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(166,90-166,110); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(179,22-179,35)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.bool)

;; def=<input>(68,33-68,15); use=<input>(68,33-68,15)
(= (Prims.op_Equality Prims.int
@x8
(BoxInt 0))
@x14)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Prims.nat)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x15
@x0)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(ApplyTT @x13
@x15)
)
)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))
))
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<labels>")
(echo "label_40")
(eval label_40)
(echo "label_39")
(eval label_39)
(echo "label_38")
(eval label_38)
(echo "label_37")
(eval label_37)
(echo "label_36")
(eval label_36)
(echo "label_35")
(eval label_35)
(echo "label_34")
(eval label_34)
(echo "label_33")
(eval label_33)
(echo "</labels>")
(echo "Done!")
(pop)
(push)

; <fuel='1' ifuel='2'>
;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel (SFuel ZFuel)))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Prims.nat))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(164,8-164,47); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(178,22-178,35)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.pure_post Prims.unit))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,44-188,74); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,44-188,74)
(forall ((@x3 Term))
 (! (implies (and (or label_33
(HasType @x3
Prims.unit))

;; def=<input>(56,42-56,66); use=<input>(56,42-56,66)
(or label_34

;; def=<input>(56,42-56,66); use=<input>(56,42-56,66)
(= (RSA.fast_pow @x0
@x1)
(RSA.pow @x0
@x1))
)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73)
(ApplyTT @x2
@x3)
)
)
 

:pattern (
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73)
(ApplyTT @x2
@x3)
)
)
:qid @query.2))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(159,5-161,10); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(159,5-161,10); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(forall ((@x4 Term))
 (! (iff 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,46-160,49); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,46-160,49); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(ApplyTT @x3
@x4)
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,55-160,61); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,55-160,61); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(ApplyTT @x2
@x4)
)
)
 :weight 0


:pattern ((ApplyTT @x3
@x4))
:qid @query.4))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(103,47-103,70); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(176,22-176,39)
(and (implies 
;; def=<input>(62,16-62,5); use=<input>(62,16-62,5)
(= (Prims.op_Equality Prims.int
@x1
(BoxInt 0))
(BoxBool true))


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x4
Tm_unit)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(ApplyTT @x3
@x4)
)
)
 
;;no pats
:qid @query.5))
)
(implies 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(103,61-103,63); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(176,22-176,39)
(not 
;; def=<input>(62,16-62,5); use=<input>(62,16-62,5)
(= (Prims.op_Equality Prims.int
@x1
(BoxInt 0))
(BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(166,90-166,110); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(179,22-179,35)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.bool)

;; def=<input>(62,5-63,4); use=<input>(62,5-63,4)
(= (Prims.op_Equality Prims.int
@x1
(BoxInt 0))
@x4)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25); use=<input>(63,15-63,16)
(or label_35

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25)
(BoxBool_proj_0 (BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x5
(BoxInt 2))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x6
(Prims.op_Division @x1
@x5))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25); use=<input>(64,14-64,15)
(or label_36

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25)
(BoxBool_proj_0 (BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x7
(BoxInt 2))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x8
(Prims.op_Modulus @x1
@x7))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=<input>(66,20-66,28)
(or label_37

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(>= (BoxInt_proj_0 (Prims.op_Multiply (BoxInt 2)
@x6))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.nat)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x9
(Prims.op_Multiply (BoxInt 2)
@x6))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=<input>(66,29-66,30)
(or label_38

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(>= (BoxInt_proj_0 @x8)
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x10
@x8)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,44-188,74); use=<input>(66,4-66,17)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.unit)

;; def=<input>(22,47-22,86); use=<input>(66,4-66,17)
(= (RSA.pow @x0
(Prims.op_Addition (Prims.op_Multiply (BoxInt 2)
@x6)
@x8))
(Prims.op_Multiply (RSA.pow @x0
(Prims.op_Multiply (BoxInt 2)
@x6))
(RSA.pow @x0
@x8)))


;; def=<input>(22,41-66,4); use=<input>(66,4-66,4)
(= @x11
(RSA.lemma_pow_add @x0
@x9
@x10))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x12
@x11)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(159,5-161,10); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(Prims.pure_post Prims.int))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(159,5-161,10); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(forall ((@x14 Term))
 (! (iff 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,46-160,49); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,46-160,49); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(ApplyTT @x13
@x14)
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=<input>(72,20-72,22)
(or label_39

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(>= (BoxInt_proj_0 @x6)
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x15
@x6)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=<input>(72,23-72,24)
(or label_40

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(BoxBool_proj_0 (BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x16
(BoxInt 2))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,44-188,74); use=<input>(72,4-72,17)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.unit)

;; def=<input>(31,45-31,82); use=<input>(72,4-72,17)
(= (RSA.pow (RSA.pow @x0
@x6)
(BoxInt 2))
(RSA.pow @x0
(Prims.op_Multiply @x6
(BoxInt 2))))


;; def=<input>(31,39-72,4); use=<input>(72,4-72,4)
(= @x17
(RSA.lemma_pow_mul @x0
@x15
@x16))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
Prims.unit)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x18
@x17)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(ApplyTT @x3
@x18)
)
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.17))
)
)
 :weight 0


:pattern ((ApplyTT @x13
@x14))
:qid @query.16))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(103,47-103,70); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(176,22-176,39)
(and (implies 
;; def=<input>(68,26-68,15); use=<input>(68,26-68,15)
(= (Prims.op_Equality Prims.int
@x8
(BoxInt 0))
(BoxBool true))


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x14
(BoxInt 1))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(ApplyTT @x13
@x14)
)
)
 
;;no pats
:qid @query.21))
)
(implies 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(103,61-103,63); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(176,22-176,39)
(not 
;; def=<input>(68,26-68,15); use=<input>(68,26-68,15)
(= (Prims.op_Equality Prims.int
@x8
(BoxInt 0))
(BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(166,90-166,110); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(179,22-179,35)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.bool)

;; def=<input>(68,33-68,15); use=<input>(68,33-68,15)
(= (Prims.op_Equality Prims.int
@x8
(BoxInt 0))
@x14)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Prims.nat)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x15
@x0)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(ApplyTT @x13
@x15)
)
)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))
))
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<labels>")
(echo "label_40")
(eval label_40)
(echo "label_39")
(eval label_39)
(echo "label_38")
(eval label_38)
(echo "label_37")
(eval label_37)
(echo "label_36")
(eval label_36)
(echo "label_35")
(eval label_35)
(echo "label_34")
(eval label_34)
(echo "label_33")
(eval label_33)
(echo "</labels>")
(echo "Done!")
(pop)
(push)

; <fuel='4' ifuel='2'>
;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel (SFuel (SFuel ZFuel)))))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel (SFuel ZFuel)))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Prims.nat))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(164,8-164,47); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(178,22-178,35)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.pure_post Prims.unit))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,44-188,74); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,44-188,74)
(forall ((@x3 Term))
 (! (implies (and (or label_33
(HasType @x3
Prims.unit))

;; def=<input>(56,42-56,66); use=<input>(56,42-56,66)
(or label_34

;; def=<input>(56,42-56,66); use=<input>(56,42-56,66)
(= (RSA.fast_pow @x0
@x1)
(RSA.pow @x0
@x1))
)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73)
(ApplyTT @x2
@x3)
)
)
 

:pattern (
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,70-188,73)
(ApplyTT @x2
@x3)
)
)
:qid @query.2))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(159,5-161,10); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(159,5-161,10); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(forall ((@x4 Term))
 (! (iff 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,46-160,49); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,46-160,49); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(ApplyTT @x3
@x4)
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,55-160,61); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,55-160,61); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(ApplyTT @x2
@x4)
)
)
 :weight 0


:pattern ((ApplyTT @x3
@x4))
:qid @query.4))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(103,47-103,70); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(176,22-176,39)
(and (implies 
;; def=<input>(62,16-62,5); use=<input>(62,16-62,5)
(= (Prims.op_Equality Prims.int
@x1
(BoxInt 0))
(BoxBool true))


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x4
Tm_unit)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(ApplyTT @x3
@x4)
)
)
 
;;no pats
:qid @query.5))
)
(implies 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(103,61-103,63); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(176,22-176,39)
(not 
;; def=<input>(62,16-62,5); use=<input>(62,16-62,5)
(= (Prims.op_Equality Prims.int
@x1
(BoxInt 0))
(BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(166,90-166,110); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(179,22-179,35)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.bool)

;; def=<input>(62,5-63,4); use=<input>(62,5-63,4)
(= (Prims.op_Equality Prims.int
@x1
(BoxInt 0))
@x4)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25); use=<input>(63,15-63,16)
(or label_35

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25)
(BoxBool_proj_0 (BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x5
(BoxInt 2))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x6
(Prims.op_Division @x1
@x5))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25); use=<input>(64,14-64,15)
(or label_36

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(291,21-291,25)
(BoxBool_proj_0 (BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x7
(BoxInt 2))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x8
(Prims.op_Modulus @x1
@x7))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=<input>(66,20-66,28)
(or label_37

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(>= (BoxInt_proj_0 (Prims.op_Multiply (BoxInt 2)
@x6))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.nat)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x9
(Prims.op_Multiply (BoxInt 2)
@x6))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=<input>(66,29-66,30)
(or label_38

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(>= (BoxInt_proj_0 @x8)
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x10
@x8)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,44-188,74); use=<input>(66,4-66,17)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.unit)

;; def=<input>(22,47-22,86); use=<input>(66,4-66,17)
(= (RSA.pow @x0
(Prims.op_Addition (Prims.op_Multiply (BoxInt 2)
@x6)
@x8))
(Prims.op_Multiply (RSA.pow @x0
(Prims.op_Multiply (BoxInt 2)
@x6))
(RSA.pow @x0
@x8)))


;; def=<input>(22,41-66,4); use=<input>(66,4-66,4)
(= @x11
(RSA.lemma_pow_add @x0
@x9
@x10))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x12
@x11)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(159,5-161,10); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(Prims.pure_post Prims.int))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(159,5-161,10); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(forall ((@x14 Term))
 (! (iff 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,46-160,49); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(160,46-160,49); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(177,22-177,33)
(ApplyTT @x13
@x14)
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=<input>(72,20-72,22)
(or label_39

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(>= (BoxInt_proj_0 @x6)
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x15
@x6)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(167,76-167,85); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(180,22-180,35)
(and 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=<input>(72,23-72,24)
(or label_40

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(289,17-289,23)
(BoxBool_proj_0 (BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x16
(BoxInt 2))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(188,44-188,74); use=<input>(72,4-72,17)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.unit)

;; def=<input>(31,45-31,82); use=<input>(72,4-72,17)
(= (RSA.pow (RSA.pow @x0
@x6)
(BoxInt 2))
(RSA.pow @x0
(Prims.op_Multiply @x6
(BoxInt 2))))


;; def=<input>(31,39-72,4); use=<input>(72,4-72,4)
(= @x17
(RSA.lemma_pow_mul @x0
@x15
@x16))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
Prims.unit)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x18
@x17)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(ApplyTT @x3
@x18)
)
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.17))
)
)
 :weight 0


:pattern ((ApplyTT @x13
@x14))
:qid @query.16))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(103,47-103,70); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(176,22-176,39)
(and (implies 
;; def=<input>(68,26-68,15); use=<input>(68,26-68,15)
(= (Prims.op_Equality Prims.int
@x8
(BoxInt 0))
(BoxBool true))


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.int)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x14
(BoxInt 1))
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(ApplyTT @x13
@x14)
)
)
 
;;no pats
:qid @query.21))
)
(implies 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(103,61-103,63); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(176,22-176,39)
(not 
;; def=<input>(68,26-68,15); use=<input>(68,26-68,15)
(= (Prims.op_Equality Prims.int
@x8
(BoxInt 0))
(BoxBool true))
)


;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(166,90-166,110); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(179,22-179,35)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.bool)

;; def=<input>(68,33-68,15); use=<input>(68,33-68,15)
(= (Prims.op_Equality Prims.int
@x8
(BoxInt 0))
@x14)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,5-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Prims.nat)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,19-149,23); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(= @x15
@x0)
)

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(149,28-149,31); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(174,22-174,33)
(ApplyTT @x13
@x15)
)
)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))
))
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<labels>")
(echo "label_40")
(eval label_40)
(echo "label_39")
(eval label_39)
(echo "label_38")
(eval label_38)
(echo "label_37")
(eval label_37)
(echo "label_36")
(eval label_36)
(echo "label_35")
(eval label_35)
(echo "label_34")
(eval label_34)
(echo "label_33")
(eval label_33)
(echo "</labels>")
(echo "Done!")
(pop)

; Ending query at <input>(61,0-72,24)
(pop)
(push)

; Starting query at <input>(62,5-62,10)
(declare-fun label_41 () Bool)
(push)

; <fuel='1' ifuel='1'>
;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Prims.nat))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43); use=<input>(62,5-62,10)
(or label_41

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43)
(Prims.hasEq Prims.int)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<labels>")
(echo "label_41")
(eval label_41)
(echo "</labels>")
(echo "Done!")
(pop)

; Ending query at <input>(62,5-62,10)
(pop)
(push)

; Starting query at <input>(68,15-68,20)
(declare-fun label_42 () Bool)
(push)

; <fuel='1' ifuel='1'>
;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Prims.nat)
(HasType @x2
Prims.bool)
(HasType @x3
Prims.int)
(HasType @x4
Prims.int))

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43); use=<input>(68,15-68,20)
(or label_42

;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43)
(Valid 
;; def=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43); use=/home/hritcu/Projects/fstar/pub/bin/../ulib/prims.fst(231,36-231,43)
(Prims.hasEq Prims.int)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<labels>")
(echo "label_42")
(eval label_42)
(echo "</labels>")
(echo "Done!")
(pop)
