[INCLUDE=presentation]
Title         : Verified Effectful Programming in F*
Author        : Catalin Hritcu
Affiliation   : Inria Paris
Reveal Url    : reveal.js
Reveal Theme  : white
Colorizer     : ../stuff/fstarlang
Logo          : False
Html Header   :
    <script src="../stuff/script.js"></script>
    <link rel="stylesheet" href="../stuff/style.css" id="custom_style">
Package       : xypic
~Pre,~Code: language=fstarlang

~ MathDefs
[INCLUDE=../stuff/latex.tex]
~

# Verified Effectful Programming in F* #

~Center
[![fstar-logo]](https://www.fstar-lang.org)

**[C&#259;t&#259;lin Hri&#355;cu, Inria Paris](http://prosecco.gforge.inria.fr/personal/hritcu/)**

Tezos, Paris, 14 November 2018
~

[fstar-logo]: ../stuff/fstar-new.png { width=200px }


# The current F* team #

~Center
[**Microsoft Research, Inria Paris, Rosario, MIT, ...**]{color:DarkGreen;}
~

<!-- {font-size:xx-large} -->

~Columns
~~ Column {width 50%}
- Danel Ahman
- Benjamin Beurdouche
- Karthikeyan Bhargavan
- Barry Bond
- Antoine Delignat-Lavaud
- Victor Dumitrescu
- Cédric Fournet
- Chris Hawblitzel
- Cătălin Hriţcu
- Markulf Kohlweiss
- Qunyan Mangus
- Kenji Maillard
~~
~~ Column {width 50%}
- Asher Manning
- Guido Martínez
- Zoe Paraskevopoulou 
- Clément Pit-Claudel
- Jonathan Protzenko
- Tahina Ramananandro
- Aseem Rastogi
- **[Nikhil Swamy (benevolent dictator)]{color:DarkGreen}**
- Christoph M. Wintersteiger
- Santiago Zanella-Béguelin
- Gustavo Varo
- ...
~~
~

<!-------------------------------------------------------------------------------->

## Program verification: Shall the twain ever meet? ##

<!-- Two, mostly disjoint sides of program verification research -->

| [Interactive proof assistants]{color:DarkRed;} ||                                 | [Semi-automated verifiers of imperative programs]{color:DarkBlue;} ||
|:----------------------:|:-----------------------+:~{background-color:LightBlue}~~:+:--------------------------------:|:---------------------------------|
| Coq,                   | CompCert,              | \ \ *air*                       | Dafny,                           | Verve,                           |
| Isabelle,              | 4 colors,                  |                                 | FramaC,                          | IronClad,                        |
| Agda,                  | seL4,               |                                 | Why3                             | miTLS                            |
| Lean,                  |                | \ \ *gap*                       |                                  | Vale                             |

* **[In the left corner]{color:DarkRed;}**:
Very expressive logics (higher-order and often dependently-typed),
but purely functional <!-- programming -->

* **[In the right]{color:DarkBlue;}**:
effectful programming, SMT-based automation,\
but only first-order logic

<!------------------------------------------------------------------------------>

## Bridging the gap: F* ##

<!-- General-purpose -->
* **[Functional programming language with effects]{color:Black;}**
  - like OCaml, F#, Haskell, ...
  - F\* extracted to OCaml or F\# by default
  - [subset of F\* compiled to efficient C code](https://github.com/FStarLang/kremlin){color:Black;}

* **[Program verifier based on WPs and SMT]{color:DarkBlue;}**
  - like Dafny, FramaC, Why3, ...

* **[Interactive proof assistant based on dependent types]{color:DarkRed;}**
  <!-- - full dependency, inductive types, universe polymorphism -->
  - like Coq, Lean, Agda, ...

* {.fragment} Other tools in this space:
  - DML/ATS, HTT, Idris, Trellys/Zombie, CoqHammer, PML$_2$, ...
  <!-- - But F* is the closest to bridging the gap by nicely integrating these three things -->


<!-------------------------------------------------------------------------------->

## F* in action, at scale ##

* **[Functional programming language with effects]{color:Black;}**
  - F\* is programmed in F\*, but not (yet) verified

*  {.fragment} **[Program verifier based on WPs and SMT]{color:DarkBlue;}**
  - **[Project Everest](https://project-everest.github.io/)**: verify and deploy new, efficient HTTPS stack
      - [miTLS*](https://github.com/mitls/mitls-fstar): Verified reference implementation of TLS (1.2 and 1.3)
      - [HACL\*](https://github.com/mitls/hacl-star): High-Assurance Cryptographic Library
      - [Vale](https://github.com/project-everest/vale): Verified Assembly Language for Everest

*  {.fragment} **[Proof assistant based on dependent types]{color:DarkRed;}**
  - Fallback when SMT fails; also for mechanized metatheory:
    - [MicroFStar](https://github.com/FStarLang/FStar/blob/stratified_last/examples/metatheory/MicroFStar.fst): Fragment of F\* formalized in F\*
    - [Wys*](http://research.microsoft.com/en-us/um/people/nswamy/papers/wys.pdf): Verified DSL for secure multi-party computations
    - [ReVer](https://github.com/msr-quarc/ReVerC): Verified compiler to reversible circuits

<!-------------------------------------------------------------------------------->

## HACL\*: High-Assurance Cryptographic Library ##

- **Verified library implementing modern cryptographic primitives**

- Written in Low\* fragment of F\*, extracted to efficient and readable C

- **Shipping in Mozilla Firefox (NSS)**,
  **Wireguard (Linux)**, **Tezos**, RIOT OS, ...

- **Developed by**: Karthikeyan Bhargavan, Benjamin Beurdouche,
  Marina Polubelova, Jonathan Protzenko, Jean Karim Zinzindohoué, ...

<!-------------------------------------------------------------------------------->

## Interpreter and program logic for Michelson ##

![santiago]()

[santiago]: ../stuff/santiago.png { width=100% }

<!-- https://www.michelson-lang.com/ -->

<!-------------------------------------------------------------------------------->

## Marco's little prototype of an economic protocol ##

<!------------------------------------------------------------------------------>

<!-- ## Couple of wow slides on miTLS? ## -->
<!-- - modules and their verification status? -->
<!-- - miTLS integration in CURL/Edge (client) and nginx (server) [review #10] -->
<!-- - HACL* code faster than OpenSSL C code [review #42] -->

<!-- Dropped for time

## Experiment: Internet Explorer using miTLS*  ##

~Center
![schannel]\
(experimental integration also with cURL and nginx)
~

[schannel]: ../stuff/schannel.png { width=80% }
-->

<!------------------------------------------------------------------------------>

<!-- Dropped for time
## miTLS* modular architecture ##

~Center
![mitls]
~

[mitls]: ../stuff/mitls.png { width=100% }
-->

<!------------------------------------------------------------------------------>

<!-- Dropped for time
## HACL* performance competitive to most popular unverified C libraries (cycles / byte) ##

~Center
![hacl]\
Verification enables aggressive optimizations,\
without fear of getting them wrong
~

[hacl]: ../stuff/hacl.png { width=50% }
-->

<!------------------------------------------------------------------------------>

## The rest of this talk ##

* **The functional core of F***
    <!-- (refinements, Tot, Pure, Div) -->

* **Verifying functional programs**

* **Monadic effects in F***
    <!-- + adding/modeling effects using monads -->
    <!-- + code written in direct style, returns and binds automatically inserted -->
    <!-- + adding lifts, also automatically inserted -->
    <!-- + fancy state effect targeted at verification (HyperHeap) -->
    <!-- + fancy C memory model used by KreMLin (HyperStack) -->

- **Verifying effectful programs**
    <!-- - **Intrinsic verification** using weakest preconditions (Dijkstra monads) -->
    <!-- pre-post conditions -->
    <!-- Dijkstra monads for free -->
    <!-- - **Extrinsic verification** of terminating programs by monadic reification -->

* **Under the hood:** Dijkstra monads (for free)

* Using very simple examples throughout

<!------------------------------------------------------------------------------>

## The functional core of F* ##

~Fragment
Recursive functions
```
let rec factorial n = (if n = 0 then 1 else n * (factorial (n - 1)))
```
~

~Fragment
Inductive datatypes
```
type list (a:Type) =
  | Nil  : list a
  | Cons : hd:a -> tl:list a -> list a

val map : ('a -> 'b) -> list 'a -> list 'b
let rec map f x = match x with
  | [] -> []
  | h :: t -> f h :: map f t
```
~

~Fragment
Lambdas
```
map (fun x -> x + 42) [1;2;3]
```
~

<!------------------------------------------------------------------------------>

<!-- ## Beyond ML types ## -->

## Refinement types ##

```
type nat = x:int{x>=0}
```
~Fragment
Refinements introduced by type annotations (code unchanged)
```
val factorial : nat -> nat
let rec factorial n = (if n = 0 then 1 else n * (factorial (n - 1)))
```
~

~Fragment
Logical obligations discharged by SMT (simplified)
```text
n >= 0, n <> 0 |= n - 1 >= 0
n >= 0, n <> 0, (factorial (n - 1)) >= 0 |= n * (factorial (n - 1)) >= 0
```
~

~Fragment
Refinements eliminated by **subtyping**: `nat<:int`
```
let i : int = factorial 42
```
~

## Dependent types ##

Dependent function types ($\Pi$), here together with refinements:
```
val incr : x:int -> y:int{x < y}
let incr x = x + 1
```

~Fragment
Can express pre- and post- conditions of pure functions
```
val incr : x:int -> y:int{y = x + 1}
```
~

<!-- ~Fragment -->
<!-- Also useful together with inductives, of course -->
<!-- ``` -->
<!-- noeq type multi (#a:Type) (r : a -> a -> Type) : a -> a -> Type = -->
<!-- | Refl : x:a -> multi r x x -->
<!-- | Step : x:a -> y:a -> z:a -> r x y -> multi r y z -> multi r x z -->
<!-- ``` -->
<!-- ~ -->

## Total functions in F* ##

The F\* functions we saw so far were all **total**

`Tot` effect (default) = no side-effects, terminates on all inputs

```
val factorial : nat -> Tot nat
let rec factorial n = (if n = 0 then 1 else n * (factorial (n - 1)))
```

~Fragment
How about giving this weak type to factorial?
```
val factorial : int -> Tot int
```
~
~Fragment {.console}
```text
let rec factorial n = (if n = 0 then 1 else n * (factorial (n - 1)))
                                                            ^^^^^
Subtyping check failed; expected type (x:int{(x << n)}); got type int
```
`factorial (-1)` loops! (`int` type in F\* is unbounded)
~

## Semantic termination checking ##

* based on **well-founded ordering on expressions** (`<<`)
  - naturals related by `<` (negative integers unrelated)
  - inductives related by subterm ordering
  - lex tuples `%[a;b;c]` with lexicographic ordering
* {.fragment}order constraints discharged by the SMT solver
* {.fragment}arbitrary total expression as **decreases metric**
```
  let rec ackermann (n m : nat) : Tot nat (decreases %[m;n]) =
    if m=0 then n + 1
    else if n = 0 then ackermann 1 (m - 1)
    else ackermann (ackermann (n - 1) m) (m - 1)
```
* {.fragment}default metric is lex ordering of all (non-function) args
```
  let rec ackermann (m n : nat) : Tot nat = ...
```

## The divergence effect (Dv) ##

We might not want to prove all code terminating
```
    val factorial : int -> Dv int
```

~Fragment
Some useful code really is not always terminating
```
val eval : exp -> Dv exp
let rec eval e =
  match e with
  | App (Lam x e1) e2 -> eval (subst x e2 e1)
  | App e1 e2 -> eval (App (eval e1) e2)
  | Lam x e1 -> Lam x (eval e1)
  | _ -> e
let main = eval (App (Lam 0 (App (Var 0) (Var 0)))
                     (Lam 0 (App (Var 0) (Var 0))))
```
~
~Fragment {.console}
```text
./Divergence.exe
```
~

## F* effect system encapsulates effectful code ##

Pure code cannot call potentially divergent code

~Fragment
Only pure code can appear in specifications
```
val factorial : int -> Dv int
```
~~Block {.console}
```text
    type tau = x:int{x = factorial (-1)}
                     ^^^^^^^^^^^^^^^^^^
Expected a pure expression; got an expression ... with effect "DIV"
```
~~
~
<!-- Cheating quite badly above since I don't want to tell them about ghost -->

~Fragment
Sub-effecting: `Tot t <: Dv t`\
(e.g. divergent code can include pure code)
```
incr 2 + factorial (-1) : Dv int
```
~

<!------------------------------------------------------------------------------>

## Verifying pure programs ## {#pure1}
### Variant #1: intrinsically (at definition time) ###

* Using refinement types (saw this already)
```
val factorial : nat -> Tot nat
```
* {.fragment}Can equivalently use pre- and post- conditions for this
```
val factorial : x:int -> Pure int (requires (x >= 0))
                                  (ensures (fun y -> y >= 0))
```
* {.fragment} Each **computation type** contains
  - *effect* (`Pure`, `Div`), *result type* (`int`),
     *spec* (e.g. pre and post)
* {.fragment}`Tot` can be seen as just an abbreviation
```
Tot t = Pure t (requires True) (ensures (fun _ -> True))
```

<!------------------------------------------------------------------------------>

## Verifying potentially divergent programs ##
### The only variant: intrinsically (partial correctness) ###

* Using refinement types
```
val factorial : nat -> Dv nat
```
* {.fragment}Or the `Div` computation type (pre- and post- conditions)
```
val eval_closed : e:exp -> Div exp (requires (closed e))
                                   (ensures (fun e' -> Lam? e' /\ closed e'))
let rec eval_closed e =
  match e with
  | App e1 e2 -> let Lam e1' = eval_closed e1 in
                 below_subst_beta 0 e1' e2;
                 eval_closed (subst (sub_beta e2) e1')
  | Lam e1 -> Lam e1
```
* {.fragment}`Dv` just an abbreviation
```
Dv t = Div t (requires True) (ensures (fun _ -> True))
```

<!------------------------------------------------------------------------------->

## Another way to look at this ##

* **Two classes of types** <!-- (syntax similar to call-by-push-value) -->
  - Value types (`t`): `int`, `list int`, ...
  - Computation types (`C`): `Tot t` &nbsp;&nbsp;and&nbsp;&nbsp; `Dv t`

* {.fragment} **Dependent function types** of the form: `x:t -> C`
  - side-effects in argument happen before the call, so value type

* {.fragment} **Two forms of refinement types**
  - **Refined value types**: `x:t{p}`
  - **Refined computation types**:
    - `Pure t pre post` &nbsp;&nbsp;and&nbsp;&nbsp; `Div t pre post`
    - these will get more interesting for more interesting effects

<!------------------------------------------------------------------------------>

## Verifying pure programs ## {#pure2}
### Variant #2: extrinsically using SMT-backed lemmas ###

```
let rec append (#a:Type) (xs ys : list a) : Tot (list a) =
  match xs with
  | [] -> ys
  | x :: xs' -> x :: append xs' ys
```
~Fragment
```
let rec append_length (#a:Type) (xs ys : list a) :
    Pure unit (requires True)
              (ensures (fun _ -> length (append xs ys) = length xs + length ys))
= match xs with
  | [] -> ()
  | x :: xs' -> append_length xs' ys
```
~
~Fragment
Syntax sugar (`Lemma`)
```
let rec append_length (#a:Type) (xs : list a) (ys : list a) :
    Lemma (ensures (length (append xs ys) = length xs + length ys)) = ...
```
~

<!------------------------------------------------------------------------------>

<!-- Dropped for space
## Often lemmas are unavoidable ##
<\!-- need lemma for 3 reasons:
- as before, this property is rather arbitrary
- this property is "relational" (2 calls to reverse)
- proof doesn't follow the structure of the program
-\->
```
let snoc l h = l @ [h]

val reverse: #a:Type -> list a -> Tot (list a)
let rec reverse (#a:Type) l =
  match l with
  | [] -> []
  | hd::tl -> snoc (reverse tl) hd

val rev_snoc: #a:Type -> l:list a -> h:a ->
  Lemma (reverse (snoc l h) == h::reverse l)
let rec rev_snoc (#a:Type) l h =
  match l with
  | [] -> ()
  | hd::tl -> rev_snoc tl h

val rev_involutive: #a:Type -> l:list a -> Lemma (reverse (reverse l) == l)
let rec rev_involutive (#a:Type) l =
  match l with
  | [] -> ()
  | hd::tl -> rev_involutive tl; rev_snoc (reverse tl) hd
```
-->

<!------------------------------------------------------------------------------>

## Verifying pure programs ## {#pure3}
### Variant #3: extrinsically using proof terms ###

```
val preservation : #e:exp -> #e':exp -> #g:env -> #t:typ ->
       ht:(typing g e t) -> hs:step e e' -> Tot (typing g e' t) (decreases ht)
let rec preservation #e #e' #g #t (TyApp h1 h2) hs =
  match hs with
  | SBeta tx e1' e2' -> substitution_beta h2 (TyLam?.hbody h1)
  | SApp1 e2' hs1   -> TyApp (preservation h1 hs1) h2
  | SApp2 e1' hs2   -> TyApp h1 (preservation h2 hs2)
```

~Fragment
```
val progress : #e:exp -> #t:typ -> h:typing empty e t ->
                         Pure (cexists (fun e' -> step e e'))
                              (requires (~ (is_value e)))
                              (ensures (fun _ -> True)) (decreases h)
let rec progress #e #t h =
  match h with
  | TyApp #g #e1 #e2 #t11 #t12 h1 h2 ->
     match e1 with
     | ELam t e1' -> ExIntro (subst (sub_beta e2) e1') (SBeta t e1' e2)
     | _          -> let ExIntro e1' h1' = progress h1 in
                     ExIntro (EApp e1' e2) (SApp1 e2 h1')
```
~

~Fragment
**Note:** match exhaustiveness check also semantic (via SMT)
~


<!------------------------------------------------------------------------------>

## The functional core of F\* ## {#fcore}

* **Dependent type theory variant**
  - $\lambda$, $\Pi$, inductives, matches, universe polymorphism

* {.fragment} **Recursion and semantic termination check**
  - potential non-termination is an effect

* {.fragment} **Refined value and computation types**
  -  with proof irrelevance, discharged by SMT (classical)

* {.fragment} **Subtyping and sub-effecting**
  <!-- - works well with refinement types -->

* {.fragment} **Extensional equality**
  - type conversion up to SMT

<!------------------------------------------------------------------------------>

## Monadic effects in F* ##

Effects defined using monads <!-- built from total functions -->
```
type st (mem:Type) (a:Type) = mem -> Tot (a * mem)
```

~Fragment
```
total new_effect {
 STATE_m (mem:Type) : a:Type -> Effect
 with repr = st mem;
      return = fun (a:Type) (x:a) (m:mem) -> x, m;
      bind = fun (a b:Type) (f:st mem a) (g:a -> st mem b) (m:mem) ->
             let z, m' = f m in g z m';
      get = fun () (m:mem) -> m, m;
      put = fun (m:mem) _ -> (), m  }
```
```
total new_effect STATE = STATE_m nat    // keeping it simple
```
~
* {.fragment} monadic definition is the **model** F\*  uses to verify stateful code
* {.fragment} state can be **primitively implemented** under the hood **or not**
  - for instance by ML heap or C stack+heap are primitive (but `STATE` is not)

<!------------------------------------------------------------------------------>

## Monadic lifts in F* ##

State and exception monad
```
let stexn a = nat -> Tot ((either a string) * nat))
```
```
new_effect {
  STEXN: a:Type -> Effect with
    repr    = stexn;
    return  = fun (a:Type) (x:a) s -> Inl x, s;
    bind    = fun (a b:Type) (f:stexn a) (g:a -> stexn b) s0 ->
                 let (r,s1) = f s0 in
                 match r with
                 | Inl ret -> Inl (g ret s1), s1
                 | Inr m -> Inr m, s1
    raise   = fun (a:Type) (msg:string) s -> Inr msg, s
}
```
```
sub_effect STATE ~> STEXN {
  lift = fun (a:Type) (e:st nat a) -> (fun s -> let (x,s') = e s in Inl x, s')
}
```

<!------------------------------------------------------------------------------>

## Programming with effects, in direct style ##

* In F\*, the programmer writes:
  ```
  let incr () =
      let x = STATE.get() in
      STATE.put (x + 1);
      let y = STATE.get() in
      assert (y > x)
  ```

* {.fragment} Made explicitly monadic via type and effect inference

  ```
  let incr () =
    STATE.bind (STATE.get ()) (fun x -> 
    STATE.bind (STATE.put (x + 1)) (fun _ ->
    STATE.bind (STATE.get ()) (fun y ->
    STATE.return (assert (y > x)))))
  ```

<!------------------------------------------------------------------------------>

## Programming with multiple effects

* Programmer writes:
  ```
    ( / ) : int -> x:int{x<>0} -> Tot int
    let divide_by (x:int) : STEXN unit ...
      = if x <> 0 then put (get () / x) else raise "Divide by zero"
  ```

* {.fragment}Elaborated to:
  ```
    let divide_by x = 
      if x <> 0 then STATE_STEXN.lift (STATE.bind (STATE.get())
                                        (fun n -> STATE.put (n / x)))
      else STEXN.raise "Divide by zero"
  ```

* {.fragment}F\* infers the least effect of each sub-term
    - automatically lifts computations to use the suitable effect
    <!-- - ensures that reasoning isn't needlessly polluted by unused effects -->

<!------------------------------------------------------------------------------>

## Verifying effectful programs ## {#effect1}
### Variant #1: intrinsically (at definition time) ###

* Hoare (type theory) style pre- and post-conditions

  ```
  val incr : unit -> ST unit (requires (fun n0 -> True))
                             (ensures (fun n0 _ n1 -> n1 = n0 + 1))
  let incr () =
      let x = STATE.get() in
      STATE.put (x + 1)
  ```
* {.fragment} Beyond what can be expressed with value refinements
* {.fragment} Now pre-condition is relation on initial states;
    post-condition is relation on initial states, result values, and final states
    - so *type* of pre- and post- conditions depends on the effect
    - the more complex the effect, the more complex the specs (and proofs)

<!------------------------------------------------------------------------------>

## Verifying effectful programs ## {#effect2}
### Variant #2: extrinsically (by monadic reification) ###

* Revealing pure effect representation
    ```
    STATE.reify (e : ST a pre post)
      : n0:nat -> Pure (a * nat) (requires (pre n0))
                                 (ensures (fun r -> post n0 (fst r) (snd r))
    ```

* {.fragment} Allows us to give weak specification to an effectful function
  ```
    let incr () : ST a (requires (fun _ -> True)) (ensures (fun _ _ _ -> True))
      = let n = STATE.get() in STATE.put (n + 1)
  ```

* {.fragment} ... then prove lemmas about reification of effectful computation
  ```
    let incr_increases (s0:s) : Lemma (snd (ST.reify (incr()) s0) = s0 + 1) = ()
  ```

* {.fragment} only works for code proved terminating

* {.fragment} reify/reflect only when the abstraction permits (e.g. ghost code)

<!-- TODO: more interesting example:
  - in which we also mix in some intrinsic reasoning (to justify pre-post)
  - sum_up / sum_dn example does show that well, but it's complex
  -->

<!------------------------------------------------------------------------------>

## Reification works quite well ##

* **Reducing effectful verification to pure verification**
    - ... for which F* has good support (e.g. SMT automation)

* **Recent experiments using this for "relational reasoning"**
    - Correctness of program transformations
    - Information flow control
    - Proofs of algorithmic optimizations (memoization, union-find)
    - Simple game-based cryptographic proofs

<!------------------------------------------------------------------------------>

## Tactics as a user-defined, non-primitive effect ##

<!------------------------------------------------------------------------------>

## Tactics (New, Experimental) ##

* F\* tactics written as **effectful F\* code** (inspired by Lean, Idris)

* have **access to F\*'s proof state** (and can efficiently roll it back)

* can **introspect on F\* terms** (deep embedding, simply typed)

* can be **[interpreted]{color:DarkRed}** by F\*'s normalizer or **[compiled to OCaml]{color:DarkGreen}**

* {.fragment} **user-defined, non-primitive effect**: proof state + exceptions

    ```
    noeq type __result a =
        | Success of a * proofstate
        | Failed  of string    //error message
                  * proofstate //the proofstate at time of failure

    let __tac (a:Type) = proofstate -> Tot (__result a)

    reifiable reflectable new_effect {
      TAC : a:Type -> Effect
      with repr     = __tac   ... }

    let tactic (a:Type) = unit -> Tac a
    ```

<!------------------------------------------------------------------------------>

## Tactics can discharge verification conditions (replacing SMT) ##

~Center
![tactics-assert_by_tactic]
~
[tactics-assert_by_tactic]: ../stuff/tactics-assert_by_tactic.png { heigth=50% }

<!------------------------------------------------------------------------------>

## Stepping through a proof ##

~Center
![tactics-assert_by_tactic.gif]
~
[tactics-assert_by_tactic.gif]: ../stuff/tactics-assert_by_tactic.gif { heigth=50% }

<!------------------------------------------------------------------------------>


## Tactics can massage verification conditions (complementing SMT) ##

~Center
![tactics-canon]
~
[tactics-canon]: ../stuff/tactics-canon.png { heigth=50% }

<!------------------------------------------------------------------------------>

## Tactics can synthesize F\* terms (metaprogramming) ##

~Center
![tactics-synth_by_tactic]
~
[tactics-synth_by_tactic]: ../stuff/tactics-synth_by_tactic.png { heigth=50% }

<!------------------------------------------------------------------------------>

## Some real uses of tactics ##

* **Non-linear arithmetic** (proof automation, reflective)

* **Bitvectors in Vale** (proof automation)

* **Separation logic** (proof automation)

* **Pattern matcher** (metaprogramming)

* **Efficient low-level parsers and printers** (metaprogramming)

* **Type classes** (metaprogramming)

<!------------------------------------------------------------------------------>

## Under the hood ##

### Weakest pre-conditions / Dijkstra monads ###

<!------------------------------------------------------------------------------>

## Computation types indexed by predicate transformers ##

Pre- and post- conditions are just syntactic sugar:
```
Pure t (pre : Type0) (post : t->Type0)
  = PURE t (fun k -> pre /\ forall y. post y ==> k y)
```
```
val factorial : x:int -> Pure int (requires (x >= 0)) (ensures (fun y -> y >= 0))
```
```
val factorial : x:int -> PURE int (fun k -> x >= 0 /\ forall y. y >= 0 ==> k y)
```
~Fragment
Same for user-defined effects, like state:
```
ST t (pre : nat -> Type0) (post : nat -> t -> nat -> Type0) 
  = STATE t (fun n0 k -> pre n0 /\ forall x n1. post n0 x n1 ==> k x n1)
```
```
val incr : unit -> ST unit (requires (fun n0 -> True))
                           (ensures (fun n0 _ n1 -> n1 = n0 + 1))
```
```
val incr : unit -> STATE unit (fun n0 k -> k () (n0 + 1))
```
~

## Computing weakest preconditions, by example ##
```
let incr () = STATE.bind (STATE.get()) (fun x -> STATE.put (x + 1))
```
~Fragment
By inferring type for `incr` against following interface:
```
STATE.get : unit -> STATE nat (STATE.get_wp())
STATE.put : n:nat -> STATE unit (STATE.put_wp n)
STATE.bind : STATE 'a 'wa ->
             (x:'a -> STATE 'b ('wb x)) ->
             STATE 'b (STATE.bind_wp 'wa 'wb)
```
... we compute the weakest precondition for `incr`
```
val incr : unit -> STATE unit
  (STATE.bind_wp (STATE.get_wp()) (fun x -> STATE.put_wp (x + 1)))
```
```
= (fun n0 k -> k () (n0 + 1)) 
```
~
~Fragment
**Generic way of computing weakest-preconditions for all effects**,
provided we have a monad on predicate transformers
~

## Predicate transformers monad for state ## 

### aka Dijkstra monad ###

```
let STATE.wp t = (t -> nat -> Type0) -> (nat -> Type0)
val STATE.return_wp : 'a -> Tot (STATE.wp 'a)
val STATE.bind_wp : (STATE.wp 'a) ->
                    ('a -> Tot (STATE.wp 'b)) ->
                      Tot (STATE.wp 'b)
val STATE.get_wp : unit -> Tot (STATE.wp nat)
val STATE.put_wp : nat -> Tot (STATE.wp unit)
```
~Fragment
we need to implement this Dijkstra monad:
```
let STATE.return_wp v = fun p -> p v
let STATE.bind_wp wp f = fun p -> wp (fun v -> f v p)
let STATE.get_wp () = fun p n0 -> p n0 n0
let STATE.put_wp n = fun p _ -> p () n
```
~
~Fragment
and for a while we wrote such things by hand;\
but this is **quite tricky** and comes with **strong proof obligations**\
(correctness with respect to effect definition, monad laws, ...)
~

## Dijkstra monads for free ## {#dm4f}
* {.fragment} The state predicate transformer:
```
STATE.wp t  = (t -> nat -> Type0) -> (nat -> Type0)
           ~= nat -> (t * nat -> Type0) -> Type0
```
* {.fragment} **... can be *automatically* derived**,\
  - by applying the **state monad transformer**
    ```
    StT M t = nat -> M (t * nat)
    ```
  - to the continuation monad with result `Type0` (i.e. transformer for `PURE` )
    ```
    Cont t = (t -> Type0) -> Type0
    ```
  
* {.fragment} **This works well for large class of monadic effects:**\
  state, exceptions, continuations, etc.

* {.fragment} From monadic effect definition we can derive a
  **correct-by-construction weakest-precondition calculus** for this effect.

<!-- TODO: take slides 8--12 and 14 from Guido's POPL talk -->

<!-- ## Formalization ## -->

<!-- * **Two calculi** -->
<!--   - DMF: simply-typed with an abstract base monad, and restricted;\ -->
<!--     used to **define** monads, actions, lifts -->
<!--   - EMF\*: dependently-typed, user-defined effects, reifying/reflecting -->

<!-- * {.fragment} **Two translations from well-typed DMF terms to EMF\*** -->
<!--   - `*`-translation: gives specification (selective CPS) -->
<!--   - elaboration: gives implementation (essentially an identity) -->

<!-- * {.fragment} **`*`-trans gives correct Dijkstra monad for elaborated terms** -->

<!-- ## Graphically ## -->

<!-- ~Center -->
<!-- ![dm4free] -->
<!-- ~ -->

<!-- [dm4free]: ../stuff/dm4free.png { width=100% } -->


<!-- ## Correct reasoning about PURE ## -->

<!-- * `PURE` is the only primitive EMF\* effect (F\* also has `DIV`) -->

<!-- * {.fragment} A WP for `PURE` is of type  -->
<!--   ``` -->
<!--   PURE.wp t = (t -> Type0) -> Type0 -->
<!--   ``` -->
<!--     - Dijkstra monad for `PURE` is **exactly the continuation monad** -->

<!-- * {.fragment} **Total Correctness of `PURE`:**\ -->
<!--   If `⊢ e : PURE t wp` &nbsp;&nbsp;and&nbsp;&nbsp; `⊢ wp p` -->
<!--   &nbsp;&nbsp;then&nbsp;&nbsp; `e ↝* v` &nbsp;&nbsp;s.t.&nbsp;&nbsp; `⊨ p v` -->

<!-- ## Correct reasoning about STATE ## -->

<!-- * Say we have a term `e : nat -> t × nat` -->

<!-- * {.fragment} From logical relation, we get -->
<!--   - [e]{.under} : `s₀ : nat -> PURE (t × nat) (e* s₀)` -->

<!--   <\!-- Say this means it's a correct/valid Dijkstra monad -\-> -->

<!-- * {.fragment} From previous and correctness of `PURE`, we get\ -->
<!--   **Correctness of `STATE`**\ -->
<!--   If `⊢ e : nat -> t × nat` &nbsp;&nbsp;and&nbsp;&nbsp; ⊢ `e* s₀ p`\ -->
<!--   then&nbsp;&nbsp; [e]{.under} `s₀ ↝* (v,s)` -->
<!--   &nbsp;&nbsp;s.t.&nbsp;&nbsp; `⊨ p (v,s)` -->

<!-- ## Extra properties of the translations ## -->
<!-- <\!-- (Besides \* correctly specifying programs) -\-> -->
<!-- * **`*`-translation preserves equality** -->
<!--   - Monads mapped to Dijkstra monads -->
<!--   - Lifts mapped to Dijkstra lifts -->
<!--   - Laws about actions preserved -->

<!-- * {.fragment} `e*` is **monotonic**: maps weaker post's to weaker pre's -->
<!--   - `(∀x. p₁ ⇒ p₂) ⇒ e* p₁ ⇒ e* p₂` -->

<!-- * {.fragment} `e*` is **conjunctive**: distributes over ∧ and ∀ -->
<!--   - `e* (fun x -> p₁ x ∧ p₂ x) ⇔ e* p₁ ∧ e* p₂` -->

<!-- * {.fragment} so for any DMF monad we produce correct Dijkstra monad,\ -->
<!--   that's usable within the F\* verification system -->


<!------------------------------------------------------------------------------>

## Some ongoing work and dreams on F\* ##

* **[Improve tactics]{color:DarkBlue;}**, balance automation and control

* {.fragment} **[Dijkstra monads for free, semantically]{color:DarkBlue;}**

* {.fragment} **[Studying more effects]{color:DarkBlue;}**:
  probabilities, concurrency, ...

* {.fragment} **[Effect masking]{color:DarkBlue;}**:
  hiding exceptions, state, divergence(!?), ...

* {.fragment} **[Further work out metatheory]{color:DarkBlue;}**,
  **[self-certify core type-checker]{color:DarkBlue;}**
  <!-- - **monadic reification + monotonic state** and **relation to modal logic** -->
  <!-- - soundly allowing **subtyping for datatypes** (`list nat <: list int`) -->

<!-- * {.fragment} **[Join the team at Inria Paris + Microsoft Research]{color:DarkRed;}** -->

<!-- TODO: have new look at my list of problems -->

<!------------------------------------------------------------------------------>

## F*: verification of effectful programs ##

* **[Functional programming language with effects]{color:Black;}**

* **[Program verifier based on WPs and SMT]{color:DarkBlue;}**

* **[Interactive proof assistant based on dependent types]{color:DarkRed;}**

* **Open source, [code on GitHub](https://github.com/FStarLang/FStar)**

* **Tutorial, papers, slides at [fstar-lang.org](https://fstar-lang.org)**

<!-- * **PhD internships at Microsoft Research** (Cambridge, Redmond, -->
<!--   Bangalore); application in Dec 2017 - Jan 2018 -->
 
  

<!--
Next time:
- Less brain-dead syntax highlighting? Turn off?
- ?Add some strategic paper references maybe?
  -->
